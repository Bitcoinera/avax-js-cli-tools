"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestAPI = void 0;
const types_1 = require("src/utils/types");
class TestAPI extends types_1.APIBase {
    constructor(avax, endpoint = '/ext/testing') {
        super(avax, endpoint);
        this.TestGET = (input, path = '', axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod('get', path, { input }, axiosConfig); });
        this.TestDELETE = (input, path = '', axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod('delete', path, { input }, axiosConfig); });
        this.TestPOST = (input, path = '', axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod('post', path, {}, { input }, axiosConfig); });
        this.TestPUT = (input, path = '', axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod('put', path, {}, { input }, axiosConfig); });
        this.TestPATCH = (input, path = '', axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () { return this._TestMethod('patch', path, {}, { input }, axiosConfig); });
        this._respFn = (res) => {
            let response;
            if (typeof res.data === 'string') {
                response = JSON.parse(res.data);
            }
            else {
                response = res.data;
            }
            return response.result;
        };
        this._TestMethod = (method, path = '', getdata = {}, postdata = undefined, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {
            if (postdata === undefined) {
                return this.core[method](this.baseurl + path, getdata, {}, axiosConfig).then((res) => this._respFn(res));
            }
            return this.core[method](this.baseurl + path, getdata, postdata, {}, axiosConfig).then((res) => {
                res.data = JSON.stringify(res.data); // coverage completeness
                return this._respFn(res);
            });
        });
    }
}
exports.TestAPI = TestAPI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGxpYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3RzL3Rlc3RsaWIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQStEO0FBSS9ELE1BQWEsT0FBUSxTQUFRLGVBQU87SUErQmxDLFlBQVksSUFBa0IsRUFBRSxXQUFrQixjQUFjO1FBQUksS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQTlCMUYsWUFBTyxHQUFHLENBQU8sS0FBWSxFQUFFLE9BQWMsRUFBRSxFQUFFLGNBQWlDLFNBQVMsRUFBa0IsRUFBRSxnREFBQyxPQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFBLEdBQUEsQ0FBQztRQUV0SyxlQUFVLEdBQUcsQ0FBTyxLQUFZLEVBQUUsT0FBYyxFQUFFLEVBQUUsY0FBaUMsU0FBUyxFQUFrQixFQUFFLGdEQUFDLE9BQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUEsR0FBQSxDQUFDO1FBRTVLLGFBQVEsR0FBRyxDQUFPLEtBQVksRUFBRSxPQUFjLEVBQUUsRUFBRSxjQUFpQyxTQUFTLEVBQWtCLEVBQUUsZ0RBQUMsT0FBQSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUEsR0FBQSxDQUFDO1FBRTVLLFlBQU8sR0FBRyxDQUFPLEtBQVksRUFBRSxPQUFjLEVBQUUsRUFBRSxjQUFpQyxTQUFTLEVBQWtCLEVBQUUsZ0RBQUMsT0FBQSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUEsR0FBQSxDQUFDO1FBRTFLLGNBQVMsR0FBRyxDQUFPLEtBQVksRUFBRSxPQUFjLEVBQUUsRUFBRSxjQUFpQyxTQUFTLEVBQWtCLEVBQUUsZ0RBQUMsT0FBQSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUEsR0FBQSxDQUFDO1FBRXBLLFlBQU8sR0FBRyxDQUFDLEdBQXVCLEVBQUUsRUFBRTtZQUM5QyxJQUFJLFFBQVksQ0FBQztZQUNqQixJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQ2hDLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNqQztpQkFBTTtnQkFDTCxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQWMsQ0FBQzthQUMvQjtZQUNELE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUN6QixDQUFDLENBQUM7UUFFUSxnQkFBVyxHQUFHLENBQU8sTUFBYSxFQUFFLE9BQWMsRUFBRSxFQUFFLFVBQWlCLEVBQUUsRUFBRSxXQUFrQixTQUFTLEVBQUUsY0FBaUMsU0FBUyxFQUFrQixFQUFFO1lBQzlLLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDMUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBdUIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQzlIO1lBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQXVCLEVBQUUsRUFBRTtnQkFDakgsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtnQkFDN0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFBLENBQUM7SUFFeUYsQ0FBQztDQUM3RjtBQWhDRCwwQkFnQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElCYXNlLCBSZXF1ZXN0UmVzcG9uc2VEYXRhIH0gZnJvbSAnc3JjL3V0aWxzL3R5cGVzJztcbmltcG9ydCBBdmFsYW5jaGVDb3JlIGZyb20gJ3NyYy9hdmFsYW5jaGUnO1xuaW1wb3J0IHsgQXhpb3NSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnYXhpb3MnO1xuXG5leHBvcnQgY2xhc3MgVGVzdEFQSSBleHRlbmRzIEFQSUJhc2Uge1xuICBUZXN0R0VUID0gYXN5bmMgKGlucHV0OnN0cmluZywgcGF0aDpzdHJpbmcgPSAnJywgYXhpb3NDb25maWc6QXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkKTpQcm9taXNlPG9iamVjdD4gPT4gdGhpcy5fVGVzdE1ldGhvZCgnZ2V0JywgcGF0aCwgeyBpbnB1dCB9LCBheGlvc0NvbmZpZyk7XG5cbiAgVGVzdERFTEVURSA9IGFzeW5jIChpbnB1dDpzdHJpbmcsIHBhdGg6c3RyaW5nID0gJycsIGF4aW9zQ29uZmlnOkF4aW9zUmVxdWVzdENvbmZpZyA9IHVuZGVmaW5lZCk6UHJvbWlzZTxvYmplY3Q+ID0+IHRoaXMuX1Rlc3RNZXRob2QoJ2RlbGV0ZScsIHBhdGgsIHsgaW5wdXQgfSwgYXhpb3NDb25maWcpO1xuXG4gIFRlc3RQT1NUID0gYXN5bmMgKGlucHV0OnN0cmluZywgcGF0aDpzdHJpbmcgPSAnJywgYXhpb3NDb25maWc6QXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkKTpQcm9taXNlPG9iamVjdD4gPT4gdGhpcy5fVGVzdE1ldGhvZCgncG9zdCcsIHBhdGgsIHt9LCB7IGlucHV0IH0sIGF4aW9zQ29uZmlnKTtcblxuICBUZXN0UFVUID0gYXN5bmMgKGlucHV0OnN0cmluZywgcGF0aDpzdHJpbmcgPSAnJywgYXhpb3NDb25maWc6QXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkKTpQcm9taXNlPG9iamVjdD4gPT4gdGhpcy5fVGVzdE1ldGhvZCgncHV0JywgcGF0aCwge30sIHsgaW5wdXQgfSwgYXhpb3NDb25maWcpO1xuXG4gIFRlc3RQQVRDSCA9IGFzeW5jIChpbnB1dDpzdHJpbmcsIHBhdGg6c3RyaW5nID0gJycsIGF4aW9zQ29uZmlnOkF4aW9zUmVxdWVzdENvbmZpZyA9IHVuZGVmaW5lZCk6UHJvbWlzZTxvYmplY3Q+ID0+IHRoaXMuX1Rlc3RNZXRob2QoJ3BhdGNoJywgcGF0aCwge30sIHsgaW5wdXQgfSwgYXhpb3NDb25maWcpO1xuXG4gIHByb3RlY3RlZCBfcmVzcEZuID0gKHJlczpSZXF1ZXN0UmVzcG9uc2VEYXRhKSA9PiB7XG4gICAgbGV0IHJlc3BvbnNlOmFueTtcbiAgICBpZiAodHlwZW9mIHJlcy5kYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHJlcy5kYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2UgPSByZXMuZGF0YSBhcyBvYmplY3Q7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZS5yZXN1bHQ7XG4gIH07XG5cbiAgcHJvdGVjdGVkIF9UZXN0TWV0aG9kID0gYXN5bmMgKG1ldGhvZDpzdHJpbmcsIHBhdGg6c3RyaW5nID0gJycsIGdldGRhdGE6b2JqZWN0ID0ge30sIHBvc3RkYXRhOm9iamVjdCA9IHVuZGVmaW5lZCwgYXhpb3NDb25maWc6QXhpb3NSZXF1ZXN0Q29uZmlnID0gdW5kZWZpbmVkKTpQcm9taXNlPG9iamVjdD4gPT4ge1xuICAgIGlmIChwb3N0ZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb3JlW21ldGhvZF0odGhpcy5iYXNldXJsICsgcGF0aCwgZ2V0ZGF0YSwge30sIGF4aW9zQ29uZmlnKS50aGVuKChyZXM6UmVxdWVzdFJlc3BvbnNlRGF0YSkgPT4gdGhpcy5fcmVzcEZuKHJlcykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb3JlW21ldGhvZF0odGhpcy5iYXNldXJsICsgcGF0aCwgZ2V0ZGF0YSwgcG9zdGRhdGEsIHt9LCBheGlvc0NvbmZpZykudGhlbigocmVzOlJlcXVlc3RSZXNwb25zZURhdGEpID0+IHtcbiAgICAgIHJlcy5kYXRhID0gSlNPTi5zdHJpbmdpZnkocmVzLmRhdGEpOyAvLyBjb3ZlcmFnZSBjb21wbGV0ZW5lc3NcbiAgICAgIHJldHVybiB0aGlzLl9yZXNwRm4ocmVzKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihhdmF4OkF2YWxhbmNoZUNvcmUsIGVuZHBvaW50OnN0cmluZyA9ICcvZXh0L3Rlc3RpbmcnKSB7IHN1cGVyKGF2YXgsIGVuZHBvaW50KTsgfVxufVxuIl19