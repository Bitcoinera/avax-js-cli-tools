"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const src_1 = require("src");
const api_1 = __importDefault(require("src/apis/platformvm/api"));
const buffer_1 = require("buffer/");
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe('Platform', () => {
    const ip = '127.0.0.1';
    const port = 9650;
    const protocol = 'https';
    const username = 'AvaLabs';
    const password = 'password';
    const avalanche = new src_1.Avalanche(ip, port, protocol, 12345, undefined, undefined, true);
    let platform;
    beforeAll(() => {
        platform = new api_1.default(avalanche);
    });
    afterEach(() => {
        jest_mock_axios_1.default.reset();
    });
    test('createBlockchain 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const blockchainID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const vmID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const name = 'Some Blockchain';
        const genesis = '{ruh:"roh"}';
        const result = platform.createBlockchain(vmID, name, 1, genesis);
        const payload = {
            result: {
                blockchainID,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(blockchainID);
    }));
    test('createBlockchain 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const blockchainID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const vmID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const name = 'Some Blockchain';
        const genesis = '{ruh:"roh"}';
        const subnetID = 'abcdefg';
        const result = platform.createBlockchain(vmID, name, 1, genesis, subnetID);
        const payload = {
            result: {
                blockchainID,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(blockchainID);
    }));
    test('createBlockchain 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const blockchainID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const vmID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const name = 'Some Blockchain';
        const genesis = '{ruh:"roh"}';
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const result = platform.createBlockchain(vmID, name, 1, genesis, subnetID);
        const payload = {
            result: {
                blockchainID,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(blockchainID);
    }));
    test('getBlockchainStatus', () => __awaiter(void 0, void 0, void 0, function* () {
        const blockchainID = '7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh';
        const result = platform.getBlockchainStatus(blockchainID);
        const payload = {
            result: {
                status: 'Accepted',
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe('Accepted');
    }));
    test('createAccount 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const address = 'deadbeef';
        let privateKey;
        const username = 'Robert';
        const password = 'Paulson';
        const result = platform.createAccount(username, password, privateKey);
        const payload = {
            result: {
                address,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(address);
    }));
    test('createAccount 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const address = 'deadbeef';
        const privateKey = 'abcdef';
        const username = 'Robert';
        const password = 'Paulson';
        const result = platform.createAccount(username, password, privateKey);
        const payload = {
            result: {
                address,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(address);
    }));
    test('createAccount 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const address = 'deadbeef';
        const privateKey = buffer_1.Buffer.from('abcdef', 'hex');
        const username = 'Robert';
        const password = 'Paulson';
        const result = platform.createAccount(username, password, privateKey);
        const payload = {
            result: {
                address,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(address);
    }));
    test('getAccount', () => __awaiter(void 0, void 0, void 0, function* () {
        const address = 'deadbeef';
        const result = platform.getAccount(address);
        const resultobj = {
            address,
            nonce: '0',
            balance: '0',
        };
        const payload = {
            result: resultobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resultobj);
    }));
    test('exportPrivateKey', () => __awaiter(void 0, void 0, void 0, function* () {
        const address = 'deadbeef';
        const username = 'Robert';
        const password = 'Paulson';
        const privateKey = 'abcdef';
        const result = platform.exportKey(username, password, address);
        const resultobj = {
            privateKey,
        };
        const payload = {
            result: resultobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(privateKey);
    }));
    test('importPrivateKey', () => __awaiter(void 0, void 0, void 0, function* () {
        const address = 'deadbeef';
        const username = 'Robert';
        const password = 'Paulson';
        let privateKey;
        const result = platform.importKey(username, password, privateKey);
        const resultobj = {
            address,
        };
        const payload = {
            result: resultobj,
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(address);
    }));
    test('listAccounts', () => __awaiter(void 0, void 0, void 0, function* () {
        const username = 'Robert';
        const password = 'Paulson';
        const result = platform.listAccounts(username, password);
        const accountsArray = [
            {
                address: 'Q4MzFZZDPHRPAHFeDs3NiyyaZDvxHKivf',
                nonce: '0',
                balance: '0',
            },
            {
                address: 'NcbCRXGMpHxukVmT8sirZcDnCLh1ykWp4',
                nonce: '0',
                balance: '0',
            },
        ];
        const payload = {
            result: {
                accounts: accountsArray,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(accountsArray);
    }));
    test('getCurrentValidators 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const validators = ['val1', 'val2'];
        const result = platform.getCurrentValidators();
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('getCurrentValidators 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = 'abcdef';
        const validators = ['val1', 'val2'];
        const result = platform.getCurrentValidators(subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('getCurrentValidators 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const validators = ['val1', 'val2'];
        const result = platform.getCurrentValidators(subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('getPendingValidators 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const validators = ['val1', 'val2'];
        const result = platform.getPendingValidators();
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('getPendingValidators 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = 'abcdef';
        const validators = ['val1', 'val2'];
        const result = platform.getPendingValidators(subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('getPendingValidators 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const validators = ['val1', 'val2'];
        const result = platform.getPendingValidators(subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('sampleValidators 1', () => __awaiter(void 0, void 0, void 0, function* () {
        let subnetID;
        const validators = ['val1', 'val2'];
        const result = platform.sampleValidators(10, subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('sampleValidators 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = 'abcdef';
        const validators = ['val1', 'val2'];
        const result = platform.sampleValidators(10, subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('sampleValidators 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const validators = ['val1', 'val2'];
        const result = platform.sampleValidators(10, subnetID);
        const payload = {
            result: {
                validators,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(validators);
    }));
    test('addDefaultSubnetValidator 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const id = 'abcdef';
        const startTime = new Date(1985, 5, 9, 12, 59, 43, 9);
        const endTime = new Date(1982, 3, 1, 12, 58, 33, 7);
        const stakeAmount = new bn_js_1.default(13);
        const payerNonce = 3;
        const destination = 'fedcba';
        const delegationFeeRate = new bn_js_1.default(2);
        const utx = 'valid';
        const result = platform.addDefaultSubnetValidator(id, startTime, endTime, stakeAmount, payerNonce, destination, delegationFeeRate);
        const payload = {
            result: {
                unsignedTx: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('addNonDefaultSubnetValidator 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const id = 'abcdef';
        let subnetID;
        const startTime = new Date(1985, 5, 9, 12, 59, 43, 9);
        const endTime = new Date(1982, 3, 1, 12, 58, 33, 7);
        const weight = 13;
        const payerNonce = 3;
        const utx = 'valid';
        const result = platform.addNonDefaultSubnetValidator(id, subnetID, startTime, endTime, weight, payerNonce);
        const payload = {
            result: {
                unsignedTx: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('addNonDefaultSubnetValidator 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const id = 'abcdef';
        const subnetID = 'abcdef';
        const startTime = new Date(1985, 5, 9, 12, 59, 43, 9);
        const endTime = new Date(1982, 3, 1, 12, 58, 33, 7);
        const weight = 13;
        const payerNonce = 3;
        const utx = 'valid';
        const result = platform.addNonDefaultSubnetValidator(id, subnetID, startTime, endTime, weight, payerNonce);
        const payload = {
            result: {
                unsignedTx: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('addNonDefaultSubnetValidator 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const id = 'abcdef';
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const startTime = new Date(1985, 5, 9, 12, 59, 43, 9);
        const endTime = new Date(1982, 3, 1, 12, 58, 33, 7);
        const weight = 13;
        const payerNonce = 3;
        const utx = 'valid';
        const result = platform.addNonDefaultSubnetValidator(id, subnetID, startTime, endTime, weight, payerNonce);
        const payload = {
            result: {
                unsignedTx: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('addDefaultSubnetDelegator 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const id = 'abcdef';
        const startTime = new Date(1985, 5, 9, 12, 59, 43, 9);
        const endTime = new Date(1982, 3, 1, 12, 58, 33, 7);
        const stakeAmount = new bn_js_1.default(13);
        const payerNonce = 3;
        const destination = 'fedcba';
        const utx = 'valid';
        const result = platform.addDefaultSubnetDelegator(id, startTime, endTime, stakeAmount, payerNonce, destination);
        const payload = {
            result: {
                unsignedTx: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('createSubnet 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const controlKeys = ['abcdef'];
        const threshold = 13;
        const payerNonce = 3;
        const utx = 'valid';
        const result = platform.createSubnet(controlKeys, threshold, payerNonce);
        const payload = {
            result: {
                unsignedTx: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('validatedBy 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const blockchainID = 'abcdef';
        const resp = 'valid';
        const result = platform.validatedBy(blockchainID);
        const payload = {
            result: {
                subnetID: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('validates 1', () => __awaiter(void 0, void 0, void 0, function* () {
        let subnetID;
        const resp = ['valid'];
        const result = platform.validates(subnetID);
        const payload = {
            result: {
                blockchainIDs: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('validates 2', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = 'deadbeef';
        const resp = ['valid'];
        const result = platform.validates(subnetID);
        const payload = {
            result: {
                blockchainIDs: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('validates 3', () => __awaiter(void 0, void 0, void 0, function* () {
        const subnetID = buffer_1.Buffer.from('abcdef', 'hex');
        const resp = ['valid'];
        const result = platform.validates(subnetID);
        const payload = {
            result: {
                blockchainIDs: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('getBlockchains 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const resp = [{
                id: 'nodeID',
                subnetID: 'subnetID',
                vmID: 'vmID',
            }];
        const result = platform.getBlockchains();
        const payload = {
            result: {
                blockchains: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(resp);
    }));
    test('exportAVAX 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const amount = new bn_js_1.default(100);
        const to = 'abcdef';
        const payerNonce = 3;
        const utx = 'valid';
        const result = platform.exportAVAX(amount, to, payerNonce);
        const payload = {
            result: {
                unsignedTx: utx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(utx);
    }));
    test('importAVAX 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const to = 'abcdef';
        const payerNonce = 3;
        const username = 'Robert';
        const password = 'Paulson';
        const tx = 'valid';
        const result = platform.importAVAX(username, password, to, payerNonce);
        const payload = {
            result: {
                tx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(tx);
    }));
    test('sign 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const utx = 'abcdef';
        const signer = 'fedcba';
        const username = 'Robert';
        const password = 'Paulson';
        const tx = 'valid';
        const result = platform.sign(username, password, utx, signer);
        const payload = {
            result: {
                tx,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(tx);
    }));
    test('issueTx 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const tx = 'abcdef';
        const txID = 'valid';
        const result = platform.issueTx(tx);
        const payload = {
            result: {
                txID,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toBe(txID);
    }));
    test('getSubnets 1', () => __awaiter(void 0, void 0, void 0, function* () {
        const resp = [{
                id: 'id',
                controlKeys: ['controlKeys'],
                threshold: 'threshold',
            }];
        const result = platform.getSubnets();
        const payload = {
            result: {
                subnets: resp,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response).toEqual(resp);
    }));
});
//# sourceMappingURL=data:application/json;base64,