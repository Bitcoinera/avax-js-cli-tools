"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utxos_1 = require("src/apis/avm/utxos");
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const outputs_1 = require("src/apis/avm/outputs");
const types_1 = require("src/apis/avm/types");
const ops_1 = require("src/apis/avm/ops");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe('Operations', () => {
    let assetID = "8a5d2d32e68bc50036e4d086044617fe4a0a0296b274999ba568ea92da46d533";
    let assetIDBuff = buffer_1.Buffer.from(assetID, "hex");
    let addrs = [
        bintools.cb58Decode("B6D4v1VtPYLbiUvYXtW4Px8oE9imC2vGW"),
        bintools.cb58Decode("P5wdRuZeaDt28eHMP5S3w9ZdoBfo7wuzF"),
        bintools.cb58Decode("6Y3kysjF9jnHnYkdS9yGAuoHyae2eNmeV")
    ].sort();
    let locktime = new bn_js_1.default(54321);
    let addrpay = [addrs[0], addrs[1]];
    let payload = buffer_1.Buffer.alloc(1024);
    payload.write("All you Trekkies and TV addicts, Don't mean to diss don't mean to bring static.", 0, 1024, "utf8");
    describe('NFTMintOperation', () => {
        test('SelectOperationClass', () => {
            let goodop = new ops_1.NFTMintOperation(0, buffer_1.Buffer.from(""), []);
            let operation = ops_1.SelectOperationClass(goodop.getOperationID());
            expect(operation).toBeInstanceOf(ops_1.NFTMintOperation);
            expect(() => {
                ops_1.SelectOperationClass(99);
            }).toThrow("Error - SelectOperationClass: unknown opid");
        });
        test('comparator', () => {
            let outputOwners = [];
            outputOwners.push(new outputs_1.OutputOwners(addrs, locktime, 1));
            let op1 = new ops_1.NFTMintOperation(1, payload, outputOwners);
            let op2 = new ops_1.NFTMintOperation(2, payload, outputOwners);
            let op3 = new ops_1.NFTMintOperation(0, payload, outputOwners);
            let cmp = ops_1.NFTMintOperation.comparator();
            expect(cmp(op1, op1)).toBe(0);
            expect(cmp(op2, op2)).toBe(0);
            expect(cmp(op3, op3)).toBe(0);
            expect(cmp(op1, op2)).toBe(-1);
            expect(cmp(op1, op3)).toBe(1);
        });
        test('Functionality', () => {
            let outputOwners = [];
            outputOwners.push(new outputs_1.OutputOwners(addrs, locktime, 1));
            let op = new ops_1.NFTMintOperation(0, payload, outputOwners);
            expect(op.getOperationID()).toBe(types_1.AVMConstants.NFTMINTOPID);
            expect(op.getOutputOwners().toString()).toBe(outputOwners.toString());
            let opcopy = new ops_1.NFTMintOperation();
            let opb = op.toBuffer();
            opcopy.fromBuffer(opb);
            expect(opcopy.toString()).toBe(op.toString());
        });
    });
    describe('NFTTransferOperation', () => {
        test('SelectOperationClass', () => {
            let nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
            let goodop = new ops_1.NFTTransferOperation(nout);
            let operation = ops_1.SelectOperationClass(goodop.getOperationID());
            expect(operation).toBeInstanceOf(ops_1.NFTTransferOperation);
            expect(() => {
                ops_1.SelectOperationClass(99);
            }).toThrow("Error - SelectOperationClass: unknown opid");
        });
        test('comparator', () => {
            let op1 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1));
            let op2 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(1001, payload, addrs, locktime, 1));
            let op3 = new ops_1.NFTTransferOperation(new outputs_1.NFTTransferOutput(999, payload, addrs, locktime, 1));
            let cmp = ops_1.NFTTransferOperation.comparator();
            expect(cmp(op1, op1)).toBe(0);
            expect(cmp(op2, op2)).toBe(0);
            expect(cmp(op3, op3)).toBe(0);
            expect(cmp(op1, op2)).toBe(-1);
            expect(cmp(op1, op3)).toBe(1);
        });
        test('Functionality', () => {
            let nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
            let op = new ops_1.NFTTransferOperation(nout);
            expect(op.getOperationID()).toBe(types_1.AVMConstants.NFTXFEROP);
            expect(op.getOutput().toString()).toBe(nout.toString());
            let opcopy = new ops_1.NFTTransferOperation();
            opcopy.fromBuffer(op.toBuffer());
            expect(opcopy.toString()).toBe(op.toString());
            op.addSignatureIdx(0, addrs[0]);
            let sigidx = op.getSigIdxs();
            expect(sigidx[0].getSource().toString("hex")).toBe(addrs[0].toString("hex"));
            opcopy.fromBuffer(op.toBuffer());
            expect(opcopy.toString()).toBe(op.toString());
        });
    });
    test('TransferableOperation', () => {
        let nout = new outputs_1.NFTTransferOutput(1000, payload, addrs, locktime, 1);
        let op = new ops_1.NFTTransferOperation(nout);
        let nfttxid = buffer_1.Buffer.from(create_hash_1.default("sha256").update(bintools.fromBNToBuffer(new bn_js_1.default(1000), 32)).digest());
        let nftoutputidx = buffer_1.Buffer.from(bintools.fromBNToBuffer(new bn_js_1.default(1000), 4));
        let nftutxo = new utxos_1.UTXO(types_1.AVMConstants.LATESTCODEC, nfttxid, nftoutputidx, assetIDBuff, nout);
        let xferop = new ops_1.TransferableOperation(assetIDBuff, [nftutxo.getUTXOID()], op);
        let xferop2 = new ops_1.TransferableOperation(assetIDBuff, [buffer_1.Buffer.concat([nfttxid, nftoutputidx])], op);
        let uid = new types_1.UTXOID();
        uid.fromString(nftutxo.getUTXOID());
        let xferop3 = new ops_1.TransferableOperation(assetIDBuff, [uid], op);
        expect(xferop.getAssetID().toString("hex")).toBe(assetID);
        let utxoiddeserialized = bintools.cb58Decode(xferop.getUTXOIDs()[0].toString());
        expect(bintools.bufferToB58(utxoiddeserialized)).toBe(nftutxo.getUTXOID());
        expect(xferop.getOperation().toString()).toBe(op.toString());
        let opcopy = new ops_1.TransferableOperation();
        opcopy.fromBuffer(xferop.toBuffer());
        expect(opcopy.toString()).toBe(xferop.toString());
        expect(xferop2.toBuffer().toString("hex")).toBe(xferop.toBuffer().toString('hex'));
        expect(xferop3.toBuffer().toString("hex")).toBe(xferop.toBuffer().toString('hex'));
    });
});
//# sourceMappingURL=data:application/json;base64,