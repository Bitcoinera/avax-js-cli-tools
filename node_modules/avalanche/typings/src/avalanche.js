"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @packageDocumentation
 * @module AvalancheCore
 */
const axios_1 = __importDefault(require("axios"));
const types_1 = require("./utils/types");
/**
 * AvalancheCore is middleware for interacting with Avalanche node RPC APIs.
 *
 * Example usage:
 * ```js
 * let avalanche = new AvalancheCore("127.0.0.1", 9650, "https");
 * ```
 *
 */
class AvalancheCore {
    /**
       * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.
       *
       * @param ip The hostname to resolve to reach the Avalanche Client APIs
       * @param port The port to resolve to reach the Avalanche Client APIs
       * @param protocol The protocol string to use before a "://" in a request, ex: "http", "https", "git", "ws", etc ...
       */
    constructor(ip, port, protocol = 'http') {
        this.networkID = 0;
        this.hrp = '';
        this.apis = {};
        /**
           * Sets the address and port of the main Avalanche Client.
           *
           * @param ip The hostname to resolve to reach the Avalanche Client RPC APIs
           * @param port The port to resolve to reach the Avalanche Client RPC APIs
           * @param protocol The protocol string to use before a "://" in a request,
           * ex: "http", "https", "git", "ws", etc ...
           */
        this.setAddress = (ip, port, protocol = 'http') => {
            this.ip = ip;
            this.port = port;
            this.protocol = protocol;
            this.url = `${protocol}://${ip}:${port}`;
        };
        /**
           * Returns the protocol such as "http", "https", "git", "ws", etc.
           */
        this.getProtocol = () => this.protocol;
        /**
           * Returns the IP for the Avalanche node.
           */
        this.getIP = () => this.ip;
        /**
           * Returns the port for the Avalanche node.
           */
        this.getPort = () => this.port;
        /**
           * Returns the URL of the Avalanche node (ip + port);
           */
        this.getURL = () => this.url;
        /**
           * Returns the networkID;
           */
        this.getNetworkID = () => this.networkID;
        /**
           * Sets the networkID
           */
        this.setNetworkID = (netid) => {
            this.networkID = netid;
            this.hrp = types_1.getPreferredHRP(this.networkID);
        };
        /**
         * Returns the Human-Readable-Part of the network associated with this key.
         *
         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme
         */
        this.getHRP = () => this.hrp;
        /**
         * Sets the the Human-Readable-Part of the network associated with this key.
         *
         * @param hrp String for the Human-Readable-Part of Bech32 addresses
         */
        this.setHRP = (hrp) => {
            this.hrp = hrp;
        };
        /**
           * Adds an API to the middleware. The API resolves to a registered blockchain's RPC.
           *
           * In TypeScript:
           * ```js
           * avalanche.addAPI<MyVMClass>("mychain", MyVMClass, "/ext/bc/mychain");
           * ```
           *
           * In Javascript:
           * ```js
           * avalanche.addAPI("mychain", MyVMClass, "/ext/bc/mychain");
           * ```
           *
           * @typeparam GA Class of the API being added
           * @param apiName A label for referencing the API in the future
           * @param constructorFN A reference to the class which instantiates the API
           * @param baseurl Path to resolve to reach the API
           *
           */
        this.addAPI = (apiName, ConstructorFN, baseurl = undefined, ...args) => {
            if (typeof baseurl === 'undefined') {
                this.apis[apiName] = new ConstructorFN(this, undefined, ...args);
            }
            else {
                this.apis[apiName] = new ConstructorFN(this, baseurl, ...args);
            }
        };
        /**
           * Retrieves a reference to an API by its apiName label.
           *
           * @param apiName Name of the API to return
           */
        this.api = (apiName) => this.apis[apiName];
        /**
           * @ignore
           */
        this._request = (xhrmethod, baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => __awaiter(this, void 0, void 0, function* () {
            let config;
            if (axiosConfig) {
                config = axiosConfig;
            }
            else {
                config = {
                    baseURL: `${this.protocol}://${this.ip}:${this.port}`,
                    responseType: 'text',
                };
            }
            config.url = baseurl;
            config.method = xhrmethod;
            config.headers = headers;
            config.data = postdata;
            config.params = getdata;
            return axios_1.default.request(config).then((resp) => {
                // purging all that is axios
                const xhrdata = new types_1.RequestResponseData();
                xhrdata.data = resp.data;
                xhrdata.headers = resp.headers;
                xhrdata.request = resp.request;
                xhrdata.status = resp.status;
                xhrdata.statusText = resp.statusText;
                return xhrdata;
            });
        });
        /**
           * Makes a GET call to an API.
           *
           * @param baseurl Path to the api
           * @param getdata Object containing the key value pairs sent in GET
           * @param parameters Object containing the parameters of the API call
           * @param headers An array HTTP Request Headers
           * @param axiosConfig Configuration for the axios javascript library that will be the
           * foundation for the rest of the parameters
           *
           * @returns A promise for [[RequestResponseData]]
           */
        this.get = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request('GET', baseurl, getdata, {}, headers, axiosConfig);
        /**
           * Makes a DELETE call to an API.
           *
           * @param baseurl Path to the API
           * @param getdata Object containing the key value pairs sent in DELETE
           * @param parameters Object containing the parameters of the API call
           * @param headers An array HTTP Request Headers
           * @param axiosConfig Configuration for the axios javascript library that will be the
           * foundation for the rest of the parameters
           *
           * @returns A promise for [[RequestResponseData]]
           */
        this.delete = (baseurl, getdata, headers = {}, axiosConfig = undefined) => this._request('DELETE', baseurl, getdata, {}, headers, axiosConfig);
        /**
           * Makes a POST call to an API.
           *
           * @param baseurl Path to the API
           * @param getdata Object containing the key value pairs sent in POST
           * @param postdata Object containing the key value pairs sent in POST
           * @param parameters Object containing the parameters of the API call
           * @param headers An array HTTP Request Headers
           * @param axiosConfig Configuration for the axios javascript library that will be the
           * foundation for the rest of the parameters
           *
           * @returns A promise for [[RequestResponseData]]
           */
        this.post = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('POST', baseurl, getdata, postdata, headers, axiosConfig);
        /**
           * Makes a PUT call to an API.
           *
           * @param baseurl Path to the baseurl
           * @param getdata Object containing the key value pairs sent in PUT
           * @param postdata Object containing the key value pairs sent in PUT
           * @param parameters Object containing the parameters of the API call
           * @param headers An array HTTP Request Headers
           * @param axiosConfig Configuration for the axios javascript library that will be the
           * foundation for the rest of the parameters
           *
           * @returns A promise for [[RequestResponseData]]
           */
        this.put = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('PUT', baseurl, getdata, postdata, headers, axiosConfig);
        /**
           * Makes a PATCH call to an API.
           *
           * @param baseurl Path to the baseurl
           * @param getdata Object containing the key value pairs sent in PATCH
           * @param postdata Object containing the key value pairs sent in PATCH
           * @param parameters Object containing the parameters of the API call
           * @param headers An array HTTP Request Headers
           * @param axiosConfig Configuration for the axios javascript library that will be the
           * foundation for the rest of the parameters
           *
           * @returns A promise for [[RequestResponseData]]
           */
        this.patch = (baseurl, getdata, postdata, headers = {}, axiosConfig = undefined) => this._request('PATCH', baseurl, getdata, postdata, headers, axiosConfig);
        this.setAddress(ip, port, protocol);
    }
}
exports.default = AvalancheCore;
//# sourceMappingURL=data:application/json;base64,