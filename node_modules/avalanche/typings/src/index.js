"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Platform = exports.Metrics = exports.Keystore = exports.Info = exports.Health = exports.AVM = exports.Admin = exports.AvalancheCore = exports.CoreTypes = exports.DB = exports.BinTools = exports.Avalanche = void 0;
/**
 * @packageDocumentation
 * @module Avalanche
 */
const avalanche_1 = __importDefault(require("./avalanche"));
exports.AvalancheCore = avalanche_1.default;
const api_1 = __importDefault(require("./apis/admin/api"));
exports.Admin = api_1.default;
const api_2 = __importDefault(require("./apis/avm/api"));
exports.AVM = api_2.default;
const api_3 = __importDefault(require("./apis/health/api"));
exports.Health = api_3.default;
const api_4 = __importDefault(require("./apis/info/api"));
exports.Info = api_4.default;
const api_5 = __importDefault(require("./apis/keystore/api"));
exports.Keystore = api_5.default;
const api_6 = __importDefault(require("./apis/metrics/api"));
exports.Metrics = api_6.default;
const api_7 = __importDefault(require("./apis/platformvm/api"));
exports.Platform = api_7.default;
const CoreTypes = __importStar(require("./utils/types"));
exports.CoreTypes = CoreTypes;
const bintools_1 = __importDefault(require("./utils/bintools"));
exports.BinTools = bintools_1.default;
const db_1 = __importDefault(require("./utils/db"));
exports.DB = db_1.default;
const types_1 = require("./utils/types");
/**
 * Avalanche.js is middleware for interacting with Avalanche node RPC APIs.
 *
 * Example usage:
 * ```js
 * let avalanche = new Avalanche("127.0.0.1", 9650, "https");
 * ```
 *
 */
class Avalanche extends avalanche_1.default {
    /**
       * Creates a new Avalanche instance. Sets the address and port of the main Avalanche Client.
       *
       * @param ip The hostname to resolve to reach the Avalanche Client RPC APIs
       * @param port The port to resolve to reach the Avalanche Client RPC APIs
       * @param protocol The protocol string to use before a "://" in a request,
       * ex: "http", "https", "git", "ws", etc ...
       * @param networkid Sets the NetworkID of the class. Default 3
       * @param avmChainID Sets the blockchainID for the AVM. Will try to auto-detect,
       * otherwise default "2oALd6xoUMp3oSHMiJYVqMcbaWxGQWYosrfiT7AaFKKNG5dmKD"
       * @param skipinit Skips creating the APIs
       */
    constructor(ip, port, protocol = 'http', networkID = types_1.DefaultNetworkID, avmChainID = undefined, hrp = undefined, skipinit = false) {
        super(ip, port, protocol);
        /**
           * Returns a reference to the Admin RPC.
           */
        this.Admin = () => this.apis.admin;
        /**
           * Returns a reference to the AVM RPC pointed at the X-Chain.
           */
        this.XChain = () => this.apis.xchain;
        /**
           * Returns a reference to the Health RPC for a node.
           */
        this.Health = () => this.apis.health;
        /**
           * Returns a reference to the Info RPC for a node.
           */
        this.Info = () => this.apis.info;
        /**
           * Returns a reference to the Metrics RPC.
           */
        this.Metrics = () => this.apis.metrics;
        /**
           * Returns a reference to the Keystore RPC for a node. We label it "NodeKeys" to reduce
           * confusion about what it's accessing.
           */
        this.NodeKeys = () => this.apis.keystore;
        /**
           * Returns a reference to the PlatformVM RPC pointed at the P-Chain.
           */
        this.PChain = () => this.apis.pchain;
        let chainid = avmChainID;
        if (typeof avmChainID === 'undefined'
            || !avmChainID
            || avmChainID.toLowerCase() === 'avm'
            || avmChainID.toLowerCase() === 'x') {
            if (networkID.toString() in types_1.Defaults.network) {
                chainid = types_1.Defaults.network[networkID].X.blockchainID;
            }
            else {
                chainid = '2oALd6xoUMp3oSHMiJYVqMcbaWxGQWYosrfiT7AaFKKNG5dmKD';
            }
        }
        if (typeof networkID === 'number' && networkID >= 0) {
            this.networkID = networkID;
        }
        else if (typeof networkID === "undefined") {
            networkID = types_1.DefaultNetworkID;
        }
        if (typeof hrp !== "undefined") {
            this.hrp = hrp;
        }
        else {
            this.hrp = types_1.getPreferredHRP(this.networkID);
        }
        if (!skipinit) {
            this.addAPI('admin', api_1.default);
            this.addAPI('xchain', api_2.default, '/ext/bc/X', chainid);
            this.addAPI('health', api_3.default);
            this.addAPI('info', api_4.default);
            this.addAPI('keystore', api_5.default);
            this.addAPI('metrics', api_6.default);
            this.addAPI('pchain', api_7.default);
        }
    }
}
exports.default = Avalanche;
exports.Avalanche = Avalanche;
__exportStar(require("./avalanche"), exports);
__exportStar(require("./apis/avm/api"), exports);
__exportStar(require("./apis/admin/api"), exports);
__exportStar(require("./apis/keystore/api"), exports);
__exportStar(require("./apis/platformvm/api"), exports);
__exportStar(require("./utils/bintools"), exports);
__exportStar(require("./utils/db"), exports);
__exportStar(require("./utils/payload"), exports);
__exportStar(require("./utils/types"), exports);
var credentials_1 = require("./apis/avm/credentials");
Object.defineProperty(exports, "SelectCredentialClass", { enumerable: true, get: function () { return credentials_1.SelectCredentialClass; } });
Object.defineProperty(exports, "Credential", { enumerable: true, get: function () { return credentials_1.Credential; } });
Object.defineProperty(exports, "SecpCredential", { enumerable: true, get: function () { return credentials_1.SecpCredential; } });
Object.defineProperty(exports, "NFTCredential", { enumerable: true, get: function () { return credentials_1.NFTCredential; } });
var inputs_1 = require("./apis/avm/inputs");
Object.defineProperty(exports, "SelectInputClass", { enumerable: true, get: function () { return inputs_1.SelectInputClass; } });
Object.defineProperty(exports, "Input", { enumerable: true, get: function () { return inputs_1.Input; } });
Object.defineProperty(exports, "TransferableInput", { enumerable: true, get: function () { return inputs_1.TransferableInput; } });
Object.defineProperty(exports, "AmountInput", { enumerable: true, get: function () { return inputs_1.AmountInput; } });
Object.defineProperty(exports, "SecpInput", { enumerable: true, get: function () { return inputs_1.SecpInput; } });
var keychain_1 = require("./apis/avm/keychain");
Object.defineProperty(exports, "AVMKeyPair", { enumerable: true, get: function () { return keychain_1.AVMKeyPair; } });
Object.defineProperty(exports, "AVMKeyChain", { enumerable: true, get: function () { return keychain_1.AVMKeyChain; } });
var ops_1 = require("./apis/avm/ops");
Object.defineProperty(exports, "SelectOperationClass", { enumerable: true, get: function () { return ops_1.SelectOperationClass; } });
Object.defineProperty(exports, "Operation", { enumerable: true, get: function () { return ops_1.Operation; } });
Object.defineProperty(exports, "TransferableOperation", { enumerable: true, get: function () { return ops_1.TransferableOperation; } });
Object.defineProperty(exports, "NFTTransferOperation", { enumerable: true, get: function () { return ops_1.NFTTransferOperation; } });
Object.defineProperty(exports, "NFTMintOperation", { enumerable: true, get: function () { return ops_1.NFTMintOperation; } });
var outputs_1 = require("./apis/avm/outputs");
Object.defineProperty(exports, "SelectOutputClass", { enumerable: true, get: function () { return outputs_1.SelectOutputClass; } });
Object.defineProperty(exports, "Output", { enumerable: true, get: function () { return outputs_1.Output; } });
Object.defineProperty(exports, "TransferableOutput", { enumerable: true, get: function () { return outputs_1.TransferableOutput; } });
Object.defineProperty(exports, "AmountOutput", { enumerable: true, get: function () { return outputs_1.AmountOutput; } });
Object.defineProperty(exports, "SecpOutput", { enumerable: true, get: function () { return outputs_1.SecpOutput; } });
Object.defineProperty(exports, "NFTOutBase", { enumerable: true, get: function () { return outputs_1.NFTOutBase; } });
Object.defineProperty(exports, "NFTTransferOutput", { enumerable: true, get: function () { return outputs_1.NFTTransferOutput; } });
Object.defineProperty(exports, "NFTMintOutput", { enumerable: true, get: function () { return outputs_1.NFTMintOutput; } });
var tx_1 = require("./apis/avm/tx");
Object.defineProperty(exports, "BaseTx", { enumerable: true, get: function () { return tx_1.BaseTx; } });
Object.defineProperty(exports, "CreateAssetTx", { enumerable: true, get: function () { return tx_1.CreateAssetTx; } });
Object.defineProperty(exports, "OperationTx", { enumerable: true, get: function () { return tx_1.OperationTx; } });
Object.defineProperty(exports, "UnsignedTx", { enumerable: true, get: function () { return tx_1.UnsignedTx; } });
Object.defineProperty(exports, "Tx", { enumerable: true, get: function () { return tx_1.Tx; } });
var types_2 = require("./apis/avm/types");
Object.defineProperty(exports, "SigIdx", { enumerable: true, get: function () { return types_2.SigIdx; } });
Object.defineProperty(exports, "Signature", { enumerable: true, get: function () { return types_2.Signature; } });
Object.defineProperty(exports, "Address", { enumerable: true, get: function () { return types_2.Address; } });
Object.defineProperty(exports, "UTXOID", { enumerable: true, get: function () { return types_2.UTXOID; } });
Object.defineProperty(exports, "InitialStates", { enumerable: true, get: function () { return types_2.InitialStates; } });
Object.defineProperty(exports, "AVMConstants", { enumerable: true, get: function () { return types_2.AVMConstants; } });
Object.defineProperty(exports, "UnixNow", { enumerable: true, get: function () { return types_2.UnixNow; } });
var utxos_1 = require("./apis/avm/utxos");
Object.defineProperty(exports, "UTXO", { enumerable: true, get: function () { return utxos_1.UTXO; } });
Object.defineProperty(exports, "UTXOSet", { enumerable: true, get: function () { return utxos_1.UTXOSet; } });
var keychain_2 = require("./apis/platformvm/keychain");
Object.defineProperty(exports, "PlatformVMKeyPair", { enumerable: true, get: function () { return keychain_2.PlatformVMKeyPair; } });
Object.defineProperty(exports, "PlatformVMKeyChain", { enumerable: true, get: function () { return keychain_2.PlatformVMKeyChain; } });
var types_3 = require("./apis/platformvm/types");
Object.defineProperty(exports, "PlatformVMConstants", { enumerable: true, get: function () { return types_3.PlatformVMConstants; } });
//# sourceMappingURL=data:application/json;base64,