"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base58 = void 0;
/**
 * @packageDocumentation
 * @module Utils-BinTools
 */
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const create_hash_1 = __importDefault(require("create-hash"));
const bech32 = __importStar(require("bech32"));
/**
 * A Base58 class that uses the cross-platform Buffer module. Built so that Typescript
 * will accept the code.
 *
 * ```js
 * let b58:Base58 = new Base58();
 * let str:string = b58.encode(somebuffer);
 * let buff:Buffer = b58.decode(somestring);
 * ```
 */
class Base58 {
    constructor() {
        this.b58alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
        this.alphabetIdx0 = '1';
        this.b58 = [
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 0, 1, 2, 3, 4, 5, 6,
            7, 8, 255, 255, 255, 255, 255, 255,
            255, 9, 10, 11, 12, 13, 14, 15,
            16, 255, 17, 18, 19, 20, 21, 255,
            22, 23, 24, 25, 26, 27, 28, 29,
            30, 31, 32, 255, 255, 255, 255, 255,
            255, 33, 34, 35, 36, 37, 38, 39,
            40, 41, 42, 43, 255, 44, 45, 46,
            47, 48, 49, 50, 51, 52, 53, 54,
            55, 56, 57, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
            255, 255, 255, 255, 255, 255, 255, 255,
        ];
        this.big58Radix = new bn_js_1.default(58);
        this.bigZero = new bn_js_1.default(0);
        /**
           * Encodes a {@link https://github.com/feross/buffer|Buffer} as a base-58 string
           *
           * @param buff A {@link https://github.com/feross/buffer|Buffer} to encode
           *
           * @returns A base-58 string.
           */
        this.encode = (buff) => {
            let x = new bn_js_1.default(buff.toString('hex'), 'hex', 'be');
            let answer = ''; // = Buffer.alloc(buff.length*136/100, 0);
            while (x.cmp(this.bigZero) > 0) {
                const mod = x.mod(this.big58Radix);
                x = x.div(this.big58Radix);
                answer += this.b58alphabet[mod.toNumber()];
            }
            for (let i = 0; i < buff.length; i++) {
                if (buff.readUInt8(i) !== 0) {
                    break;
                }
                answer += this.alphabetIdx0;
            }
            return answer.split('').reverse().join('');
        };
        /**
           * Dencodes a base-58 into a {@link https://github.com/feross/buffer|Buffer}
           *
           * @param b A base-58 string to decode
           *
           * @returns A {@link https://github.com/feross/buffer|Buffer} from the decoded string.
           */
        this.decode = (b) => {
            const answer = new bn_js_1.default(0);
            const j = new bn_js_1.default(1);
            for (let i = b.length - 1; i >= 0; i--) {
                const tmp = this.b58[b.charCodeAt(i)];
                if (tmp === 255) {
                    throw new Error('Error - Base58.decode: not a valid base58 string');
                }
                const scratch = new bn_js_1.default(tmp);
                scratch.imul(j);
                answer.iadd(scratch);
                j.imul(this.big58Radix);
            }
            let anshex = answer.toString('hex');
            anshex = anshex.length % 2 ? `0${anshex}` : anshex;
            const tmpval = buffer_1.Buffer.from(anshex, 'hex');
            let numZeros;
            for (numZeros = 0; numZeros < b.length; numZeros++) {
                if (b[numZeros] !== this.alphabetIdx0) {
                    break;
                }
            }
            const xlen = numZeros + tmpval.length;
            const result = buffer_1.Buffer.alloc(xlen, 0);
            tmpval.copy(result, numZeros);
            return result;
        };
    }
}
exports.Base58 = Base58;
/**
 * A class containing tools useful in interacting with binary data cross-platform using
 * nodejs & javascript.
 *
 * This class should never be instantiated directly. Instead,
 * invoke the "BinTools.getInstance()" static * function to grab the singleton
 * instance of the tools.
 *
 * Everything in this library uses
 * the {@link https://github.com/feross/buffer|feross's Buffer class}.
 *
 * ```js
 * const bintools = BinTools.getInstance();
 * let b58str = bintools.bufferToB58(Buffer.from("Wubalubadubdub!"));
 * ```
 */
class BinTools {
    constructor() {
        /**
           * Produces a string from a {@link https://github.com/feross/buffer|Buffer}
           * representing a string.
           *
           * @param buff The {@link https://github.com/feross/buffer|Buffer} to convert to a string
           */
        this.bufferToString = (buff) => this.copyFrom(buff, 2).toString('utf8');
        /**
           * Produces a {@link https://github.com/feross/buffer|Buffer} from a string.
           *
           * @param str The string to convert to a {@link https://github.com/feross/buffer|Buffer}
           */
        this.stringToBuffer = (str) => {
            const buff = buffer_1.Buffer.alloc(2 + str.length);
            buff.writeUInt16BE(str.length, 0);
            buff.write(str, 2, str.length, 'utf8');
            return buff;
        };
        /**
           * Makes a copy (no reference) of a {@link https://github.com/feross/buffer|Buffer}
           * over provided indecies.
           *
           * @param buff The {@link https://github.com/feross/buffer|Buffer} to copy
           * @param start The index to start the copy
           * @param end The index to end the copy
           */
        this.copyFrom = (buff, start = 0, end = undefined) => {
            let theEnd = end;
            if (end === undefined) {
                theEnd = buff.length;
            }
            return buffer_1.Buffer.from(Uint8Array.prototype.slice.call(buff.slice(start, theEnd)));
        };
        /**
           * Takes a {@link https://github.com/feross/buffer|Buffer} and returns a base-58 string of
           * the {@link https://github.com/feross/buffer|Buffer}.
           *
           * @param buff The {@link https://github.com/feross/buffer|Buffer} to convert to base-58
           */
        this.bufferToB58 = (buff) => this.b58.encode(buff);
        /**
           * Takes a base-58 string and returns a {@link https://github.com/feross/buffer|Buffer}.
           *
           * @param b58str The base-58 string to convert
           * to a {@link https://github.com/feross/buffer|Buffer}
           */
        this.b58ToBuffer = (b58str) => this.b58.decode(b58str);
        /**
           * Takes a {@link https://github.com/feross/buffer|Buffer} and returns an ArrayBuffer.
           *
           * @param buff The {@link https://github.com/feross/buffer|Buffer} to
           * convert to an ArrayBuffer
           */
        this.fromBufferToArrayBuffer = (buff) => {
            const ab = new ArrayBuffer(buff.length);
            const view = new Uint8Array(ab);
            for (let i = 0; i < buff.length; ++i) {
                view[i] = buff[i];
            }
            return view;
        };
        /**
           * Takes an ArrayBuffer and converts it to a {@link https://github.com/feross/buffer|Buffer}.
           *
           * @param ab The ArrayBuffer to convert to a {@link https://github.com/feross/buffer|Buffer}
           */
        this.fromArrayBufferToBuffer = (ab) => {
            const buf = buffer_1.Buffer.alloc(ab.byteLength);
            for (let i = 0; i < ab.byteLength; ++i) {
                buf[i] = ab[i];
            }
            return buf;
        };
        /**
           * Takes a {@link https://github.com/feross/buffer|Buffer} and converts it
           * to a {@link https://github.com/indutny/bn.js/|BN}.
           *
           * @param buff The {@link https://github.com/feross/buffer|Buffer} to convert
           * to a {@link https://github.com/indutny/bn.js/|BN}
           */
        this.fromBufferToBN = (buff) => new bn_js_1.default(buff.toString('hex'), 16, 'be');
        /**
           * Takes a {@link https://github.com/indutny/bn.js/|BN} and converts it
           * to a {@link https://github.com/feross/buffer|Buffer}.
           *
           * @param bn The {@link https://github.com/indutny/bn.js/|BN} to convert
           * to a {@link https://github.com/feross/buffer|Buffer}
           * @param length The zero-padded length of the {@link https://github.com/feross/buffer|Buffer}
           */
        this.fromBNToBuffer = (bn, length) => {
            const newarr = bn.toArray('be');
            if (length) { // bn toArray with the length parameter doesn't work correctly, need this.
                const x = length - newarr.length;
                for (let i = 0; i < x; i++) {
                    newarr.unshift(0);
                }
            }
            return buffer_1.Buffer.from(newarr);
        };
        /**
           * Takes a {@link https://github.com/feross/buffer|Buffer} and adds a checksum, returning
           * a {@link https://github.com/feross/buffer|Buffer} with the 4-byte checksum appended.
           *
           * @param buff The {@link https://github.com/feross/buffer|Buffer} to append a checksum
           */
        this.addChecksum = (buff) => {
            const hashslice = buffer_1.Buffer.from(create_hash_1.default('sha256').update(buff).digest().slice(28));
            return buffer_1.Buffer.concat([buff, hashslice]);
        };
        /**
           * Takes a {@link https://github.com/feross/buffer|Buffer} with an appended 4-byte checksum
           * and returns true if the checksum is valid, otherwise false.
           *
           * @param b The {@link https://github.com/feross/buffer|Buffer} to validate the checksum
           */
        this.validateChecksum = (buff) => {
            const checkslice = buff.slice(buff.length - 4);
            const hashslice = buffer_1.Buffer.from(create_hash_1.default('sha256')
                .update(buff.slice(0, buff.length - 4)).digest().slice(28));
            return checkslice.toString('hex') === hashslice.toString('hex');
        };
        /**
           * Takes a {@link https://github.com/feross/buffer|Buffer} and returns a base-58 string with
           * checksum as per the cb58 standard.
           *
           * @param bytes A {@link https://github.com/feross/buffer|Buffer} to serialize
           *
           * @returns A serialized base-58 strig of the Buffer.
           */
        this.cb58Encode = (bytes) => {
            const x = this.addChecksum(bytes);
            return this.bufferToB58(x);
        };
        /**
           * Takes a cb58 serialized {@link https://github.com/feross/buffer|Buffer} or base-58 string
           * and returns a {@link https://github.com/feross/buffer|Buffer} of the original data. Throws on error.
           *
           * @param bytes A cb58 serialized {@link https://github.com/feross/buffer|Buffer} or base-58 string
           */
        this.cb58Decode = (bytes) => {
            if (typeof bytes === 'string') {
                bytes = this.b58ToBuffer(bytes);
            }
            if (this.validateChecksum(bytes)) {
                return this.copyFrom(bytes, 0, bytes.length - 4);
            }
            throw new Error('Error - BinTools.cb58Decode: invalid checksum');
        };
        this.addressToString = (hrp, chainid, bytes) => `${chainid}-${bech32.encode(hrp, bech32.toWords(bytes))}`;
        this.stringToAddress = (address) => {
            const parts = address.trim().split('-');
            if (parts[1].startsWith("0x") || parts[1].match(/^[0-9A-F]+$/i)) {
                return buffer_1.Buffer.from(parts[1].replace("0x", ""), "hex");
            }
            return buffer_1.Buffer.from(bech32.fromWords(bech32.decode(parts[1]).words));
        };
        /**
         * Takes an address and returns its {@link https://github.com/feross/buffer|Buffer}
         * representation if valid. A more strict version of stringToAddress.
         *
         * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid,
         * undefined if not valid.
         */
        this.parseAddress = (addr, blockchainID, alias = undefined, addrlen = 20) => {
            const abc = addr.split('-');
            if (abc.length === 2 && ((alias && abc[0] === alias) || (blockchainID && abc[0] === blockchainID))) {
                const addrbuff = this.stringToAddress(addr);
                if ((addrlen && addrbuff.length === addrlen) || !(addrlen)) {
                    return addrbuff;
                }
            }
            return undefined;
        };
        this.b58 = new Base58();
    }
    /**
       * Retrieves the BinTools singleton.
       */
    static getInstance() {
        if (!BinTools.instance) {
            BinTools.instance = new BinTools();
        }
        return BinTools.instance;
    }
}
exports.default = BinTools;
//# sourceMappingURL=data:application/json;base64,