"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Defaults = exports.getPreferredHRP = exports.DefaultNetworkID = exports.FallbackHRP = exports.HRPToNetworkID = exports.NetworkIDToHRP = exports.NBytes = exports.KeyChain = exports.KeyPair = exports.MinterSet = exports.JRPCAPI = exports.RESTAPI = exports.APIBase = exports.RequestResponseData = void 0;
/**
 * @packageDocumentation
 * @module Utils-Types
 */
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("./bintools"));
const db_1 = __importDefault(require("./db"));
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Response data for HTTP requests.
 */
class RequestResponseData {
}
exports.RequestResponseData = RequestResponseData;
/**
 * Abstract class defining a generic endpoint that all endpoints must implement (extend).
 */
class APIBase {
    /**
       *
       * @param core Reference to the Avalanche instance using this baseurl
       * @param baseurl Path to the baseurl - ex: "/ext/bc/avm"
       */
    constructor(core, baseurl) {
        /**
           * Sets the path of the APIs baseurl.
           *
           * @param baseurl Path of the APIs baseurl - ex: "/ext/bc/avm"
           */
        this.setBaseURL = (baseurl) => {
            if (this.db && this.baseurl !== baseurl) {
                const backup = this.db.getAll();
                this.db.clearAll();
                this.baseurl = baseurl;
                this.db = db_1.default.getNamespace(baseurl);
                this.db.setAll(backup, true);
            }
            else {
                this.baseurl = baseurl;
                this.db = db_1.default.getNamespace(baseurl);
            }
        };
        /**
           * Returns the baseurl's path.
           */
        this.getBaseURL = () => this.baseurl;
        /**
           * Returns the baseurl's database.
           */
        this.getDB = () => this.db;
        this.core = core;
        this.setBaseURL(baseurl);
    }
}
exports.APIBase = APIBase;
class RESTAPI extends APIBase {
    /**
       *
       * @param core Reference to the Avalanche instance using this endpoint
       * @param baseurl Path of the APIs baseurl - ex: "/ext/bc/avm"
       * @param contentType Optional Determines the type of the entity attached to the
       * incoming request
       * @param acceptType Optional Determines the type of representation which is
       * desired on the client side
       */
    constructor(core, baseurl, contentType = 'application/json;charset=UTF-8', acceptType = undefined) {
        super(core, baseurl);
        this.get = (baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {
            const ep = baseurl || this.baseurl;
            const headers = {};
            if (contentType !== undefined) {
                headers['Content-Type'] = contentType;
            }
            else {
                headers['Content-Type'] = this.contentType;
            }
            const acceptTypeStr = this.acceptType;
            if (acceptType !== undefined) {
                headers.Accept = acceptType;
            }
            else if (acceptTypeStr !== undefined) {
                headers.Accept = acceptTypeStr;
            }
            const axConf = {
                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,
                responseType: 'json',
            };
            return this.core.get(ep, {}, headers, axConf).then((resp) => resp);
        });
        this.post = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {
            const ep = baseurl || this.baseurl;
            const rpc = {};
            rpc.method = method;
            // Set parameters if exists
            if (params) {
                rpc.params = params;
            }
            const headers = {};
            if (contentType !== undefined) {
                headers['Content-Type'] = contentType;
            }
            else {
                headers['Content-Type'] = this.contentType;
            }
            const acceptTypeStr = this.acceptType;
            if (acceptType !== undefined) {
                headers.Accept = acceptType;
            }
            else if (acceptTypeStr !== undefined) {
                headers.Accept = acceptTypeStr;
            }
            const axConf = {
                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,
                responseType: 'json',
            };
            return this.core.post(ep, {}, JSON.stringify(rpc), headers, axConf)
                .then((resp) => resp);
        });
        this.put = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {
            const ep = baseurl || this.baseurl;
            const rpc = {};
            rpc.method = method;
            // Set parameters if exists
            if (params) {
                rpc.params = params;
            }
            const headers = {};
            if (contentType !== undefined) {
                headers['Content-Type'] = contentType;
            }
            else {
                headers['Content-Type'] = this.contentType;
            }
            const acceptTypeStr = this.acceptType;
            if (acceptType !== undefined) {
                headers.Accept = acceptType;
            }
            else if (acceptTypeStr !== undefined) {
                headers.Accept = acceptTypeStr;
            }
            const axConf = {
                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,
                responseType: 'json',
            };
            return this.core.put(ep, {}, JSON.stringify(rpc), headers, axConf)
                .then((resp) => resp);
        });
        this.delete = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {
            const ep = baseurl || this.baseurl;
            const rpc = {};
            rpc.method = method;
            // Set parameters if exists
            if (params) {
                rpc.params = params;
            }
            const headers = {};
            if (contentType !== undefined) {
                headers['Content-Type'] = contentType;
            }
            else {
                headers['Content-Type'] = this.contentType;
            }
            const acceptTypeStr = this.acceptType;
            if (acceptType !== undefined) {
                headers.Accept = acceptType;
            }
            else if (acceptTypeStr !== undefined) {
                headers.Accept = acceptTypeStr;
            }
            const axConf = {
                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,
                responseType: 'json',
            };
            return this.core.delete(ep, {}, headers, axConf).then((resp) => resp);
        });
        this.patch = (method, params, baseurl, contentType, acceptType) => __awaiter(this, void 0, void 0, function* () {
            const ep = baseurl || this.baseurl;
            const rpc = {};
            rpc.method = method;
            // Set parameters if exists
            if (params) {
                rpc.params = params;
            }
            const headers = {};
            if (contentType !== undefined) {
                headers['Content-Type'] = contentType;
            }
            else {
                headers['Content-Type'] = this.contentType;
            }
            const acceptTypeStr = this.acceptType;
            if (acceptType !== undefined) {
                headers.Accept = acceptType;
            }
            else if (acceptTypeStr !== undefined) {
                headers.Accept = acceptTypeStr;
            }
            const axConf = {
                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,
                responseType: 'json',
            };
            return this.core.patch(ep, {}, JSON.stringify(rpc), headers, axConf)
                .then((resp) => resp);
        });
        /**
           * Returns the type of the entity attached to the incoming request
           */
        this.getContentType = () => this.contentType;
        /**
           * Returns what type of representation is desired at the client side
           */
        this.getAcceptType = () => this.acceptType;
        this.contentType = contentType;
        this.acceptType = acceptType;
    }
}
exports.RESTAPI = RESTAPI;
class JRPCAPI extends APIBase {
    /**
       *
       * @param core Reference to the Avalanche instance using this endpoint
       * @param baseurl Path of the APIs baseurl - ex: "/ext/bc/avm"
       * @param jrpcVersion The jrpc version to use, default "2.0".
       */
    constructor(core, baseurl, jrpcVersion = '2.0') {
        super(core, baseurl);
        this.jrpcVersion = '2.0';
        this.rpcid = 1;
        this.callMethod = (method, params, baseurl) => __awaiter(this, void 0, void 0, function* () {
            const ep = baseurl || this.baseurl;
            const rpc = {};
            rpc.id = this.rpcid;
            rpc.method = method;
            // Set parameters if exists
            if (params) {
                rpc.params = params;
            }
            else if (this.jrpcVersion === '1.0') {
                rpc.params = [];
            }
            if (this.jrpcVersion !== '1.0') {
                rpc.jsonrpc = this.jrpcVersion;
            }
            const headers = { 'Content-Type': 'application/json;charset=UTF-8' };
            const axConf = {
                baseURL: `${this.core.getProtocol()}://${this.core.getIP()}:${this.core.getPort()}`,
                responseType: 'json',
            };
            return this.core.post(ep, {}, JSON.stringify(rpc), headers, axConf)
                .then((resp) => {
                if (resp.status >= 200 && resp.status < 300) {
                    this.rpcid += 1;
                    if (typeof resp.data === 'string') {
                        resp.data = JSON.parse(resp.data);
                    }
                    if (typeof resp.data === 'object' && (resp.data === null || 'error' in resp.data)) {
                        throw new Error(`Error returned: ${JSON.stringify(resp.data)}`);
                    }
                }
                return resp;
            });
        });
        /**
           * Returns the rpcid, a strictly-increasing number, starting from 1, indicating the next
           * request ID that will be sent.
           */
        this.getRPCID = () => this.rpcid;
        this.jrpcVersion = jrpcVersion;
        this.rpcid = 1;
    }
}
exports.JRPCAPI = JRPCAPI;
/**
 * Class for representing a threshold and set of minting addresses in Avalanche.
 *
 * @typeparam MinterSet including a threshold and array of addresses
 */
class MinterSet {
    /**
     *
     * @param threshold The number of signatures required to mint more of an asset by signing a minting transaction
     * @param minters Array of addresss which are authorized to sign a minting transaction
     */
    constructor(threshold, minters) {
        this.minters = [];
        /**
         * Returns the threshold.
         */
        this.getThreshold = () => {
            return this.threshold;
        };
        /**
         * Returns the minters.
         */
        this.getMinters = () => {
            return this.minters;
        };
        this._cleanAddresses = (addresses) => {
            let addrs = [];
            for (let i = 0; i < addresses.length; i++) {
                if (!buffer_1.Buffer.isBuffer(addresses[i])) {
                    addrs.push(bintools.stringToBuffer(addresses[i]));
                }
                else {
                    addrs.push(addresses[i]);
                }
            }
            return addrs;
        };
        this.threshold = threshold;
        this.minters = this._cleanAddresses(minters);
    }
}
exports.MinterSet = MinterSet;
/**
 * Class for representing a private and public keypair in Avalanche.
 * All APIs that need key pairs should extend on this class.
 */
class KeyPair {
    constructor(hrp, chainid) {
        this.chainid = '';
        this.hrp = '';
        /**
           * Returns a reference to the private key.
           *
           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the private key
           */
        this.getPrivateKey = () => this.privk;
        /**
           * Returns a reference to the public key.
           *
           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key
           */
        this.getPublicKey = () => this.pubk;
        /**
           * Returns the chainID associated with this key.
           *
           * @returns The [[KeyPair]]'s chainID
           */
        this.getChainID = () => this.chainid;
        /**
           * Sets the the chainID associated with this key.
           *
           * @param chainid String for the chainID
           */
        this.setChainID = (chainid) => {
            this.chainid = chainid;
        };
        /**
         * Returns the Human-Readable-Part of the network associated with this key.
         *
         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme
         */
        this.getHRP = () => this.hrp;
        /**
         * Sets the the Human-Readable-Part of the network associated with this key.
         *
         * @param hrp String for the Human-Readable-Part of Bech32 addresses
         */
        this.setHRP = (hrp) => {
            this.hrp = hrp;
        };
        this.chainid = chainid;
        this.hrp = hrp;
    }
}
exports.KeyPair = KeyPair;
/**
 * Class for representing a key chain in Avalanche.
 * All endpoints that need key chains should extend on this class.
 *
 * @typeparam KPClass extending [[KeyPair]] which is used as the key in [[KeyChain]]
 */
class KeyChain {
    /**
       * Returns instance of [[KeyChain]].
       *
       * @param hrp String for the Human-Readable-Part of Bech32 addresses
       * @param chainid The hostname to resolve to reach the Avalanche Client APIs
       *
       */
    constructor(hrp, chainid) {
        this.keys = {};
        this.chainid = '';
        this.hrp = '';
        /**
           * Gets an array of addresses stored in the [[KeyChain]].
           *
           * @returns An array of {@link https://github.com/feross/buffer|Buffer}  representations
           * of the addresses
           */
        this.getAddresses = () => Object.values(this.keys).map((kp) => kp.getAddress());
        /**
           * Gets an array of addresses stored in the [[KeyChain]].
           *
           * @returns An array of string representations of the addresses
           */
        this.getAddressStrings = () => Object.values(this.keys)
            .map((kp) => kp.getAddressString());
        /**
           * Adds the key pair to the list of the keys managed in the [[KeyChain]].
           *
           * @param newKey A key pair of the appropriate class to be added to the [[KeyChain]]
           */
        this.addKey = (newKey) => {
            newKey.setChainID(this.chainid);
            this.keys[newKey.getAddress().toString('hex')] = newKey;
        };
        /**
           * Removes the key pair from the list of they keys managed in the [[KeyChain]].
           *
           * @param key A {@link https://github.com/feross/buffer|Buffer} for the address or
           * KPClass to remove
           *
           * @returns The boolean true if a key was removed.
           */
        this.removeKey = (key) => {
            let kaddr;
            if (key instanceof buffer_1.Buffer) {
                kaddr = key.toString('hex');
            }
            else {
                kaddr = key.getAddress().toString('hex');
            }
            if (kaddr in this.keys) {
                delete this.keys[kaddr];
                return true;
            }
            return false;
        };
        /**
           * Checks if there is a key associated with the provided address.
           *
           * @param address The address to check for existence in the keys database
           *
           * @returns True on success, false if not found
           */
        this.hasKey = (address) => (address.toString('hex') in this.keys);
        /**
           * Returns the [[KeyPair]] listed under the provided address
           *
           * @param address The {@link https://github.com/feross/buffer|Buffer} of the address to
           * retrieve from the keys database
           *
           * @returns A reference to the [[KeyPair]] in the keys database
           */
        this.getKey = (address) => this.keys[address.toString('hex')];
        /**
           * Returns the chainID associated with this [[KeyChain]].
           *
           * @returns The [[KeyChain]]'s chainID
           */
        this.getChainID = () => this.chainid;
        /**
           * Sets the the chainID associated with this [[KeyChain]] and all associated keypairs.
           *
           * @param chainid String for the chainID
           */
        this.setChainID = (chainid) => {
            this.chainid = chainid;
            for (const address in this.keys) {
                this.keys[address].setChainID(chainid);
            }
        };
        /**
         * Returns the Human-Readable-Part of the network associated with this key.
         *
         * @returns The [[KeyPair]]'s Human-Readable-Part of the network's Bech32 addressing scheme
         */
        this.getHRP = () => this.hrp;
        /**
         * Sets the the Human-Readable-Part of the network associated with this key.
         *
         * @param hrp String for the Human-Readable-Part of Bech32 addresses
         */
        this.setHRP = (hrp) => {
            this.hrp = hrp;
        };
        this.chainid = chainid;
        this.hrp = hrp;
    }
}
exports.KeyChain = KeyChain;
/**
 * Abstract class that implements basic functionality for managing a
 * {@link https://github.com/feross/buffer|Buffer} of an exact length.
 *
 * Create a class that extends this one and override bsize to make it validate for exactly
 * the correct length.
 */
class NBytes {
    /**
       * Returns instance of [[NBytes]].
       */
    constructor() {
        /**
           * Returns the length of the {@link https://github.com/feross/buffer|Buffer}.
           *
           * @returns The exact length requirement of this class
           */
        this.getSize = () => this.bsize;
    }
    /**
       * Takes a base-58 encoded string, verifies its length, and stores it.
       *
       * @returns The size of the {@link https://github.com/feross/buffer|Buffer}
       */
    fromString(b58str) {
        try {
            this.fromBuffer(bintools.b58ToBuffer(b58str));
        }
        catch (e) {
            /* istanbul ignore next */
            const emsg = `Error - NBytes.fromString: ${e}`;
            /* istanbul ignore next */
            throw new Error(emsg);
        }
        return this.bsize;
    }
    /**
       * Takes a [[Buffer]], verifies its length, and stores it.
       *
       * @returns The size of the {@link https://github.com/feross/buffer|Buffer}
       */
    fromBuffer(buff, offset = 0) {
        try {
            if (buff.length - offset < this.bsize) {
                /* istanbul ignore next */
                throw new Error(`Buffer length must be at least ${this.bsize} bytes.`);
            }
            this.bytes = bintools.copyFrom(buff, offset, offset + this.bsize);
        }
        catch (e) {
            /* istanbul ignore next */
            const emsg = `Error - NBytes.fromBuffer: ${e}`;
            /* istanbul ignore next */
            throw new Error(emsg);
        }
        return offset + this.bsize;
    }
    /**
       * @returns A reference to the stored {@link https://github.com/feross/buffer|Buffer}
       */
    toBuffer() {
        return this.bytes;
    }
    /**
       * @returns A base-58 string of the stored {@link https://github.com/feross/buffer|Buffer}
       */
    toString() {
        return bintools.bufferToB58(this.toBuffer());
    }
}
exports.NBytes = NBytes;
exports.NetworkIDToHRP = {
    1: "avax",
    2: "cascade",
    3: "denali",
    4: "everest",
    12345: "local"
};
exports.HRPToNetworkID = {
    "avax": 1,
    "cascade": 2,
    "denali": 3,
    "everest": 4,
    "local": 12345
};
exports.FallbackHRP = "custom";
exports.DefaultNetworkID = 3;
function getPreferredHRP(networkID = undefined) {
    if (networkID in exports.NetworkIDToHRP) {
        return exports.NetworkIDToHRP[networkID];
    }
    else if (typeof networkID === "undefined") {
        return exports.DefaultNetworkID;
    }
    return exports.FallbackHRP;
}
exports.getPreferredHRP = getPreferredHRP;
// TODO: UPDATE FOR MAINNET
const n1Avm = {
    blockchainID: '4ktRjsAKxgMr2aEzv9SWmrU7Xk5FniHUrVCX4P1TZSfTLZWFM',
    alias: 'X',
    vm: 'avm',
    fee: 0
};
const n1Platform = {
    blockchainID: '11111111111111111111111111111111LpoYY',
    alias: 'P',
    vm: 'platform',
    fee: 0
};
const n1Contracts = {
    blockchainID: '2mUYSXfLrDtigwbzj1LxKVsHwELghc5sisoXrzJwLqAAQHF4i',
    alias: 'C',
    vm: 'contracts',
    fee: 0
};
// END TODO
const n2Avm = {
    blockchainID: '4ktRjsAKxgMr2aEzv9SWmrU7Xk5FniHUrVCX4P1TZSfTLZWFM',
    alias: 'X',
    vm: 'avm',
    fee: 0
};
const n2Platform = {
    blockchainID: '11111111111111111111111111111111LpoYY',
    alias: 'P',
    vm: 'platform',
    fee: 0
};
const n2Contracts = {
    blockchainID: '2mUYSXfLrDtigwbzj1LxKVsHwELghc5sisoXrzJwLqAAQHF4i',
    alias: 'C',
    vm: 'contracts',
    fee: 0
};
const n3Avm = {
    blockchainID: 'rrEWX7gc7D9mwcdrdBxBTdqh1a7WDVsMuadhTZgyXfFcRz45L',
    alias: 'X',
    vm: 'avm',
    fee: 0
};
const n3Platform = {
    blockchainID: '11111111111111111111111111111111LpoYY',
    alias: 'P',
    vm: 'platform',
    fee: 0
};
const n3Contracts = {
    blockchainID: 'zJytnh96Pc8rM337bBrtMvJDbEdDNjcXG3WkTNCiLp18ergm9',
    alias: 'C',
    vm: 'contracts',
    fee: 0
};
// TODO: UPDATE FOR EVEREST
const n4Avm = {
    blockchainID: 'rrEWX7gc7D9mwcdrdBxBTdqh1a7WDVsMuadhTZgyXfFcRz45L',
    alias: 'X',
    vm: 'avm',
    fee: 0
};
const n4Platform = {
    blockchainID: '11111111111111111111111111111111LpoYY',
    alias: 'P',
    vm: 'platform',
    fee: 0
};
const n4Contracts = {
    blockchainID: 'zJytnh96Pc8rM337bBrtMvJDbEdDNjcXG3WkTNCiLp18ergm9',
    alias: 'C',
    vm: 'contracts',
    fee: 0
};
// END TODO
const n12345Avm = Object.assign({}, n2Avm);
n12345Avm.blockchainID = '2oALd6xoUMp3oSHMiJYVqMcbaWxGQWYosrfiT7AaFKKNG5dmKD';
const n12345Platform = Object.assign({}, n2Platform);
n12345Platform.blockchainID = '11111111111111111111111111111111LpoYY';
const n12345Contracts = Object.assign({}, n2Contracts);
n12345Contracts.blockchainID = 'tZGm6RCkeGpVETUTp11DW3UYFZmm69zfqxchpHrSF7wgy8rmw';
class Defaults {
}
exports.Defaults = Defaults;
Defaults.network = {
    1: {
        hrp: exports.NetworkIDToHRP[1],
        avm: n1Avm,
        X: n1Avm,
        '4ktRjsAKxgMr2aEzv9SWmrU7Xk5FniHUrVCX4P1TZSfTLZWFM': n1Avm,
        platform: n1Platform,
        P: n1Platform,
        '11111111111111111111111111111111LpoYY': n1Platform,
        contracts: n1Contracts,
        C: n1Contracts,
        '2mUYSXfLrDtigwbzj1LxKVsHwELghc5sisoXrzJwLqAAQHF4i': n1Contracts,
    },
    2: {
        hrp: exports.NetworkIDToHRP[2],
        avm: n2Avm,
        X: n2Avm,
        '4ktRjsAKxgMr2aEzv9SWmrU7Xk5FniHUrVCX4P1TZSfTLZWFM': n2Avm,
        platform: n2Platform,
        P: n2Platform,
        '11111111111111111111111111111111LpoYY': n2Platform,
        contracts: n2Contracts,
        C: n2Contracts,
        '2mUYSXfLrDtigwbzj1LxKVsHwELghc5sisoXrzJwLqAAQHF4i': n2Contracts,
    },
    3: {
        hrp: exports.NetworkIDToHRP[3],
        avm: n3Avm,
        X: n3Avm,
        rrEWX7gc7D9mwcdrdBxBTdqh1a7WDVsMuadhTZgyXfFcRz45L: n3Avm,
        platform: n3Platform,
        P: n3Platform,
        '11111111111111111111111111111111LpoYY': n3Platform,
        contracts: n3Contracts,
        C: n3Contracts,
        zJytnh96Pc8rM337bBrtMvJDbEdDNjcXG3WkTNCiLp18ergm9: n3Contracts,
    },
    4: {
        hrp: exports.NetworkIDToHRP[4],
        avm: n4Avm,
        X: n4Avm,
        rrEWX7gc7D9mwcdrdBxBTdqh1a7WDVsMuadhTZgyXfFcRz45L: n4Avm,
        platform: n4Platform,
        P: n4Platform,
        '11111111111111111111111111111111LpoYY': n4Platform,
        contracts: n4Contracts,
        C: n4Contracts,
        zJytnh96Pc8rM337bBrtMvJDbEdDNjcXG3WkTNCiLp18ergm9: n4Contracts,
    },
    12345: {
        hrp: exports.NetworkIDToHRP[12345],
        avm: n12345Avm,
        X: n12345Avm,
        '2oALd6xoUMp3oSHMiJYVqMcbaWxGQWYosrfiT7AaFKKNG5dmKD': n12345Avm,
        platform: n12345Platform,
        P: n12345Platform,
        '11111111111111111111111111111111LpoYY': n12345Platform,
        contracts: n12345Contracts,
        C: n12345Contracts,
        tZGm6RCkeGpVETUTp11DW3UYFZmm69zfqxchpHrSF7wgy8rmw: n12345Contracts,
    },
};
//# sourceMappingURL=data:application/json;base64,