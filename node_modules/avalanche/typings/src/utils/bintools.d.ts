/**
 * @packageDocumentation
 * @module Utils-BinTools
 */
import BN from 'bn.js';
import { Buffer } from 'buffer/';
/**
 * A Base58 class that uses the cross-platform Buffer module. Built so that Typescript
 * will accept the code.
 *
 * ```js
 * let b58:Base58 = new Base58();
 * let str:string = b58.encode(somebuffer);
 * let buff:Buffer = b58.decode(somestring);
 * ```
 */
export declare class Base58 {
    protected b58alphabet: string;
    protected alphabetIdx0: string;
    protected b58: number[];
    protected big58Radix: BN;
    protected bigZero: BN;
    /**
       * Encodes a {@link https://github.com/feross/buffer|Buffer} as a base-58 string
       *
       * @param buff A {@link https://github.com/feross/buffer|Buffer} to encode
       *
       * @returns A base-58 string.
       */
    encode: (buff: Buffer) => string;
    /**
       * Dencodes a base-58 into a {@link https://github.com/feross/buffer|Buffer}
       *
       * @param b A base-58 string to decode
       *
       * @returns A {@link https://github.com/feross/buffer|Buffer} from the decoded string.
       */
    decode: (b: string) => Buffer;
}
/**
 * A class containing tools useful in interacting with binary data cross-platform using
 * nodejs & javascript.
 *
 * This class should never be instantiated directly. Instead,
 * invoke the "BinTools.getInstance()" static * function to grab the singleton
 * instance of the tools.
 *
 * Everything in this library uses
 * the {@link https://github.com/feross/buffer|feross's Buffer class}.
 *
 * ```js
 * const bintools = BinTools.getInstance();
 * let b58str = bintools.bufferToB58(Buffer.from("Wubalubadubdub!"));
 * ```
 */
export default class BinTools {
    private static instance;
    private constructor();
    private b58;
    /**
       * Retrieves the BinTools singleton.
       */
    static getInstance(): BinTools;
    /**
       * Produces a string from a {@link https://github.com/feross/buffer|Buffer}
       * representing a string.
       *
       * @param buff The {@link https://github.com/feross/buffer|Buffer} to convert to a string
       */
    bufferToString: (buff: Buffer) => string;
    /**
       * Produces a {@link https://github.com/feross/buffer|Buffer} from a string.
       *
       * @param str The string to convert to a {@link https://github.com/feross/buffer|Buffer}
       */
    stringToBuffer: (str: string) => Buffer;
    /**
       * Makes a copy (no reference) of a {@link https://github.com/feross/buffer|Buffer}
       * over provided indecies.
       *
       * @param buff The {@link https://github.com/feross/buffer|Buffer} to copy
       * @param start The index to start the copy
       * @param end The index to end the copy
       */
    copyFrom: (buff: Buffer, start?: number, end?: number) => Buffer;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} and returns a base-58 string of
       * the {@link https://github.com/feross/buffer|Buffer}.
       *
       * @param buff The {@link https://github.com/feross/buffer|Buffer} to convert to base-58
       */
    bufferToB58: (buff: Buffer) => string;
    /**
       * Takes a base-58 string and returns a {@link https://github.com/feross/buffer|Buffer}.
       *
       * @param b58str The base-58 string to convert
       * to a {@link https://github.com/feross/buffer|Buffer}
       */
    b58ToBuffer: (b58str: string) => Buffer;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} and returns an ArrayBuffer.
       *
       * @param buff The {@link https://github.com/feross/buffer|Buffer} to
       * convert to an ArrayBuffer
       */
    fromBufferToArrayBuffer: (buff: Buffer) => ArrayBuffer;
    /**
       * Takes an ArrayBuffer and converts it to a {@link https://github.com/feross/buffer|Buffer}.
       *
       * @param ab The ArrayBuffer to convert to a {@link https://github.com/feross/buffer|Buffer}
       */
    fromArrayBufferToBuffer: (ab: ArrayBuffer) => Buffer;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} and converts it
       * to a {@link https://github.com/indutny/bn.js/|BN}.
       *
       * @param buff The {@link https://github.com/feross/buffer|Buffer} to convert
       * to a {@link https://github.com/indutny/bn.js/|BN}
       */
    fromBufferToBN: (buff: Buffer) => BN;
    /**
       * Takes a {@link https://github.com/indutny/bn.js/|BN} and converts it
       * to a {@link https://github.com/feross/buffer|Buffer}.
       *
       * @param bn The {@link https://github.com/indutny/bn.js/|BN} to convert
       * to a {@link https://github.com/feross/buffer|Buffer}
       * @param length The zero-padded length of the {@link https://github.com/feross/buffer|Buffer}
       */
    fromBNToBuffer: (bn: BN, length?: number) => Buffer;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} and adds a checksum, returning
       * a {@link https://github.com/feross/buffer|Buffer} with the 4-byte checksum appended.
       *
       * @param buff The {@link https://github.com/feross/buffer|Buffer} to append a checksum
       */
    addChecksum: (buff: Buffer) => Buffer;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} with an appended 4-byte checksum
       * and returns true if the checksum is valid, otherwise false.
       *
       * @param b The {@link https://github.com/feross/buffer|Buffer} to validate the checksum
       */
    validateChecksum: (buff: Buffer) => boolean;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} and returns a base-58 string with
       * checksum as per the cb58 standard.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} to serialize
       *
       * @returns A serialized base-58 strig of the Buffer.
       */
    cb58Encode: (bytes: Buffer) => string;
    /**
       * Takes a cb58 serialized {@link https://github.com/feross/buffer|Buffer} or base-58 string
       * and returns a {@link https://github.com/feross/buffer|Buffer} of the original data. Throws on error.
       *
       * @param bytes A cb58 serialized {@link https://github.com/feross/buffer|Buffer} or base-58 string
       */
    cb58Decode: (bytes: Buffer | string) => Buffer;
    addressToString: (hrp: string, chainid: string, bytes: Buffer) => string;
    stringToAddress: (address: string) => Buffer;
    /**
     * Takes an address and returns its {@link https://github.com/feross/buffer|Buffer}
     * representation if valid. A more strict version of stringToAddress.
     *
     * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid,
     * undefined if not valid.
     */
    parseAddress: (addr: string, blockchainID: string, alias?: string, addrlen?: number) => Buffer;
}
//# sourceMappingURL=bintools.d.ts.map