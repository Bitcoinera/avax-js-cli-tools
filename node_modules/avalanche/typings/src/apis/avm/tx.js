"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectTxClass = exports.Tx = exports.UnsignedTx = exports.ExportTx = exports.ImportTx = exports.OperationTx = exports.CreateAssetTx = exports.BaseTx = void 0;
/**
 * @packageDocumentation
 * @module AVMAPI-Transactions
 */
const buffer_1 = require("buffer/");
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("../../utils/bintools"));
const types_1 = require("./types");
const outputs_1 = require("./outputs");
const inputs_1 = require("./inputs");
const ops_1 = require("./ops");
const credentials_1 = require("./credentials");
const bn_js_1 = __importDefault(require("bn.js"));
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Class representing a base for all transactions.
 */
class BaseTx {
    /**
       * Class representing a BaseTx which is the foundation for all transactions.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field
       */
    constructor(networkid = 3, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined) {
        this.networkid = buffer_1.Buffer.alloc(4);
        this.blockchainid = buffer_1.Buffer.alloc(32);
        this.numouts = buffer_1.Buffer.alloc(4);
        this.numins = buffer_1.Buffer.alloc(4);
        this.memo = buffer_1.Buffer.alloc(4);
        /**
           * Returns the NetworkID as a number
           */
        this.getNetworkID = () => this.networkid.readUInt32BE(0);
        /**
           * Returns the Buffer representation of the BlockchainID
           */
        this.getBlockchainID = () => this.blockchainid;
        /**
           * Returns the array of [[TransferableInput]]s
           */
        this.getIns = () => this.ins;
        /**
           * Returns the array of [[TransferableOutput]]s
           */
        this.getOuts = () => this.outs;
        /**
         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the memo
         */
        this.getMemo = () => this.memo;
        this.networkid.writeUInt32BE(networkid, 0);
        this.blockchainid = blockchainid;
        if (typeof memo === "undefined") {
            this.memo = buffer_1.Buffer.alloc(4);
            this.memo.writeUInt32BE(0, 0);
        }
        else {
            let memolen = buffer_1.Buffer.alloc(4);
            memolen.writeUInt32BE(memo.length, 0);
            this.memo = memo;
        }
        if (typeof ins !== 'undefined' && typeof outs !== 'undefined') {
            this.numouts.writeUInt32BE(outs.length, 0);
            this.outs = outs.sort(outputs_1.TransferableOutput.comparator());
            this.numins.writeUInt32BE(ins.length, 0);
            this.ins = ins.sort(inputs_1.TransferableInput.comparator());
        }
    }
    /**
       * Returns the id of the [[BaseTx]]
       */
    getTxType() {
        return types_1.AVMConstants.BASETX;
    }
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]
       *
       * @returns The length of the raw [[BaseTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes, offset = 0) {
        this.networkid = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        this.blockchainid = bintools.copyFrom(bytes, offset, offset + 32);
        offset += 32;
        this.numouts = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const outcount = this.numouts.readUInt32BE(0);
        this.outs = [];
        for (let i = 0; i < outcount; i++) {
            const xferout = new outputs_1.TransferableOutput();
            offset = xferout.fromBuffer(bytes, offset);
            this.outs.push(xferout);
        }
        this.numins = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const incount = this.numins.readUInt32BE(0);
        this.ins = [];
        for (let i = 0; i < incount; i++) {
            const xferin = new inputs_1.TransferableInput();
            offset = xferin.fromBuffer(bytes, offset);
            this.ins.push(xferin);
        }
        let memolen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.memo = bintools.copyFrom(bytes, offset, offset + memolen);
        offset += memolen;
        return offset;
    }
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[BaseTx]].
       */
    toBuffer() {
        this.outs.sort(outputs_1.TransferableOutput.comparator());
        this.ins.sort(inputs_1.TransferableInput.comparator());
        this.numouts.writeUInt32BE(this.outs.length, 0);
        this.numins.writeUInt32BE(this.ins.length, 0);
        let bsize = this.networkid.length + this.blockchainid.length + this.numouts.length;
        const barr = [this.networkid, this.blockchainid, this.numouts];
        for (let i = 0; i < this.outs.length; i++) {
            const b = this.outs[i].toBuffer();
            barr.push(b);
            bsize += b.length;
        }
        barr.push(this.numins);
        bsize += this.numins.length;
        for (let i = 0; i < this.ins.length; i++) {
            const b = this.ins[i].toBuffer();
            barr.push(b);
            bsize += b.length;
        }
        let memolen = buffer_1.Buffer.alloc(4);
        memolen.writeUInt32BE(this.memo.length, 0);
        barr.push(memolen);
        bsize += 4;
        barr.push(this.memo);
        bsize += this.memo.length;
        const buff = buffer_1.Buffer.concat(barr, bsize);
        return buff;
    }
    /**
       * Returns a base-58 representation of the [[BaseTx]].
       */
    toString() {
        return bintools.bufferToB58(this.toBuffer());
    }
    /**
       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s
       *
       * @param msg A Buffer for the [[UnsignedTx]]
       * @param kc An [[AVMKeyChain]] used in signing
       *
       * @returns An array of [[Credential]]s
       */
    sign(msg, kc) {
        const sigs = [];
        for (let i = 0; i < this.ins.length; i++) {
            const cred = credentials_1.SelectCredentialClass(this.ins[i].getInput().getCredentialID());
            const sigidxs = this.ins[i].getInput().getSigIdxs();
            for (let j = 0; j < sigidxs.length; j++) {
                const keypair = kc.getKey(sigidxs[j].getSource());
                const signval = keypair.sign(msg);
                const sig = new types_1.Signature();
                sig.fromBuffer(signval);
                cred.addSignature(sig);
            }
            sigs.push(cred);
        }
        return sigs;
    }
}
exports.BaseTx = BaseTx;
class CreateAssetTx extends BaseTx {
    /**
       * Class representing an unsigned Create Asset transaction.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field
       * @param name String for the descriptive name of the asset
       * @param symbol String for the ticker symbol of the asset
       * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX
       * @param initialstate Optional [[InitialStates]] that represent the intial state of a created asset
       */
    constructor(networkid = 3, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, name = undefined, symbol = undefined, denomination = undefined, initialstate = undefined) {
        super(networkid, blockchainid, outs, ins, memo);
        this.name = '';
        this.symbol = '';
        this.denomination = buffer_1.Buffer.alloc(1);
        this.initialstate = new types_1.InitialStates();
        /**
           * Returns the array of array of [[Output]]s for the initial state
           */
        this.getInitialStates = () => this.initialstate;
        /**
           * Returns the string representation of the name
           */
        this.getName = () => this.name;
        /**
           * Returns the string representation of the symbol
           */
        this.getSymbol = () => this.symbol;
        /**
           * Returns the numeric representation of the denomination
           */
        this.getDenomination = () => this.denomination.readUInt8(0);
        /**
         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the denomination
         */
        this.getDenominationBuffer = () => {
            return this.denomination;
        };
        if (typeof name === 'string' && typeof symbol === 'string' && typeof denomination === 'number'
            && denomination >= 0 && denomination <= 32 && typeof initialstate !== 'undefined') {
            this.initialstate = initialstate;
            this.name = name;
            this.symbol = symbol;
            this.denomination.writeUInt8(denomination, 0);
        }
    }
    /**
       * Returns the id of the [[CreateAssetTx]]
       */
    getTxType() {
        return types_1.AVMConstants.CREATEASSETTX;
    }
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateAssetTx]], parses it, populates the class, and returns the length of the [[CreateAssetTx]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateAssetTx]]
       *
       * @returns The length of the raw [[CreateAssetTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes, offset = 0) {
        offset = super.fromBuffer(bytes, offset);
        const namesize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);
        offset += 2;
        this.name = bintools.copyFrom(bytes, offset, offset + namesize).toString('utf8');
        offset += namesize;
        const symsize = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);
        offset += 2;
        this.symbol = bintools.copyFrom(bytes, offset, offset + symsize).toString('utf8');
        offset += symsize;
        this.denomination = bintools.copyFrom(bytes, offset, offset + 1);
        offset += 1;
        const inits = new types_1.InitialStates();
        offset = inits.fromBuffer(bytes, offset);
        this.initialstate = inits;
        return offset;
    }
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateAssetTx]].
       */
    toBuffer() {
        const superbuff = super.toBuffer();
        const initstatebuff = this.initialstate.toBuffer();
        const namebuff = buffer_1.Buffer.alloc(this.name.length);
        namebuff.write(this.name, 0, this.name.length, 'utf8');
        const namesize = buffer_1.Buffer.alloc(2);
        namesize.writeUInt16BE(this.name.length, 0);
        const symbuff = buffer_1.Buffer.alloc(this.symbol.length);
        symbuff.write(this.symbol, 0, this.symbol.length, 'utf8');
        const symsize = buffer_1.Buffer.alloc(2);
        symsize.writeUInt16BE(this.symbol.length, 0);
        const bsize = superbuff.length + namesize.length + namebuff.length + symsize.length + symbuff.length + this.denomination.length + initstatebuff.length;
        const barr = [superbuff, namesize, namebuff, symsize, symbuff, this.denomination, initstatebuff];
        return buffer_1.Buffer.concat(barr, bsize);
    }
}
exports.CreateAssetTx = CreateAssetTx;
/**
 * Class representing an unsigned Operation transaction.
 */
class OperationTx extends BaseTx {
    /**
       * Class representing an unsigned Operation transaction.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field
       * @param ops Array of [[Operation]]s used in the transaction
       */
    constructor(networkid = 3, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, ops = undefined) {
        super(networkid, blockchainid, outs, ins, memo);
        this.numOps = buffer_1.Buffer.alloc(4);
        this.ops = [];
        if (typeof ops !== 'undefined' && Array.isArray(ops)) {
            for (let i = 0; i < ops.length; i++) {
                if (!(ops[i] instanceof ops_1.TransferableOperation)) {
                    throw new Error("Error - OperationTx.constructor: invalid op in array parameter 'ops'");
                }
            }
            this.ops = ops;
        }
    }
    /**
       * Returns the id of the [[OperationTx]]
       */
    getTxType() {
        return types_1.AVMConstants.OPERATIONTX;
    }
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[OperationTx]], parses it, populates the class, and returns the length of the [[OperationTx]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[OperationTx]]
       *
       * @returns The length of the raw [[OperationTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes, offset = 0, codecid = types_1.AVMConstants.LATESTCODEC) {
        offset = super.fromBuffer(bytes, offset);
        this.numOps = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const numOps = this.numOps.readUInt32BE(0);
        for (let i = 0; i < numOps; i++) {
            const op = new ops_1.TransferableOperation();
            offset = op.fromBuffer(bytes, offset);
            this.ops.push(op);
        }
        return offset;
    }
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[OperationTx]].
       */
    toBuffer() {
        this.numOps.writeUInt32BE(this.ops.length, 0);
        let barr = [super.toBuffer(), this.numOps];
        this.ops = this.ops.sort(ops_1.TransferableOperation.comparator());
        for (let i = 0; i < this.ops.length; i++) {
            barr.push(this.ops[i].toBuffer());
        }
        return buffer_1.Buffer.concat(barr);
    }
    /**
       * Returns an array of [[TransferableOperation]]s in this transaction.
       */
    getOperations() {
        return this.ops;
    }
    /**
       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s
       *
       * @param msg A Buffer for the [[UnsignedTx]]
       * @param kc An [[AVMKeyChain]] used in signing
       *
       * @returns An array of [[Credential]]s
       */
    sign(msg, kc) {
        const sigs = super.sign(msg, kc);
        for (let i = 0; i < this.ops.length; i++) {
            const cred = credentials_1.SelectCredentialClass(this.ops[i].getOperation().getCredentialID());
            const sigidxs = this.ops[i].getOperation().getSigIdxs();
            for (let j = 0; j < sigidxs.length; j++) {
                const keypair = kc.getKey(sigidxs[j].getSource());
                const signval = keypair.sign(msg);
                const sig = new types_1.Signature();
                sig.fromBuffer(signval);
                cred.addSignature(sig);
            }
            sigs.push(cred);
        }
        return sigs;
    }
}
exports.OperationTx = OperationTx;
/**
 * Class representing an unsigned Import transaction.
 */
class ImportTx extends BaseTx {
    /**
       * Class representing an unsigned Import transaction.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field
       * @param importIns Array of [[TransferableInput]]s used in the transaction
       */
    constructor(networkid = 3, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, importIns = undefined) {
        super(networkid, blockchainid, outs, ins, memo);
        this.numIns = buffer_1.Buffer.alloc(4);
        this.importIns = [];
        if (typeof importIns !== 'undefined' && Array.isArray(importIns)) {
            for (let i = 0; i < importIns.length; i++) {
                if (!(importIns[i] instanceof inputs_1.TransferableInput)) {
                    throw new Error("Error - ImportTx.constructor: invalid TransferableInput in array parameter 'importIns'");
                }
            }
            this.importIns = importIns;
        }
    }
    /**
       * Returns the id of the [[ImportTx]]
       */
    getTxType() {
        return types_1.AVMConstants.IMPORTTX;
    }
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]
       *
       * @returns The length of the raw [[ImportTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes, offset = 0, codecid = types_1.AVMConstants.LATESTCODEC) {
        offset = super.fromBuffer(bytes, offset);
        this.numIns = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const numIns = this.numIns.readUInt32BE(0);
        for (let i = 0; i < numIns; i++) {
            const anIn = new inputs_1.TransferableInput();
            offset = anIn.fromBuffer(bytes, offset);
            this.importIns.push(anIn);
        }
        return offset;
    }
    /**
     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].
     */
    toBuffer() {
        this.numIns.writeUInt32BE(this.importIns.length, 0);
        let barr = [super.toBuffer(), this.numIns];
        this.importIns = this.importIns.sort(inputs_1.TransferableInput.comparator());
        for (let i = 0; i < this.importIns.length; i++) {
            barr.push(this.importIns[i].toBuffer());
        }
        return buffer_1.Buffer.concat(barr);
    }
    /**
       * Returns an array of [[TransferableInput]]s in this transaction.
       */
    getImportInputs() {
        return this.importIns;
    }
    /**
       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s
       *
       * @param msg A Buffer for the [[UnsignedTx]]
       * @param kc An [[AVMKeyChain]] used in signing
       *
       * @returns An array of [[Credential]]s
       */
    sign(msg, kc) {
        const sigs = super.sign(msg, kc);
        for (let i = 0; i < this.importIns.length; i++) {
            const cred = credentials_1.SelectCredentialClass(this.importIns[i].getInput().getCredentialID());
            const sigidxs = this.importIns[i].getInput().getSigIdxs();
            for (let j = 0; j < sigidxs.length; j++) {
                const keypair = kc.getKey(sigidxs[j].getSource());
                const signval = keypair.sign(msg);
                const sig = new types_1.Signature();
                sig.fromBuffer(signval);
                cred.addSignature(sig);
            }
            sigs.push(cred);
        }
        return sigs;
    }
}
exports.ImportTx = ImportTx;
/**
 * Class representing an unsigned Export transaction.
 */
class ExportTx extends BaseTx {
    /**
       * Class representing an unsigned Export transaction.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction
       */
    constructor(networkid = 3, blockchainid = buffer_1.Buffer.alloc(32, 16), outs = undefined, ins = undefined, memo = undefined, exportOuts = undefined) {
        super(networkid, blockchainid, outs, ins, memo);
        this.numOuts = buffer_1.Buffer.alloc(4);
        this.exportOuts = [];
        if (typeof exportOuts !== 'undefined' && Array.isArray(exportOuts)) {
            for (let i = 0; i < exportOuts.length; i++) {
                if (!(exportOuts[i] instanceof outputs_1.TransferableOutput)) {
                    throw new Error("Error - ExportTx.constructor: invalid TransferableOutput in array parameter 'exportOuts'");
                }
            }
            this.exportOuts = exportOuts;
        }
    }
    /**
       * Returns the id of the [[ExportTx]]
       */
    getTxType() {
        return types_1.AVMConstants.EXPORTTX;
    }
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]
       *
       * @returns The length of the raw [[ExportTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes, offset = 0) {
        // this.codecid.writeUInt8(offset, 0);
        // offset += 6;
        offset = super.fromBuffer(bytes, offset);
        this.numOuts = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const numOuts = this.numOuts.readUInt32BE(0);
        for (let i = 0; i < numOuts; i++) {
            const anOut = new outputs_1.TransferableOutput();
            offset = anOut.fromBuffer(bytes, offset);
            this.exportOuts.push(anOut);
        }
        return offset;
    }
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].
       */
    toBuffer() {
        this.numOuts.writeUInt32BE(this.exportOuts.length, 0);
        let barr = [super.toBuffer(), this.numOuts];
        this.exportOuts = this.exportOuts.sort(outputs_1.TransferableOutput.comparator());
        for (let i = 0; i < this.exportOuts.length; i++) {
            barr.push(this.exportOuts[i].toBuffer());
        }
        return buffer_1.Buffer.concat(barr);
    }
    /**
       * Returns an array of [[TransferableOutput]]s in this transaction.
       */
    getExportOutputs() {
        return this.exportOuts;
    }
}
exports.ExportTx = ExportTx;
/**
 * Class representing an unsigned transaction.
 */
class UnsignedTx {
    constructor(transaction = undefined, codecid = types_1.AVMConstants.LATESTCODEC) {
        this.codecid = types_1.AVMConstants.LATESTCODEC;
        /**
           * Returns the CodecID as a number
           */
        this.getCodecID = () => this.codecid;
        /**
         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID
          */
        this.getCodecIDBuffer = () => {
            let codecBuf = buffer_1.Buffer.alloc(2);
            codecBuf.writeUInt16BE(this.codecid, 0);
            return codecBuf;
        };
        /**
           * Returns the inputTotal as a BN
           */
        this.getInputTotal = (assetID) => {
            const ins = this.getTransaction().getIns();
            const aIDHex = assetID.toString('hex');
            let total = new bn_js_1.default(0);
            for (let i = 0; i < ins.length; i++) {
                const input = ins[i].getInput();
                // only check secpinputs
                if (input.getInputID() === types_1.AVMConstants.SECPINPUTID && aIDHex === ins[i].getAssetID().toString('hex')) {
                    total = total.add(input.getAmount());
                }
            }
            return total;
        };
        /**
           * Returns the outputTotal as a BN
           */
        this.getOutputTotal = (assetID) => {
            const outs = this.getTransaction().getOuts();
            const aIDHex = assetID.toString('hex');
            let total = new bn_js_1.default(0);
            for (let i = 0; i < outs.length; i++) {
                const output = outs[i].getOutput();
                // only check secpoutputs
                if (output.getOutputID() === types_1.AVMConstants.SECPOUTPUTID && aIDHex === outs[i].getAssetID().toString('hex')) {
                    total = total.add(output.getAmount());
                }
            }
            return total;
        };
        /**
           * Returns the number of burned tokens as a BN
           */
        this.getBurn = (assetID) => {
            return this.getInputTotal(assetID).sub(this.getOutputTotal(assetID));
        };
        /**
           * Returns the Transaction
           */
        this.getTransaction = () => this.transaction;
        this.transaction = transaction;
    }
    fromBuffer(bytes, offset = 0) {
        this.codecid = bintools.copyFrom(bytes, offset, offset + 2).readUInt16BE(0);
        offset += 2;
        const txtype = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.transaction = exports.SelectTxClass(txtype);
        return this.transaction.fromBuffer(bytes, offset);
    }
    toBuffer() {
        const codecid = this.getCodecIDBuffer();
        const txtype = buffer_1.Buffer.alloc(4);
        txtype.writeUInt32BE(this.transaction.getTxType(), 0);
        const basebuff = this.transaction.toBuffer();
        return buffer_1.Buffer.concat([codecid, txtype, basebuff], codecid.length + txtype.length + basebuff.length);
    }
    /**
       * Signs this [[UnsignedTx]] and returns signed [[Tx]]
       *
       * @param kc An [[AVMKeyChain]] used in signing
       *
       * @returns A signed [[Tx]]
       */
    sign(kc) {
        const txbuff = this.toBuffer();
        const msg = buffer_1.Buffer.from(create_hash_1.default('sha256').update(txbuff).digest());
        const sigs = this.transaction.sign(msg, kc);
        return new Tx(this, sigs);
    }
}
exports.UnsignedTx = UnsignedTx;
/**
 * Class representing a signed transaction.
 */
class Tx {
    /**
       * Class representing a signed transaction.
       *
       * @param unsignedTx Optional [[UnsignedTx]]
       * @param signatures Optional array of [[Credential]]s
       */
    constructor(unsignedTx = undefined, credentials = undefined) {
        this.unsignedTx = new UnsignedTx();
        this.credentials = [];
        /**
           * Returns the [[UnsignedTx]]
           */
        this.getUnsignedTx = () => {
            return this.unsignedTx;
        };
        if (typeof unsignedTx !== 'undefined') {
            this.unsignedTx = unsignedTx;
            if (typeof credentials !== 'undefined') {
                this.credentials = credentials;
            }
        }
    }
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]
       * @param offset A number representing the starting point of the bytes to begin parsing
       *
       * @returns The length of the raw [[Tx]]
       */
    fromBuffer(bytes, offset = 0) {
        this.unsignedTx = new UnsignedTx();
        offset = this.unsignedTx.fromBuffer(bytes, offset);
        const numcreds = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.credentials = [];
        for (let i = 0; i < numcreds; i++) {
            const credid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
            offset += 4;
            const cred = credentials_1.SelectCredentialClass(credid);
            offset = cred.fromBuffer(bytes, offset);
            this.credentials.push(cred);
        }
        return offset;
    }
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[Tx]].
       */
    toBuffer() {
        const txbuff = this.unsignedTx.toBuffer();
        let bsize = txbuff.length;
        const credlen = buffer_1.Buffer.alloc(4);
        credlen.writeUInt32BE(this.credentials.length, 0);
        const barr = [txbuff, credlen];
        bsize += credlen.length;
        for (let i = 0; i < this.credentials.length; i++) {
            const credid = buffer_1.Buffer.alloc(4);
            credid.writeUInt32BE(this.credentials[i].getCredentialID(), 0);
            barr.push(credid);
            bsize += credid.length;
            const credbuff = this.credentials[i].toBuffer();
            bsize += credbuff.length;
            barr.push(credbuff);
        }
        const buff = buffer_1.Buffer.concat(barr, bsize);
        return buff;
    }
    /**
       * Takes a base-58 string containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.
       *
       * @param serialized A base-58 string containing a raw [[Tx]]
       *
       * @returns The length of the raw [[Tx]]
       *
       * @remarks
       * unlike most fromStrings, it expects the string to be serialized in cb58 format
       */
    fromString(serialized) {
        return this.fromBuffer(bintools.cb58Decode(serialized));
    }
    /**
       * Returns a base-58 AVAX-serialized representation of the [[Tx]].
       *
       * @remarks
       * unlike most toStrings, this returns in cb58 serialization format
       */
    toString() {
        return bintools.cb58Encode(this.toBuffer());
    }
}
exports.Tx = Tx;
/**
 * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.
 *
 * @param txtype The id of the transaction type
 *
 * @returns An instance of an [[BaseTx]]-extended class.
 */
exports.SelectTxClass = (txtype, ...args) => {
    if (txtype === types_1.AVMConstants.BASETX) {
        const tx = new BaseTx(...args);
        return tx;
    }
    else if (txtype === types_1.AVMConstants.CREATEASSETTX) {
        const tx = new CreateAssetTx(...args);
        return tx;
    }
    else if (txtype === types_1.AVMConstants.OPERATIONTX) {
        const tx = new OperationTx(...args);
        return tx;
    }
    else if (txtype === types_1.AVMConstants.IMPORTTX) {
        const tx = new ImportTx(...args);
        return tx;
    }
    else if (txtype === types_1.AVMConstants.EXPORTTX) {
        const tx = new ExportTx(...args);
        return tx;
    }
    /* istanbul ignore next */
    throw new Error(`Error - SelectTxClass: unknown txtype ${txtype}`);
};
//# sourceMappingURL=data:application/json;base64,