"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecpInput = exports.AmountInput = exports.TransferableInput = exports.Input = exports.SelectInputClass = void 0;
/**
 * @packageDocumentation
 * @module AVMAPI-Inputs
 */
const buffer_1 = require("buffer/");
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("../../utils/bintools"));
const types_1 = require("./types");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Takes a buffer representing the output and returns the proper [[Input]] instance.
 *
 * @param inputid A number representing the inputID parsed prior to the bytes passed in
 *
 * @returns An instance of an [[Input]]-extended class.
 */
exports.SelectInputClass = (inputid, ...args) => {
    if (inputid === types_1.AVMConstants.SECPINPUTID) {
        const secpin = new SecpInput(...args);
        return secpin;
    }
    /* istanbul ignore next */
    throw new Error(`Error - SelectInputClass: unknown inputid ${inputid}`);
};
class Input {
    constructor() {
        this.sigCount = buffer_1.Buffer.alloc(4);
        this.sigIdxs = []; // idxs of signers from utxo
        /**
           * Returns the array of [[SigIdx]] for this [[Input]]
           */
        this.getSigIdxs = () => this.sigIdxs;
        this.getCredentialID = () => types_1.AVMConstants.SECPCREDENTIAL;
        /**
           * Creates and adds a [[SigIdx]] to the [[Input]].
           *
           * @param addressIdx The index of the address to reference in the signatures
           * @param address The address of the source of the signature
           */
        this.addSignatureIdx = (addressIdx, address) => {
            const sigidx = new types_1.SigIdx();
            const b = buffer_1.Buffer.alloc(4);
            b.writeUInt32BE(addressIdx, 0);
            sigidx.fromBuffer(b);
            sigidx.setSource(address);
            this.sigIdxs.push(sigidx);
            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);
        };
    }
    fromBuffer(bytes, offset = 0) {
        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const sigCount = this.sigCount.readUInt32BE(0);
        this.sigIdxs = [];
        for (let i = 0; i < sigCount; i++) {
            const sigidx = new types_1.SigIdx();
            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);
            sigidx.fromBuffer(sigbuff);
            offset += 4;
            this.sigIdxs.push(sigidx);
        }
        return offset;
    }
    toBuffer() {
        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);
        let bsize = this.sigCount.length;
        const barr = [this.sigCount];
        for (let i = 0; i < this.sigIdxs.length; i++) {
            const b = this.sigIdxs[i].toBuffer();
            barr.push(b);
            bsize += b.length;
        }
        return buffer_1.Buffer.concat(barr, bsize);
    }
    /**
       * Returns a base-58 representation of the [[Input]].
       */
    toString() {
        return bintools.bufferToB58(this.toBuffer());
    }
}
exports.Input = Input;
Input.comparator = () => (a, b) => {
    const aoutid = buffer_1.Buffer.alloc(4);
    aoutid.writeUInt32BE(a.getInputID(), 0);
    const abuff = a.toBuffer();
    const boutid = buffer_1.Buffer.alloc(4);
    boutid.writeUInt32BE(b.getInputID(), 0);
    const bbuff = b.toBuffer();
    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);
    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);
    return buffer_1.Buffer.compare(asort, bsort);
};
class TransferableInput {
    /**
       * Class representing an [[TransferableInput]] for a transaction.
       *
       * @param txid A {@link https://github.com/feross/buffer|Buffer} containing the transaction ID of the referenced UTXO
       * @param outputidx A {@link https://github.com/feross/buffer|Buffer} containing the index of the output in the transaction consumed in the [[TransferableInput]]
       * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Input]]
       * @param input An [[Input]] to be made transferable
       */
    constructor(txid = undefined, outputidx = undefined, assetID = undefined, input = undefined) {
        this.txid = buffer_1.Buffer.alloc(32);
        this.outputidx = buffer_1.Buffer.alloc(4);
        this.assetid = buffer_1.Buffer.alloc(32);
        /**
           * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.
           */
        this.getTxID = () => this.txid;
        /**
           * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.
           */
        this.getOutputIdx = () => this.outputidx;
        /**
           * Returns a base-58 string representation of the UTXOID this [[TransferableInput]] references.
           */
        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.txid, this.outputidx]));
        /**
           * Returns the input.
           */
        this.getInput = () => this.input;
        /**
           * Returns the assetID of the input.
           */
        this.getAssetID = () => this.assetid;
        if (typeof txid !== 'undefined' && typeof outputidx !== 'undefined' && typeof assetID !== 'undefined' && input instanceof Input) {
            this.input = input;
            this.txid = txid;
            this.outputidx = outputidx;
            this.assetid = assetID;
        }
    }
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]
       *
       * @returns The length of the raw [[TransferableInput]]
       */
    fromBuffer(bytes, offset = 0) {
        this.txid = bintools.copyFrom(bytes, offset, offset + 32);
        offset += 32;
        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        this.assetid = bintools.copyFrom(bytes, offset, offset + types_1.AVMConstants.ASSETIDLEN);
        offset += 32;
        const inputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.input = exports.SelectInputClass(inputid);
        return this.input.fromBuffer(bytes, offset);
    }
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[TransferableInput]].
       */
    toBuffer() {
        const inbuff = this.input.toBuffer();
        const inputid = buffer_1.Buffer.alloc(4);
        inputid.writeInt32BE(this.input.getInputID(), 0);
        const bsize = this.txid.length + this.outputidx.length + this.assetid.length + inputid.length + inbuff.length;
        const barr = [this.txid, this.outputidx, this.assetid, inputid, inbuff];
        const buff = buffer_1.Buffer.concat(barr, bsize);
        return buff;
    }
    /**
       * Returns a base-58 representation of the [[TransferableInput]].
       */
    toString() {
        /* istanbul ignore next */
        return bintools.bufferToB58(this.toBuffer());
    }
}
exports.TransferableInput = TransferableInput;
/**
   * Returns a function used to sort an array of [[TransferableInput]]s
   */
TransferableInput.comparator = () => (a, b) => {
    const sorta = buffer_1.Buffer.concat([a.getTxID(), a.getOutputIdx()]);
    const sortb = buffer_1.Buffer.concat([b.getTxID(), b.getOutputIdx()]);
    return buffer_1.Buffer.compare(sorta, sortb);
};
/**
 * An [[Input]] class which specifies a token amount .
 */
class AmountInput extends Input {
    /**
       * An [[AmountInput]] class which issues a payment on an assetID.
       *
       * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input
       */
    constructor(amount = undefined) {
        super();
        this.amount = buffer_1.Buffer.alloc(8);
        this.amountValue = new bn_js_1.default(0);
        /**
           * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.
           */
        this.getAmount = () => this.amountValue.clone();
        if (amount) {
            this.amountValue = amount.clone();
            this.amount = bintools.fromBNToBuffer(amount, 8);
        }
    }
    /**
       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountInput]] and returns the size of the output.
       */
    fromBuffer(bytes, offset = 0) {
        this.amount = bintools.copyFrom(bytes, offset, offset + 8);
        this.amountValue = bintools.fromBufferToBN(this.amount);
        offset += 8;
        return super.fromBuffer(bytes, offset);
    }
    /**
       * Returns the buffer representing the [[AmountInput]] instance.
       */
    toBuffer() {
        const superbuff = super.toBuffer();
        const bsize = this.amount.length + superbuff.length;
        const barr = [this.amount, superbuff];
        return buffer_1.Buffer.concat(barr, bsize);
    }
}
exports.AmountInput = AmountInput;
class SecpInput extends AmountInput {
    /**
       * Returns the inputID for this input
       */
    getInputID() {
        return types_1.AVMConstants.SECPINPUTID;
    }
}
exports.SecpInput = SecpInput;
//# sourceMappingURL=data:application/json;base64,