/**
 * @packageDocumentation
 * @module AVMAPI-Inputs
 */
import { Buffer } from 'buffer/';
import BN from 'bn.js';
import { SigIdx } from './types';
/**
 * Takes a buffer representing the output and returns the proper [[Input]] instance.
 *
 * @param inputid A number representing the inputID parsed prior to the bytes passed in
 *
 * @returns An instance of an [[Input]]-extended class.
 */
export declare const SelectInputClass: (inputid: number, ...args: Array<any>) => Input;
export declare abstract class Input {
    protected sigCount: Buffer;
    protected sigIdxs: Array<SigIdx>;
    abstract getInputID(): number;
    /**
       * Returns the array of [[SigIdx]] for this [[Input]]
       */
    getSigIdxs: () => Array<SigIdx>;
    getCredentialID: () => number;
    /**
       * Creates and adds a [[SigIdx]] to the [[Input]].
       *
       * @param addressIdx The index of the address to reference in the signatures
       * @param address The address of the source of the signature
       */
    addSignatureIdx: (addressIdx: number, address: Buffer) => void;
    fromBuffer(bytes: Buffer, offset?: number): number;
    toBuffer(): Buffer;
    /**
       * Returns a base-58 representation of the [[Input]].
       */
    toString(): string;
    static comparator: () => (a: Input, b: Input) => (1 | -1 | 0);
    constructor();
}
export declare class TransferableInput {
    protected txid: Buffer;
    protected outputidx: Buffer;
    protected assetid: Buffer;
    protected input: Input;
    /**
       * Returns a function used to sort an array of [[TransferableInput]]s
       */
    static comparator: () => (a: TransferableInput, b: TransferableInput) => (1 | -1 | 0);
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.
       */
    getTxID: () => Buffer;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.
       */
    getOutputIdx: () => Buffer;
    /**
       * Returns a base-58 string representation of the UTXOID this [[TransferableInput]] references.
       */
    getUTXOID: () => string;
    /**
       * Returns the input.
       */
    getInput: () => Input;
    /**
       * Returns the assetID of the input.
       */
    getAssetID: () => Buffer;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[TransferableInput]], parses it, populates the class, and returns the length of the [[TransferableInput]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[TransferableInput]]
       *
       * @returns The length of the raw [[TransferableInput]]
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[TransferableInput]].
       */
    toBuffer(): Buffer;
    /**
       * Returns a base-58 representation of the [[TransferableInput]].
       */
    toString(): string;
    /**
       * Class representing an [[TransferableInput]] for a transaction.
       *
       * @param txid A {@link https://github.com/feross/buffer|Buffer} containing the transaction ID of the referenced UTXO
       * @param outputidx A {@link https://github.com/feross/buffer|Buffer} containing the index of the output in the transaction consumed in the [[TransferableInput]]
       * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Input]]
       * @param input An [[Input]] to be made transferable
       */
    constructor(txid?: Buffer, outputidx?: Buffer, assetID?: Buffer, input?: Input);
}
/**
 * An [[Input]] class which specifies a token amount .
 */
export declare abstract class AmountInput extends Input {
    protected amount: Buffer;
    protected amountValue: BN;
    /**
       * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.
       */
    getAmount: () => BN;
    /**
       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountInput]] and returns the size of the output.
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns the buffer representing the [[AmountInput]] instance.
       */
    toBuffer(): Buffer;
    /**
       * An [[AmountInput]] class which issues a payment on an assetID.
       *
       * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the input
       */
    constructor(amount?: BN);
}
export declare class SecpInput extends AmountInput {
    /**
       * Returns the inputID for this input
       */
    getInputID(): number;
}
//# sourceMappingURL=inputs.d.ts.map