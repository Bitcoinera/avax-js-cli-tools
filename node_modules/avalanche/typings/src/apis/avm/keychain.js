"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AVMKeyChain = exports.AVMKeyPair = void 0;
/**
 * @packageDocumentation
 * @module AVMAPI-KeyChain
 */
const buffer_1 = require("buffer/");
const elliptic = __importStar(require("elliptic"));
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("../../utils/bintools"));
const types_1 = require("../../utils/types");
/**
 * @ignore
 */
const EC = elliptic.ec;
/**
 * @ignore
 */
const ec = new EC('secp256k1');
/**
 * @ignore
 */
const ecparams = ec.curve;
/**
 * @ignore
 */
const BN = ecparams.n.constructor;
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Class for representing a private and public keypair in the AVM.
 */
class AVMKeyPair extends types_1.KeyPair {
    /**
       * Class for representing a private and public keypair in Avalanche.
       */
    constructor(hrp, chainid, entropy = undefined) {
        super(hrp, chainid);
        /**
           * @ignore
           */
        this._sigFromSigBuffer = (sig) => {
            const r = new BN(bintools.copyFrom(sig, 0, 32));
            const s = new BN(bintools.copyFrom(sig, 32, 64));
            const recoveryParam = bintools.copyFrom(sig, 64, 65).readUIntBE(0, 1);
            const sigOpt = {
                r,
                s,
                recoveryParam,
            };
            return sigOpt;
        };
        /**
           * Generates a new keypair.
           *
           * @param entropy Optional parameter that may be necessary to produce secure keys
           */
        this.generateKey = (entropy) => {
            this.entropy = entropy;
            this.keypair = ec.genKeyPair();
            // doing hex translation to get Buffer class
            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex'), 'hex');
            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex'), 'hex');
        };
        /**
           * Imports a private key and generates the appropriate public key.
           *
           * @param privk A {@link https://github.com/feross/buffer|Buffer} representing the private key
           *
           * @returns true on success, false on failure
           */
        this.importKey = (privk) => {
            this.keypair = ec.keyFromPrivate(privk.toString('hex'), 'hex');
            // doing hex translation to get Buffer class
            this.privk = buffer_1.Buffer.from(this.keypair.getPrivate('hex'), 'hex');
            this.pubk = buffer_1.Buffer.from(this.keypair.getPublic(true, 'hex'), 'hex');
            return true; // silly I know, but the interface requires so it returns true on success, so if Buffer fails validation...
        };
        /**
           * Returns the address as a {@link https://github.com/feross/buffer|Buffer}.
           *
           * @returns A {@link https://github.com/feross/buffer|Buffer} representation of the address
           */
        this.getAddress = () => this.addressFromPublicKey(this.pubk);
        /**
           * Returns the address's string representation.
           *
           * @returns A string representation of the address
           */
        this.getAddressString = () => {
            const addr = this.addressFromPublicKey(this.pubk);
            return bintools.addressToString(this.hrp, this.chainid, addr);
        };
        /**
           * Returns an address given a public key.
           *
           * @param pubk A {@link https://github.com/feross/buffer|Buffer} representing the public key
           *
           * @returns A {@link https://github.com/feross/buffer|Buffer} for the address of the public key.
           */
        this.addressFromPublicKey = (pubk) => {
            if (pubk.length === 65) {
                /* istanbul ignore next */
                pubk = buffer_1.Buffer.from(ec.keyFromPublic(pubk).getPublic(true, 'hex'), 'hex'); // make compact, stick back into buffer
            }
            if (pubk.length === 33) {
                const sha256 = buffer_1.Buffer.from(create_hash_1.default('sha256').update(pubk).digest());
                const ripesha = buffer_1.Buffer.from(create_hash_1.default('rmd160').update(sha256).digest());
                return ripesha;
            }
            /* istanbul ignore next */
            throw new Error('Unable to make address.');
        };
        /**
           * Returns a string representation of the private key.
           *
           * @returns A b58 serialized string representation of the private key
           */
        this.getPrivateKeyString = () => "PrivateKey-" + bintools.cb58Encode(this.privk);
        /**
           * Returns the public key.
           *
           * @returns A b58 serialized string representation of the public key
           */
        this.getPublicKeyString = () => bintools.cb58Encode(this.pubk);
        /**
           * Takes a message, signs it, and returns the signature.
           *
           * @param msg The message to sign, be sure to hash first if expected
           *
           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the signature
           */
        this.sign = (msg) => {
            const sigObj = this.keypair.sign(msg, undefined, { canonical: true });
            const recovery = buffer_1.Buffer.alloc(1);
            recovery.writeUInt8(sigObj.recoveryParam, 0);
            const r = buffer_1.Buffer.from(sigObj.r.toArray('be', 32)); // we have to skip native Buffer class, so this is the way
            const s = buffer_1.Buffer.from(sigObj.s.toArray('be', 32)); // we have to skip native Buffer class, so this is the way
            const result = buffer_1.Buffer.concat([r, s, recovery], 65);
            return result;
        };
        /**
           * Verifies that the private key associated with the provided public key produces the signature associated with the given message.
           *
           * @param msg The message associated with the signature
           * @param sig The signature of the signed message
           *
           * @returns True on success, false on failure
           */
        this.verify = (msg, sig) => {
            const sigObj = this._sigFromSigBuffer(sig);
            return ec.verify(msg, sigObj, this.keypair);
        };
        /**
           * Recovers the public key of a message signer from a message and its associated signature.
           *
           * @param msg The message that's signed
           * @param sig The signature that's signed on the message
           *
           * @returns A {@link https://github.com/feross/buffer|Buffer} containing the public key of the signer
           */
        this.recover = (msg, sig) => {
            const sigObj = this._sigFromSigBuffer(sig);
            const pubk = ec.recoverPubKey(msg, sigObj, sigObj.recoveryParam);
            return buffer_1.Buffer.from(pubk.encodeCompressed());
        };
        this.entropy = entropy;
        this.generateKey();
    }
}
exports.AVMKeyPair = AVMKeyPair;
/**
 * Class for representing a key chain in Avalanche.
 *
 * @typeparam AVMKeyPair Class extending [[KeyPair]] which is used as the key in [[AVMKeyChain]]
 */
class AVMKeyChain extends types_1.KeyChain {
    /**
       * Returns instance of AVMKeyChain.
       */
    constructor(hrp, chainid) {
        super(hrp, chainid);
        /**
           * Makes a new key pair, returns the address.
           *
           * @param entropy Optional parameter that may be necessary to produce secure keys
           *
           * @returns Address of the new key pair
           */
        this.makeKey = (entropy = undefined) => {
            const keypair = new AVMKeyPair(this.hrp, this.chainid, entropy);
            this.addKey(keypair);
            return keypair.getAddress();
        };
        /**
           * Given a private key, makes a new key pair, returns the address.
           *
           * @param privk A {@link https://github.com/feross/buffer|Buffer} or b58 serialized string representing the private key
           *
           * @returns Address of the new key pair
           */
        this.importKey = (privk) => {
            const keypair = new AVMKeyPair(this.hrp, this.chainid);
            let pk;
            if (typeof privk === 'string') {
                pk = bintools.cb58Decode(privk.split('-')[1]);
            }
            else {
                pk = bintools.copyFrom(privk);
            }
            keypair.importKey(pk);
            if (!(keypair.getAddress().toString('hex') in this.keys)) {
                this.addKey(keypair);
            }
            return keypair.getAddress();
        };
        /**
           * DEPRECATED: use UnsignedTx.sign(keychain) instead
           * Signs a [[UnsignedTx]] and returns signed [[Tx]]
           *
           * @param utx A [[UnsignedTx]] that needs to be signed
           *
           * @returns A signed [[Tx]]
           */
        this.signTx = (utx) => utx.sign(this);
    }
}
exports.AVMKeyChain = AVMKeyChain;
//# sourceMappingURL=data:application/json;base64,