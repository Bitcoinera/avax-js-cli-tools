"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTTransferOperation = exports.NFTMintOperation = exports.TransferableOperation = exports.Operation = exports.SelectOperationClass = void 0;
/**
 * @packageDocumentation
 * @module AVMAPI-Operations
 */
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("../../utils/bintools"));
const types_1 = require("./types");
const outputs_1 = require("./outputs");
const bintools = bintools_1.default.getInstance();
/**
 * Takes a buffer representing the output and returns the proper [[Operation]] instance.
 *
 * @param opid A number representing the operation ID parsed prior to the bytes passed in
 *
 * @returns An instance of an [[Operation]]-extended class.
 */
exports.SelectOperationClass = (opid, ...args) => {
    if (opid == types_1.AVMConstants.NFTMINTOPID) {
        let nftop = new NFTMintOperation(...args);
        return nftop;
    }
    else if (opid == types_1.AVMConstants.NFTXFEROP) {
        let nftop = new NFTTransferOperation(...args);
        return nftop;
    }
    /* istanbul ignore next */
    throw new Error("Error - SelectOperationClass: unknown opid " + opid);
};
/**
 * A class representing an operation. All operation types must extend on this class.
 */
class Operation {
    constructor() {
        this.sigCount = buffer_1.Buffer.alloc(4);
        this.sigIdxs = []; // idxs of signers from utxo
        /**
           * Returns the array of [[SigIdx]] for this [[Operation]]
           */
        this.getSigIdxs = () => this.sigIdxs;
        this.getCredentialID = () => types_1.AVMConstants.NFTCREDENTIAL;
        /**
           * Creates and adds a [[SigIdx]] to the [[Operation]].
           *
           * @param addressIdx The index of the address to reference in the signatures
           * @param address The address of the source of the signature
           */
        this.addSignatureIdx = (addressIdx, address) => {
            const sigidx = new types_1.SigIdx();
            const b = buffer_1.Buffer.alloc(4);
            b.writeUInt32BE(addressIdx, 0);
            sigidx.fromBuffer(b);
            sigidx.setSource(address);
            this.sigIdxs.push(sigidx);
            this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);
        };
    }
    fromBuffer(bytes, offset = 0) {
        this.sigCount = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const sigCount = this.sigCount.readUInt32BE(0);
        this.sigIdxs = [];
        for (let i = 0; i < sigCount; i++) {
            const sigidx = new types_1.SigIdx();
            const sigbuff = bintools.copyFrom(bytes, offset, offset + 4);
            sigidx.fromBuffer(sigbuff);
            offset += 4;
            this.sigIdxs.push(sigidx);
        }
        return offset;
    }
    toBuffer() {
        this.sigCount.writeUInt32BE(this.sigIdxs.length, 0);
        let bsize = this.sigCount.length;
        const barr = [this.sigCount];
        for (let i = 0; i < this.sigIdxs.length; i++) {
            const b = this.sigIdxs[i].toBuffer();
            barr.push(b);
            bsize += b.length;
        }
        return buffer_1.Buffer.concat(barr, bsize);
    }
}
exports.Operation = Operation;
Operation.comparator = () => (a, b) => {
    const aoutid = buffer_1.Buffer.alloc(4);
    aoutid.writeUInt32BE(a.getOperationID(), 0);
    const abuff = a.toBuffer();
    const boutid = buffer_1.Buffer.alloc(4);
    boutid.writeUInt32BE(b.getOperationID(), 0);
    const bbuff = b.toBuffer();
    const asort = buffer_1.Buffer.concat([aoutid, abuff], aoutid.length + abuff.length);
    const bsort = buffer_1.Buffer.concat([boutid, bbuff], boutid.length + bbuff.length);
    return buffer_1.Buffer.compare(asort, bsort);
};
/**
 * A class which contains an [[Operation]] for transfers.
 *
 */
class TransferableOperation {
    constructor(assetid = undefined, utxoids = undefined, operation = undefined) {
        this.assetid = buffer_1.Buffer.alloc(32);
        this.utxoIDs = [];
        /**
           * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.
           */
        this.getAssetID = () => this.assetid;
        /**
           * Returns an array of UTXOIDs in this operation.
           */
        this.getUTXOIDs = () => this.utxoIDs;
        /**
           * Returns the operation
           */
        this.getOperation = () => this.operation;
        if (typeof assetid !== 'undefined' && assetid.length === types_1.AVMConstants.ASSETIDLEN
            && operation instanceof Operation && typeof utxoids !== 'undefined'
            && Array.isArray(utxoids)) {
            this.assetid = assetid;
            this.operation = operation;
            for (let i = 0; i < utxoids.length; i++) {
                const utxoid = new types_1.UTXOID();
                if (typeof utxoids[i] === 'string') {
                    utxoid.fromString(utxoids[i]);
                }
                else if (utxoids[i] instanceof buffer_1.Buffer) {
                    utxoid.fromBuffer(utxoids[i]);
                }
                else if (utxoids[i] instanceof types_1.UTXOID) {
                    utxoid.fromString(utxoids[i].toString()); // clone
                }
                this.utxoIDs.push(utxoid);
            }
        }
    }
    fromBuffer(bytes, offset = 0) {
        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);
        offset += 32;
        const numutxoIDs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.utxoIDs = [];
        for (let i = 0; i < numutxoIDs; i++) {
            const utxoid = new types_1.UTXOID();
            offset = utxoid.fromBuffer(bytes, offset);
            this.utxoIDs.push(utxoid);
        }
        const opid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.operation = exports.SelectOperationClass(opid);
        return this.operation.fromBuffer(bytes, offset);
    }
    toBuffer() {
        const numutxoIDs = buffer_1.Buffer.alloc(4);
        numutxoIDs.writeUInt32BE(this.utxoIDs.length, 0);
        let bsize = this.assetid.length + numutxoIDs.length;
        const barr = [this.assetid, numutxoIDs];
        this.utxoIDs = this.utxoIDs.sort(types_1.UTXOID.comparator());
        for (let i = 0; i < this.utxoIDs.length; i++) {
            const b = this.utxoIDs[i].toBuffer();
            barr.push(b);
            bsize += b.length;
        }
        const opid = buffer_1.Buffer.alloc(4);
        opid.writeUInt32BE(this.operation.getOperationID(), 0);
        barr.push(opid);
        bsize += opid.length;
        const b = this.operation.toBuffer();
        bsize += b.length;
        barr.push(b);
        return buffer_1.Buffer.concat(barr, bsize);
    }
}
exports.TransferableOperation = TransferableOperation;
/**
 * Returns a function used to sort an array of [[TransferableOperation]]s
 */
TransferableOperation.comparator = () => {
    return function (a, b) {
        return buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());
    };
};
/**
 * A [[Operation]] class which specifies a NFT Mint Op.
 */
class NFTMintOperation extends Operation {
    /**
     * An [[Operation]] class which contains an NFT on an assetID.
     *
     * @param groupID The group to which to issue the NFT Output
     * @param payload A {@link https://github.com/feross/buffer|Buffer} of the NFT payload
     * @param outputOwners An array of outputOwners
     */
    constructor(groupID = undefined, payload = undefined, outputOwners = undefined) {
        super();
        this.groupID = buffer_1.Buffer.alloc(4);
        this.outputOwners = [];
        /**
         * Returns the payload.
         */
        this.getPayload = () => {
            return this.payload;
        };
        /**
         * Returns the outputOwners.
         */
        this.getOutputOwners = () => {
            return this.outputOwners;
        };
        if (typeof groupID !== 'undefined' && typeof payload !== 'undefined' && outputOwners.length) {
            this.groupID.writeUInt32BE((groupID ? groupID : 0), 0);
            this.payload = payload;
            this.outputOwners = outputOwners;
        }
    }
    /**
     * Returns the operation ID.
     */
    getOperationID() {
        return types_1.AVMConstants.NFTMINTOPID;
    }
    /**
     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOperation]] and returns the size of the output.
     */
    fromBuffer(bytes, offset = 0) {
        offset = super.fromBuffer(bytes, offset);
        this.groupID = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        let payloadLen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.payload = bintools.copyFrom(bytes, offset, offset + payloadLen);
        offset += payloadLen;
        let numoutputs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.outputOwners = [];
        for (let i = 0; i < numoutputs; i++) {
            let locktime = bintools.fromBufferToBN(bintools.copyFrom(bytes, offset, offset + 8));
            offset += 8;
            let threshold = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
            offset += 4;
            let numaddrs = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
            offset += 4;
            let addrs = [];
            for (let j = 0; j < numaddrs; j++) {
                let addr = bintools.copyFrom(bytes, offset, offset + 20);
                addrs.push(addr);
                offset += 20;
            }
            let outputOwner = new outputs_1.OutputOwners(addrs, locktime, threshold);
            this.outputOwners.push(outputOwner);
        }
        return offset;
    }
    /**
     * Returns the buffer representing the [[NFTMintOperation]] instance.
     */
    toBuffer() {
        let superbuff = super.toBuffer();
        let payloadlen = buffer_1.Buffer.alloc(4);
        payloadlen.writeUInt32BE(this.payload.length, 0);
        let outputownerslen = buffer_1.Buffer.alloc(4);
        outputownerslen.writeUInt32BE(this.outputOwners.length, 0);
        let bsize = superbuff.length +
            this.groupID.length +
            payloadlen.length +
            this.payload.length +
            outputownerslen.length;
        let barr = [
            superbuff,
            this.groupID,
            payloadlen,
            this.payload,
            outputownerslen
        ];
        for (let i = 0; i < this.outputOwners.length; i++) {
            let b = this.outputOwners[i].toBuffer();
            barr.push(b);
            bsize += b.length;
        }
        return buffer_1.Buffer.concat(barr, bsize);
    }
    /**
     * Returns a base-58 string representing the [[NFTMintOperation]].
     */
    toString() {
        return bintools.bufferToB58(this.toBuffer());
    }
}
exports.NFTMintOperation = NFTMintOperation;
/**
 * A [[Operation]] class which specifies a NFT Transfer Op.
 */
class NFTTransferOperation extends Operation {
    /**
       * An [[Operation]] class which contains an NFT on an assetID.
       *
       * @param output An [[NFTTransferOutput]]
       */
    constructor(output = undefined) {
        super();
        this.getOutput = () => this.output;
        if (typeof output !== 'undefined') {
            this.output = output;
        }
    }
    /**
       * Returns the operation ID.
       */
    getOperationID() {
        return types_1.AVMConstants.NFTXFEROP;
    }
    /**
       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOperation]] and returns the size of the output.
       */
    fromBuffer(bytes, offset = 0) {
        offset = super.fromBuffer(bytes, offset);
        this.output = new outputs_1.NFTTransferOutput();
        return this.output.fromBuffer(bytes, offset);
    }
    /**
       * Returns the buffer representing the [[NFTTransferOperation]] instance.
       */
    toBuffer() {
        const superbuff = super.toBuffer();
        const outbuff = this.output.toBuffer();
        const bsize = superbuff.length + outbuff.length;
        const barr = [superbuff, outbuff];
        return buffer_1.Buffer.concat(barr, bsize);
    }
    /**
       * Returns a base-58 string representing the [[NFTTransferOperation]].
       */
    toString() {
        return bintools.bufferToB58(this.toBuffer());
    }
}
exports.NFTTransferOperation = NFTTransferOperation;
//# sourceMappingURL=data:application/json;base64,