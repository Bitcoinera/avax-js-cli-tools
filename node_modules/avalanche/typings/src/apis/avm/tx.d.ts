/**
 * @packageDocumentation
 * @module AVMAPI-Transactions
 */
import { Buffer } from 'buffer/';
import { InitialStates } from './types';
import { TransferableOutput } from './outputs';
import { TransferableInput } from './inputs';
import { TransferableOperation } from './ops';
import { Credential } from './credentials';
import { AVMKeyChain } from './keychain';
import BN from 'bn.js';
/**
 * Class representing a base for all transactions.
 */
export declare class BaseTx {
    protected networkid: Buffer;
    protected blockchainid: Buffer;
    protected numouts: Buffer;
    protected outs: Array<TransferableOutput>;
    protected numins: Buffer;
    protected ins: Array<TransferableInput>;
    protected memo: Buffer;
    /**
       * Returns the id of the [[BaseTx]]
       */
    getTxType(): number;
    /**
       * Returns the NetworkID as a number
       */
    getNetworkID: () => number;
    /**
       * Returns the Buffer representation of the BlockchainID
       */
    getBlockchainID: () => Buffer;
    /**
       * Returns the array of [[TransferableInput]]s
       */
    getIns: () => Array<TransferableInput>;
    /**
       * Returns the array of [[TransferableOutput]]s
       */
    getOuts: () => Array<TransferableOutput>;
    /**
     * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the memo
     */
    getMemo: () => Buffer;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[BaseTx]], parses it, populates the class, and returns the length of the BaseTx in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[BaseTx]]
       *
       * @returns The length of the raw [[BaseTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[BaseTx]].
       */
    toBuffer(): Buffer;
    /**
       * Returns a base-58 representation of the [[BaseTx]].
       */
    toString(): string;
    /**
       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s
       *
       * @param msg A Buffer for the [[UnsignedTx]]
       * @param kc An [[AVMKeyChain]] used in signing
       *
       * @returns An array of [[Credential]]s
       */
    sign(msg: Buffer, kc: AVMKeyChain): Array<Credential>;
    /**
       * Class representing a BaseTx which is the foundation for all transactions.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field
       */
    constructor(networkid?: number, blockchainid?: Buffer, outs?: Array<TransferableOutput>, ins?: Array<TransferableInput>, memo?: Buffer);
}
export declare class CreateAssetTx extends BaseTx {
    protected name: string;
    protected symbol: string;
    protected denomination: Buffer;
    protected initialstate: InitialStates;
    /**
       * Returns the id of the [[CreateAssetTx]]
       */
    getTxType(): number;
    /**
       * Returns the array of array of [[Output]]s for the initial state
       */
    getInitialStates: () => InitialStates;
    /**
       * Returns the string representation of the name
       */
    getName: () => string;
    /**
       * Returns the string representation of the symbol
       */
    getSymbol: () => string;
    /**
       * Returns the numeric representation of the denomination
       */
    getDenomination: () => number;
    /**
     * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the denomination
     */
    getDenominationBuffer: () => Buffer;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[CreateAssetTx]], parses it, populates the class, and returns the length of the [[CreateAssetTx]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[CreateAssetTx]]
       *
       * @returns The length of the raw [[CreateAssetTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[CreateAssetTx]].
       */
    toBuffer(): Buffer;
    /**
       * Class representing an unsigned Create Asset transaction.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field
       * @param name String for the descriptive name of the asset
       * @param symbol String for the ticker symbol of the asset
       * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX
       * @param initialstate Optional [[InitialStates]] that represent the intial state of a created asset
       */
    constructor(networkid?: number, blockchainid?: Buffer, outs?: Array<TransferableOutput>, ins?: Array<TransferableInput>, memo?: Buffer, name?: string, symbol?: string, denomination?: number, initialstate?: InitialStates);
}
/**
 * Class representing an unsigned Operation transaction.
 */
export declare class OperationTx extends BaseTx {
    protected numOps: Buffer;
    protected ops: Array<TransferableOperation>;
    /**
       * Returns the id of the [[OperationTx]]
       */
    getTxType(): number;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[OperationTx]], parses it, populates the class, and returns the length of the [[OperationTx]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[OperationTx]]
       *
       * @returns The length of the raw [[OperationTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes: Buffer, offset?: number, codecid?: number): number;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[OperationTx]].
       */
    toBuffer(): Buffer;
    /**
       * Returns an array of [[TransferableOperation]]s in this transaction.
       */
    getOperations(): Array<TransferableOperation>;
    /**
       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s
       *
       * @param msg A Buffer for the [[UnsignedTx]]
       * @param kc An [[AVMKeyChain]] used in signing
       *
       * @returns An array of [[Credential]]s
       */
    sign(msg: Buffer, kc: AVMKeyChain): Array<Credential>;
    /**
       * Class representing an unsigned Operation transaction.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field
       * @param ops Array of [[Operation]]s used in the transaction
       */
    constructor(networkid?: number, blockchainid?: Buffer, outs?: Array<TransferableOutput>, ins?: Array<TransferableInput>, memo?: Buffer, ops?: Array<TransferableOperation>);
}
/**
 * Class representing an unsigned Import transaction.
 */
export declare class ImportTx extends BaseTx {
    protected numIns: Buffer;
    protected importIns: Array<TransferableInput>;
    /**
       * Returns the id of the [[ImportTx]]
       */
    getTxType(): number;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ImportTx]], parses it, populates the class, and returns the length of the [[ImportTx]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ImportTx]]
       *
       * @returns The length of the raw [[ImportTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes: Buffer, offset?: number, codecid?: number): number;
    /**
     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ImportTx]].
     */
    toBuffer(): Buffer;
    /**
       * Returns an array of [[TransferableInput]]s in this transaction.
       */
    getImportInputs(): Array<TransferableInput>;
    /**
       * Takes the bytes of an [[UnsignedTx]] and returns an array of [[Credential]]s
       *
       * @param msg A Buffer for the [[UnsignedTx]]
       * @param kc An [[AVMKeyChain]] used in signing
       *
       * @returns An array of [[Credential]]s
       */
    sign(msg: Buffer, kc: AVMKeyChain): Array<Credential>;
    /**
       * Class representing an unsigned Import transaction.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param memo Optional {@link https://github.com/feross/buffer|Buffer} for the memo field
       * @param importIns Array of [[TransferableInput]]s used in the transaction
       */
    constructor(networkid?: number, blockchainid?: Buffer, outs?: Array<TransferableOutput>, ins?: Array<TransferableInput>, memo?: Buffer, importIns?: Array<TransferableInput>);
}
/**
 * Class representing an unsigned Export transaction.
 */
export declare class ExportTx extends BaseTx {
    protected numOuts: Buffer;
    protected exportOuts: Array<TransferableOutput>;
    /**
       * Returns the id of the [[ExportTx]]
       */
    getTxType(): number;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[ExportTx]], parses it, populates the class, and returns the length of the [[ExportTx]] in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[ExportTx]]
       *
       * @returns The length of the raw [[ExportTx]]
       *
       * @remarks assume not-checksummed
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[ExportTx]].
       */
    toBuffer(): Buffer;
    /**
       * Returns an array of [[TransferableOutput]]s in this transaction.
       */
    getExportOutputs(): Array<TransferableOutput>;
    /**
       * Class representing an unsigned Export transaction.
       *
       * @param networkid Optional networkid, default 3
       * @param blockchainid Optional blockchainid, default Buffer.alloc(32, 16)
       * @param outs Optional array of the [[TransferableOutput]]s
       * @param ins Optional array of the [[TransferableInput]]s
       * @param exportOuts Array of [[TransferableOutputs]]s used in the transaction
       */
    constructor(networkid?: number, blockchainid?: Buffer, outs?: Array<TransferableOutput>, ins?: Array<TransferableInput>, memo?: Buffer, exportOuts?: Array<TransferableOutput>);
}
/**
 * Class representing an unsigned transaction.
 */
export declare class UnsignedTx {
    protected codecid: number;
    protected transaction: BaseTx;
    /**
       * Returns the CodecID as a number
       */
    getCodecID: () => number;
    /**
     * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID
      */
    getCodecIDBuffer: () => Buffer;
    /**
       * Returns the inputTotal as a BN
       */
    getInputTotal: (assetID: Buffer) => BN;
    /**
       * Returns the outputTotal as a BN
       */
    getOutputTotal: (assetID: Buffer) => BN;
    /**
       * Returns the number of burned tokens as a BN
       */
    getBurn: (assetID: Buffer) => BN;
    /**
       * Returns the Transaction
       */
    getTransaction: () => BaseTx;
    fromBuffer(bytes: Buffer, offset?: number): number;
    toBuffer(): Buffer;
    /**
       * Signs this [[UnsignedTx]] and returns signed [[Tx]]
       *
       * @param kc An [[AVMKeyChain]] used in signing
       *
       * @returns A signed [[Tx]]
       */
    sign(kc: AVMKeyChain): Tx;
    constructor(transaction?: BaseTx, codecid?: number);
}
/**
 * Class representing a signed transaction.
 */
export declare class Tx {
    protected unsignedTx: UnsignedTx;
    protected credentials: Array<Credential>;
    /**
       * Returns the [[UnsignedTx]]
       */
    getUnsignedTx: () => UnsignedTx;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[Tx]]
       * @param offset A number representing the starting point of the bytes to begin parsing
       *
       * @returns The length of the raw [[Tx]]
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[Tx]].
       */
    toBuffer(): Buffer;
    /**
       * Takes a base-58 string containing an [[Tx]], parses it, populates the class, and returns the length of the Tx in bytes.
       *
       * @param serialized A base-58 string containing a raw [[Tx]]
       *
       * @returns The length of the raw [[Tx]]
       *
       * @remarks
       * unlike most fromStrings, it expects the string to be serialized in cb58 format
       */
    fromString(serialized: string): number;
    /**
       * Returns a base-58 AVAX-serialized representation of the [[Tx]].
       *
       * @remarks
       * unlike most toStrings, this returns in cb58 serialization format
       */
    toString(): string;
    /**
       * Class representing a signed transaction.
       *
       * @param unsignedTx Optional [[UnsignedTx]]
       * @param signatures Optional array of [[Credential]]s
       */
    constructor(unsignedTx?: UnsignedTx, credentials?: Array<Credential>);
}
/**
 * Takes a buffer representing the output and returns the proper [[BaseTx]] instance.
 *
 * @param txtype The id of the transaction type
 *
 * @returns An instance of an [[BaseTx]]-extended class.
 */
export declare const SelectTxClass: (txtype: number, ...args: Array<any>) => BaseTx;
//# sourceMappingURL=tx.d.ts.map