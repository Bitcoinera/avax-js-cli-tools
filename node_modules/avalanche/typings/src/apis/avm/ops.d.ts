/**
 * @packageDocumentation
 * @module AVMAPI-Operations
 */
import { Buffer } from 'buffer/';
import { UTXOID, SigIdx } from './types';
import { NFTTransferOutput, OutputOwners } from './outputs';
/**
 * Takes a buffer representing the output and returns the proper [[Operation]] instance.
 *
 * @param opid A number representing the operation ID parsed prior to the bytes passed in
 *
 * @returns An instance of an [[Operation]]-extended class.
 */
export declare const SelectOperationClass: (opid: number, ...args: Array<any>) => Operation;
/**
 * A class representing an operation. All operation types must extend on this class.
 */
export declare abstract class Operation {
    protected sigCount: Buffer;
    protected sigIdxs: Array<SigIdx>;
    abstract getOperationID(): number;
    /**
       * Returns the array of [[SigIdx]] for this [[Operation]]
       */
    getSigIdxs: () => Array<SigIdx>;
    getCredentialID: () => number;
    /**
       * Creates and adds a [[SigIdx]] to the [[Operation]].
       *
       * @param addressIdx The index of the address to reference in the signatures
       * @param address The address of the source of the signature
       */
    addSignatureIdx: (addressIdx: number, address: Buffer) => void;
    fromBuffer(bytes: Buffer, offset?: number): number;
    toBuffer(): Buffer;
    static comparator: () => (a: Operation, b: Operation) => (1 | -1 | 0);
    constructor();
}
/**
 * A class which contains an [[Operation]] for transfers.
 *
 */
export declare class TransferableOperation {
    protected assetid: Buffer;
    protected utxoIDs: Array<UTXOID>;
    protected operation: Operation;
    /**
     * Returns a function used to sort an array of [[TransferableOperation]]s
     */
    static comparator: () => (a: TransferableOperation, b: TransferableOperation) => (1 | -1 | 0);
    fromBuffer(bytes: Buffer, offset?: number): number;
    toBuffer(): Buffer;
    /**
       * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.
       */
    getAssetID: () => Buffer;
    /**
       * Returns an array of UTXOIDs in this operation.
       */
    getUTXOIDs: () => Array<UTXOID>;
    /**
       * Returns the operation
       */
    getOperation: () => Operation;
    constructor(assetid?: Buffer, utxoids?: Array<UTXOID | string | Buffer>, operation?: Operation);
}
/**
 * A [[Operation]] class which specifies a NFT Mint Op.
 */
export declare class NFTMintOperation extends Operation {
    protected groupID: Buffer;
    protected payload: Buffer;
    protected outputOwners: Array<OutputOwners>;
    /**
     * Returns the operation ID.
     */
    getOperationID(): number;
    /**
     * Returns the payload.
     */
    getPayload: () => Buffer;
    /**
     * Returns the outputOwners.
     */
    getOutputOwners: () => Array<OutputOwners>;
    /**
     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOperation]] and returns the size of the output.
     */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
     * Returns the buffer representing the [[NFTMintOperation]] instance.
     */
    toBuffer(): Buffer;
    /**
     * Returns a base-58 string representing the [[NFTMintOperation]].
     */
    toString(): string;
    /**
     * An [[Operation]] class which contains an NFT on an assetID.
     *
     * @param groupID The group to which to issue the NFT Output
     * @param payload A {@link https://github.com/feross/buffer|Buffer} of the NFT payload
     * @param outputOwners An array of outputOwners
     */
    constructor(groupID?: number, payload?: Buffer, outputOwners?: Array<OutputOwners>);
}
/**
 * A [[Operation]] class which specifies a NFT Transfer Op.
 */
export declare class NFTTransferOperation extends Operation {
    protected output: NFTTransferOutput;
    /**
       * Returns the operation ID.
       */
    getOperationID(): number;
    getOutput: () => NFTTransferOutput;
    /**
       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOperation]] and returns the size of the output.
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns the buffer representing the [[NFTTransferOperation]] instance.
       */
    toBuffer(): Buffer;
    /**
       * Returns a base-58 string representing the [[NFTTransferOperation]].
       */
    toString(): string;
    /**
       * An [[Operation]] class which contains an NFT on an assetID.
       *
       * @param output An [[NFTTransferOutput]]
       */
    constructor(output?: NFTTransferOutput);
}
//# sourceMappingURL=ops.d.ts.map