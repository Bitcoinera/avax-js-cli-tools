"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UTXOSet = exports.UTXO = void 0;
/**
 * @packageDocumentation
 * @module AVMAPI-UTXOs
 */
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("../../utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const outputs_1 = require("./outputs");
const types_1 = require("./types");
const tx_1 = require("./tx");
const inputs_1 = require("./inputs");
const ops_1 = require("./ops");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Class for representing a single UTXO.
 */
class UTXO {
    /**
       * Class for representing a single UTXO.
       *
       * @param txid Optional {@link https://github.com/feross/buffer|Buffer} of transaction ID for the UTXO
       * @param txidx Optional {@link https://github.com/feross/buffer|Buffer} or number for the index of the transaction's [[Output]]
       * @param assetid Optional {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO
       * @param outputid Optional {@link https://github.com/feross/buffer|Buffer} or number of the output ID for the UTXO
       */
    constructor(codecID = types_1.AVMConstants.LATESTCODEC, txid = undefined, outputidx = undefined, assetid = undefined, output = undefined) {
        this.codecid = buffer_1.Buffer.alloc(2);
        this.txid = buffer_1.Buffer.alloc(32);
        this.outputidx = buffer_1.Buffer.alloc(4);
        this.assetid = buffer_1.Buffer.alloc(32);
        this.output = undefined;
        /**
           * Returns the numeric representation of the CodecID.
           */
        this.getCodecID = () => this.codecid.readUInt8(0);
        /**
         * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID
          */
        this.getCodecIDBuffer = () => this.codecid;
        /**
           * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.
           */
        this.getTxID = () => this.txid;
        /**
           * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.
           */
        this.getOutputIdx = () => this.outputidx;
        /**
           * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.
           */
        this.getAssetID = () => this.assetid;
        /**
           * Returns the UTXOID as a base-58 string (UTXOID is a string )
           */
        this.getUTXOID = () => bintools.bufferToB58(buffer_1.Buffer.concat([this.getTxID(), this.getOutputIdx()]));
        /**
           * Returns a reference to the output;
          */
        this.getOutput = () => this.output;
        if (typeof codecID !== 'undefined' && typeof txid !== 'undefined'
            && typeof outputidx !== 'undefined'
            && typeof assetid !== 'undefined'
            && typeof output !== 'undefined') {
            this.codecid.writeUInt8(codecID, 0);
            this.txid = txid;
            if (typeof outputidx === 'number') {
                this.outputidx.writeUInt32BE(outputidx, 0);
            }
            else if (outputidx instanceof buffer_1.Buffer) {
                this.outputidx = outputidx;
            }
            else {
                /* istanbul ignore next */
                throw new Error('Error - UTXO.constructor: outputidx parameter is not a '
                    + `number or a Buffer: ${outputidx}`);
            }
            this.assetid = assetid;
            this.output = output;
        }
    }
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[UTXO]], parses it, populates the class, and returns the length of the UTXO in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[UTXO]]
       */
    fromBuffer(bytes, offset = 0) {
        this.codecid = bintools.copyFrom(bytes, offset, offset + 2);
        offset += 2;
        this.txid = bintools.copyFrom(bytes, offset, offset + 32);
        offset += 32;
        this.outputidx = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        this.assetid = bintools.copyFrom(bytes, offset, offset + 32);
        offset += 32;
        const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.output = outputs_1.SelectOutputClass(outputid);
        return this.output.fromBuffer(bytes, offset);
    }
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[UTXO]].
       */
    toBuffer() {
        const outbuff = this.output.toBuffer();
        const outputidbuffer = buffer_1.Buffer.alloc(4);
        outputidbuffer.writeUInt32BE(this.output.getOutputID(), 0);
        const barr = [this.codecid, this.txid, this.outputidx, this.assetid, outputidbuffer, outbuff];
        return buffer_1.Buffer.concat(barr, this.codecid.length + this.txid.length
            + this.outputidx.length + this.assetid.length
            + outputidbuffer.length + outbuff.length);
    }
    /**
       * Takes a base-58 string containing an [[UTXO]], parses it, populates the class, and returns the length of the UTXO in bytes.
       *
       * @param serialized A base-58 string containing a raw [[UTXO]]
       *
       * @returns The length of the raw [[UTXO]]
       *
       * @remarks
       * unlike most fromStrings, it expects the string to be serialized in cb58 format
       */
    fromString(serialized) {
        /* istanbul ignore next */
        return this.fromBuffer(bintools.cb58Decode(serialized));
    }
    /**
       * Returns a base-58 representation of the [[UTXO]].
       *
       * @remarks
       * unlike most toStrings, this returns in cb58 serialization format
       */
    toString() {
        /* istanbul ignore next */
        return bintools.cb58Encode(this.toBuffer());
    }
}
exports.UTXO = UTXO;
/**
 * Class representing a set of [[UTXO]]s.
 */
class UTXOSet {
    constructor() {
        this.utxos = {};
        this.addressUTXOs = {}; // maps address to utxoids:locktime
        /**
           * Returns true if the [[UTXO]] is in the UTXOSet.
           *
           * @param utxo Either a [[UTXO]] a cb58 serialized string representing a UTXO
           */
        this.includes = (utxo) => {
            const utxoX = new UTXO();
            // force a copy
            if (typeof utxo === 'string') {
                utxoX.fromBuffer(bintools.cb58Decode(utxo));
            }
            else {
                utxoX.fromBuffer(utxo.toBuffer()); // forces a copy
            }
            const utxoid = utxoX.getUTXOID();
            return (utxoid in this.utxos);
        };
        /**
           * Adds a UTXO to the UTXOSet.
           *
           * @param utxo Either a [[UTXO]] an cb58 serialized string representing a UTXO
           * @param overwrite If true, if the UTXOID already exists, overwrite it... default false
           *
           * @returns A [[UTXO]] if one was added and undefined if nothing was added.
           */
        this.add = (utxo, overwrite = false) => {
            const utxovar = new UTXO();
            // force a copy
            if (typeof utxo === 'string') {
                utxovar.fromBuffer(bintools.cb58Decode(utxo));
            }
            else if (utxo instanceof UTXO) {
                utxovar.fromBuffer(utxo.toBuffer()); // forces a copy
            }
            else {
                /* istanbul ignore next */
                throw new Error(`Error - UTXOSet.add: utxo parameter is not a UTXO or string: ${utxo}`);
            }
            const utxoid = utxovar.getUTXOID();
            if (!(utxoid in this.utxos) || overwrite === true) {
                this.utxos[utxoid] = utxovar;
                const addresses = utxovar.getOutput().getAddresses();
                const locktime = utxovar.getOutput().getLocktime();
                for (let i = 0; i < addresses.length; i++) {
                    const address = addresses[i].toString('hex');
                    if (!(address in this.addressUTXOs)) {
                        this.addressUTXOs[address] = {};
                    }
                    this.addressUTXOs[address][utxoid] = locktime;
                }
                return utxovar;
            }
            return undefined;
        };
        /**
           * Adds an array of [[UTXO]]s to the [[UTXOSet]].
           *
           * @param utxo Either a [[UTXO]] an cb58 serialized string representing a UTXO
           * @param overwrite If true, if the UTXOID already exists, overwrite it... default false
           *
           * @returns An array of UTXOs which were added.
           */
        this.addArray = (utxos, overwrite = false) => {
            const added = [];
            for (let i = 0; i < utxos.length; i++) {
                const result = this.add(utxos[i], overwrite);
                if (typeof result !== 'undefined') {
                    added.push(result);
                }
            }
            return added;
        };
        /**
           * Removes a [[UTXO]] from the [[UTXOSet]] if it exists.
           *
           * @param utxo Either a [[UTXO]] an cb58 serialized string representing a UTXO
           *
           * @returns A [[UTXO]] if it was removed and undefined if nothing was removed.
           */
        this.remove = (utxo) => {
            const utxovar = new UTXO();
            // force a copy
            if (typeof utxo === 'string') {
                utxovar.fromBuffer(bintools.cb58Decode(utxo));
            }
            else {
                utxovar.fromBuffer(utxo.toBuffer()); // forces a copy
            }
            const utxoid = utxovar.getUTXOID();
            if (!(utxoid in this.utxos)) {
                return undefined;
            }
            delete this.utxos[utxoid];
            const addresses = Object.keys(this.addressUTXOs);
            for (let i = 0; i < addresses.length; i++) {
                if (utxoid in this.addressUTXOs[addresses[i]]) {
                    delete this.addressUTXOs[addresses[i]][utxoid];
                }
            }
            return utxovar;
        };
        /**
           * Removes an array of [[UTXO]]s to the [[UTXOSet]].
           *
           * @param utxo Either a [[UTXO]] an cb58 serialized string representing a UTXO
           * @param overwrite If true, if the UTXOID already exists, overwrite it... default false
           *
           * @returns An array of UTXOs which were removed.
           */
        this.removeArray = (utxos) => {
            const removed = [];
            for (let i = 0; i < utxos.length; i++) {
                const result = this.remove(utxos[i]);
                if (typeof result !== 'undefined') {
                    removed.push(result);
                }
            }
            return removed;
        };
        /**
           * Gets a [[UTXO]] from the [[UTXOSet]] by its UTXOID.
           *
           * @param utxoid String representing the UTXOID
           *
           * @returns A [[UTXO]] if it exists in the set.
           */
        this.getUTXO = (utxoid) => this.utxos[utxoid];
        /**
           * Gets all the [[UTXO]]s, optionally that match with UTXOIDs in an array
           *
           * @param utxoids An optional array of UTXOIDs, returns all [[UTXO]]s if not provided
           *
           * @returns An array of [[UTXO]]s.
           */
        this.getAllUTXOs = (utxoids = undefined) => {
            let results = [];
            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {
                for (let i = 0; i < utxoids.length; i++) {
                    if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {
                        results.push(this.utxos[utxoids[i]]);
                    }
                }
            }
            else {
                results = Object.values(this.utxos);
            }
            return results;
        };
        /**
           * Gets all the [[UTXO]]s as strings, optionally that match with UTXOIDs in an array.
           *
           * @param utxoids An optional array of UTXOIDs, returns all [[UTXO]]s if not provided
           *
           * @returns An array of [[UTXO]]s as cb58 serialized strings.
           */
        this.getAllUTXOStrings = (utxoids = undefined) => {
            const results = [];
            const utxos = Object.keys(this.utxos);
            if (typeof utxoids !== 'undefined' && Array.isArray(utxoids)) {
                for (let i = 0; i < utxoids.length; i++) {
                    if (utxoids[i] in this.utxos) {
                        results.push(this.utxos[utxoids[i]].toString());
                    }
                }
            }
            else {
                for (const u of utxos) {
                    results.push(this.utxos[u].toString());
                }
            }
            return results;
        };
        /**
           * Given an address or array of addresses, returns all the UTXOIDs for those addresses
           *
           * @param address An array of address {@link https://github.com/feross/buffer|Buffer}s
           * @param spendable If true, only retrieves UTXOIDs whose locktime has passed
           *
           * @returns An array of addresses.
           */
        this.getUTXOIDs = (addresses = undefined, spendable = true) => {
            if (typeof addresses !== 'undefined') {
                const results = [];
                const now = types_1.UnixNow();
                for (let i = 0; i < addresses.length; i++) {
                    if (addresses[i].toString('hex') in this.addressUTXOs) {
                        const entries = Object.entries(this.addressUTXOs[addresses[i].toString('hex')]);
                        for (const [utxoid, locktime] of entries) {
                            if ((results.indexOf(utxoid) === -1
                                && (spendable && locktime.lte(now)))
                                || !spendable) {
                                results.push(utxoid);
                            }
                        }
                    }
                }
                return results;
            }
            return Object.keys(this.utxos);
        };
        /**
           * Gets the addresses in the [[UTXOSet]] and returns an array of {@link https://github.com/feross/buffer|Buffer}.
           */
        this.getAddresses = () => Object.keys(this.addressUTXOs)
            .map((k) => buffer_1.Buffer.from(k, 'hex'));
        /**
           * Returns the balance of a set of addresses in the UTXOSet.
           *
           * @param addresses An array of addresses
           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized representation of an AssetID
           * @param asOf The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
           *
           * @returns Returns the total balance as a {@link https://github.com/indutny/bn.js/|BN}.
           */
        this.getBalance = (addresses, assetID, asOf = undefined) => {
            const utxoids = this.getUTXOIDs(addresses);
            const utxos = this.getAllUTXOs(utxoids);
            let spend = new bn_js_1.default(0);
            let asset;
            if (typeof assetID === 'string') {
                asset = bintools.cb58Decode(assetID);
            }
            else {
                asset = assetID;
            }
            for (let i = 0; i < utxos.length; i++) {
                if (utxos[i].getOutput() instanceof outputs_1.AmountOutput
                    && utxos[i].getAssetID().toString('hex') === asset.toString('hex')
                    && utxos[i].getOutput().meetsThreshold(addresses, asOf)) {
                    spend = spend.add(utxos[i].getOutput().getAmount());
                }
            }
            return spend;
        };
        /**
           * Gets all the Asset IDs, optionally that match with Asset IDs in an array
           *
           * @param utxoids An optional array of Addresses as string or Buffer, returns all Asset IDs if not provided
           *
           * @returns An array of {@link https://github.com/feross/buffer|Buffer} representing the Asset IDs.
           */
        this.getAssetIDs = (addresses = undefined) => {
            const results = new Set();
            let utxoids = [];
            if (typeof addresses !== 'undefined') {
                utxoids = this.getUTXOIDs(addresses);
            }
            else {
                utxoids = this.getUTXOIDs();
            }
            for (let i = 0; i < utxoids.length; i++) {
                if (utxoids[i] in this.utxos && !(utxoids[i] in results)) {
                    results.add(this.utxos[utxoids[i]].getAssetID());
                }
            }
            return [...results];
        };
        /**
           * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own
           * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).
           *
           * @param networkid The number representing NetworkID of the node
           * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
           * @param amount The amount of AVAX to be spent in $nAVAX
           * @param toAddresses The addresses to send the funds
           * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}
           * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs
           * @param assetid {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO
           * @param memo Optional contains arbitrary bytes, up to 256 bytes
           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
           * @param locktime Optional. The locktime field created in the resulting outputs
           * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
           * @param outputID Optional. The outputID used for this transaction, must implement AmountOutput, default AVMConstants.SECPOUTPUTID
           *
           * @returns An unsigned transaction created from the passed in parameters.
           *
           */
        this.buildBaseTx = (networkid, blockchainid, amount, toAddresses, fromAddresses, changeAddresses, assetID, memo = undefined, asOf = types_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1, outputID = types_1.AVMConstants.SECPOUTPUTID) => {
            const zero = new bn_js_1.default(0);
            let spendamount = zero.clone();
            const utxos = this.getAllUTXOs(this.getUTXOIDs(fromAddresses));
            let change = zero.clone();
            const outs = [];
            const ins = [];
            if (!(outputs_1.SelectOutputClass(outputID) instanceof outputs_1.AmountOutput)) {
                /* istanbul ignore next */
                throw new Error('Error - UTXOSet.buildBaseTx: outputID does not '
                    + `implement AmountOutput: ${outputID}`);
            }
            if (!amount.eq(zero)) {
                const sndout = outputs_1.SelectOutputClass(outputID, amount, toAddresses, locktime, threshold);
                const mainXferout = new outputs_1.TransferableOutput(assetID, sndout);
                outs.push(mainXferout);
                for (let i = 0; i < utxos.length && spendamount.lt(amount); i++) {
                    if (utxos[i].getOutput() instanceof outputs_1.AmountOutput
                        && (assetID === undefined
                            || utxos[i].getAssetID().compare(assetID) === 0)
                        && utxos[i].getOutput().meetsThreshold(fromAddresses, asOf)) {
                        const output = utxos[i].getOutput();
                        const amt = output.getAmount().clone();
                        spendamount = spendamount.add(amt);
                        change = spendamount.sub(amount);
                        change = change.gt(zero) ? change : zero.clone();
                        const txid = utxos[i].getTxID();
                        const outputidx = utxos[i].getOutputIdx();
                        const input = new inputs_1.SecpInput(amt);
                        const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);
                        const spenders = output.getSpenders(fromAddresses, asOf);
                        for (let j = 0; j < spenders.length; j++) {
                            const idx = output.getAddressIdx(spenders[j]);
                            if (idx === -1) {
                                /* istanbul ignore next */
                                throw new Error('Error - UTXOSet.buildBaseTx: no such '
                                    + `address in output: ${spenders[j]}`);
                            }
                            xferin.getInput().addSignatureIdx(idx, spenders[j]);
                        }
                        ins.push(xferin);
                        if (change.gt(zero)) {
                            if (assetID) {
                                const changeout = outputs_1.SelectOutputClass(outputID, change, changeAddresses, zero.clone(), 1);
                                const xferout = new outputs_1.TransferableOutput(assetID, changeout);
                                outs.push(xferout);
                            }
                            break;
                        }
                        /* istanbul ignore next */
                        if (spendamount.gte(amount)) {
                            break;
                        }
                    }
                }
                if (spendamount.lt(amount)) {
                    /* istanbul ignore next */
                    throw new Error('Error - UTXOSet.buildBaseTx: insufficient '
                        + 'funds to create the transaction');
                }
            }
            const baseTx = new tx_1.BaseTx(networkid, blockchainid, outs, ins, memo);
            return new tx_1.UnsignedTx(baseTx);
        };
        /**
           * Creates an unsigned transaction. For more granular control, you may create your own
           * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).
           *
           * @param networkid The number representing NetworkID of the node
           * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
           * @param avaxAssetId The AVAX Asset ID
           * @param fee The amount of AVAX to be paid for fees, in $nAVAX
           * @param feeSenderAddresses The addresses to send the fees
           * @param initialState The [[InitialStates]] that represent the intial state of a created asset
           * @param name String for the descriptive name of the asset
           * @param symbol String for the ticker symbol of the asset
           * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX
           * @param memo Optional contains arbitrary bytes, up to 256 bytes
           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
           *
           * @returns An unsigned transaction created from the passed in parameters.
           *
           */
        this.buildCreateAssetTx = (networkid, blockchainid, avaxAssetID, fee, feeSenderAddresses, initialState, name, symbol, denomination, memo = undefined, asOf = types_1.UnixNow()) => {
            // Cheating and using buildBaseTx to get Ins and Outs for fees.
            // Fees are burned, so no toAddresses, only fromAddresses and changeAddresses, both are the feeSenderAddresses
            let utx = this.buildBaseTx(networkid, blockchainid, fee, [], feeSenderAddresses, feeSenderAddresses, avaxAssetID, undefined, asOf);
            let ins = utx.getTransaction().getIns();
            let outs = utx.getTransaction().getOuts();
            let CAtx = new tx_1.CreateAssetTx(networkid, blockchainid, outs, ins, memo, name, symbol, denomination, initialState);
            return new tx_1.UnsignedTx(CAtx);
        };
        /**
         * Creates an unsigned transaction. For more granular control, you may create your own
          * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).
          *
          * @param networkid The number representing NetworkID of the node
          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
          * @param avaxAssetId The AVAX Asset ID
          * @param fee The amount of AVAX to be paid for fees, in $nAVAX
          * @param feePayingAddresses The addresses to pay the fees
          * @param minterSets The minters and thresholds required to mint this nft asset
          * @param name String for the descriptive name of the nft asset
          * @param symbol String for the ticker symbol of the nft asset
          * @param memo Optional contains arbitrary bytes, up to 256 bytes
          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
          * @param locktime Optional. The locktime field created in the resulting mint output
          *
          * @returns An unsigned transaction created from the passed in parameters.
          *
          */
        this.buildCreateNFTAssetTx = (networkid, blockchainid, avaxAssetID, fee, feePayingAddresses, minterSets, name, symbol, memo = undefined, asOf = types_1.UnixNow(), locktime = undefined) => {
            let initialState = new types_1.InitialStates();
            let utx = this.buildBaseTx(networkid, blockchainid, fee, [], feePayingAddresses, feePayingAddresses, avaxAssetID, undefined, asOf);
            let ins = utx.getTransaction().getIns();
            let outs = utx.getTransaction().getOuts();
            for (let i = 0; i < minterSets.length; i++) {
                let nftMintOutput = new outputs_1.NFTMintOutput(i, minterSets[i].getMinters(), locktime, minterSets[i].getThreshold());
                initialState.addOutput(nftMintOutput, types_1.AVMConstants.NFTFXID);
            }
            let denomination = 0; // NFTs are non-fungible
            let CAtx = new tx_1.CreateAssetTx(networkid, blockchainid, outs, ins, memo, name, symbol, denomination, initialState);
            return new tx_1.UnsignedTx(CAtx);
        };
        /**
         * Creates an unsigned NFT mint transaction. For more granular control, you may create your own
          * [[NFTMintTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
          *
          * @param networkid The number representing NetworkID of the node
          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
          * @param feeAssetID The assetID for the AVAX fee to be paid
          * @param fee The amount of AVAX to be paid for fees, in $nAVAX
          * @param feeSenderAddresses The addresses to send the fees
          * @param outputOwners:Array An array of OutputOwners
          * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT
          * @param utxoids An array of strings for the NFTs being transferred
          * @param groupID Optional. The group this NFT is issued to.
          * @param payload Optional. Data for NFT Payload.
          * @param memo Optional contains arbitrary bytes, up to 256 bytes
          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
          * @param locktime Optional. The locktime field created in the resulting mint output
          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
          *
          * @returns An unsigned transaction created from the passed in parameters.
          *
          */
        this.buildCreateNFTMintTx = (networkid, blockchainid, feeAssetID, fee, feeSenderAddresses, to, fromAddresses, utxoids, groupID = 0, payload = undefined, memo = undefined, asOf = types_1.UnixNow(), locktime, threshold = 1) => {
            let utx = this.buildBaseTx(networkid, blockchainid, fee, [], feeSenderAddresses, feeSenderAddresses, feeAssetID, undefined, asOf);
            let ins = utx.getTransaction().getIns();
            let outs = utx.getTransaction().getOuts();
            let ops = [];
            if (threshold > to.length) {
                /* istanbul ignore next */
                throw new Error(`Error - UTXOSet.buildCreateNFTMintTx: threshold is greater than number of addresses`);
            }
            let nftMintOperation = new ops_1.NFTMintOperation(groupID, payload, [new outputs_1.OutputOwners(to, locktime, threshold)]);
            for (let i = 0; i < utxoids.length; i++) {
                let utxo = this.getUTXO(utxoids[i]);
                let out = utxo.getOutput();
                let spenders = out.getSpenders(fromAddresses, asOf);
                for (let j = 0; j < spenders.length; j++) {
                    let idx;
                    idx = out.getAddressIdx(spenders[j]);
                    if (idx == -1) {
                        /* istanbul ignore next */
                        throw new Error(`Error - UTXOSet.buildCreateNFTMintTx: no such address in output: ${spenders[j]}`);
                    }
                    nftMintOperation.addSignatureIdx(idx, spenders[j]);
                }
                let transferableOperation = new ops_1.TransferableOperation(utxo.getAssetID(), utxoids, nftMintOperation);
                ops.push(transferableOperation);
            }
            let operationTx = new tx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);
            return new tx_1.UnsignedTx(operationTx);
        };
        /**
         * Creates an unsigned NFT transfer transaction. For more granular control, you may create your own
          * [[NFTTransferOperation]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
          *
          * @param networkid The number representing NetworkID of the node
          * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
          * @param feeAssetID The assetID for the AVAX fee to be paid
          * @param fee The amount of AVAX to be paid for fees, in $nAVAX
          * @param feeSenderAddresses The addresses to send the fees
          * @param toAddresses An array of {@link https://github.com/feross/buffer|Buffer}s which indicate who recieves the NFT
          * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT
          * @param utxoids An array of strings for the NFTs being transferred
          * @param memo Optional contains arbitrary bytes, up to 256 bytes
          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
          * @param locktime Optional. The locktime field created in the resulting outputs
          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
          * @returns An unsigned transaction created from the passed in parameters.
          *
          */
        this.buildNFTTransferTx = (networkid, blockchainid, feeAssetID, fee, feeSenderAddresses, toAddresses, fromAddresses, utxoids, memo = undefined, asOf = types_1.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => {
            // Cheating and using buildBaseTx to get Ins and Outs for fees.
            // Fees are burned, so no toAddresses, only feeSenderAddresses and changeAddresses, both are the feeSenderAddresses
            const utx = this.buildBaseTx(networkid, blockchainid, fee, [], feeSenderAddresses, feeSenderAddresses, feeAssetID, undefined, asOf);
            const ins = utx.getTransaction().getIns();
            const outs = utx.getTransaction().getOuts();
            const ops = [];
            for (let i = 0; i < utxoids.length; i++) {
                const utxo = this.getUTXO(utxoids[i]);
                const out = utxo.getOutput();
                const spenders = out.getSpenders(fromAddresses, asOf);
                const outbound = new outputs_1.NFTTransferOutput(out.getGroupID(), out.getPayload(), toAddresses, locktime, threshold);
                const op = new ops_1.NFTTransferOperation(outbound);
                for (let j = 0; j < spenders.length; j++) {
                    const idx = out.getAddressIdx(spenders[j]);
                    if (idx === -1) {
                        /* istanbul ignore next */
                        throw new Error('Error - UTXOSet.buildNFTTransferTx: '
                            + `no such address in output: ${spenders[j]}`);
                    }
                    op.addSignatureIdx(idx, spenders[j]);
                }
                const xferop = new ops_1.TransferableOperation(utxo.getAssetID(), [utxoids[i]], op);
                ops.push(xferop);
            }
            const OpTx = new tx_1.OperationTx(networkid, blockchainid, outs, ins, memo, ops);
            return new tx_1.UnsignedTx(OpTx);
        };
        /**
        * In-Development, do not use: Creates an unsigned ImportTx transaction.
        *
        * @param networkid The number representing NetworkID of the node
        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
        * @param feeAssetID The assetID for the AVAX fee to be paid
        * @param fee The amount of AVAX to be paid for fees, in $nAVAX
        * @param feeSenderAddresses The addresses to send the fees
        * @param importIns An array of [[TransferableInput]]s being imported
        * @param memo Optional contains arbitrary bytes, up to 256 bytes
        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
        * @returns An unsigned transaction created from the passed in parameters.
        *
        */
        this.buildImportTx = (networkid, blockchainid, feeAssetID, fee, feeSenderAddresses, importIns, memo = undefined, asOf = types_1.UnixNow()) => {
            // Cheating and using buildBaseTx to get Ins and Outs for fees.
            // Fees are burned, so no toAddresses, only feeSenderAddresses and changeAddresses, both are the feeSenderAddresses
            const utx = this.buildBaseTx(networkid, blockchainid, fee, [], feeSenderAddresses, feeSenderAddresses, feeAssetID, undefined, asOf);
            const ins = utx.getTransaction().getIns();
            const outs = utx.getTransaction().getOuts();
            const importTx = new tx_1.ImportTx(networkid, blockchainid, outs, ins, memo, importIns);
            return new tx_1.UnsignedTx(importTx);
        };
        /**
        * In-Development, do not use: Creates an unsigned ExportTx transaction.
        *
        * @param networkid The number representing NetworkID of the node
        * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
        * @param feeAssetID The assetID for the AVAX fee to be paid
        * @param fee The amount of AVAX to be paid for fees, in $nAVAX
        * @param feeSenderAddresses The addresses to send the fees
        * @param utxoids An array of strings for the [[TransferableOutput]]s being exported
        * @param memo Optional contains arbitrary bytes, up to 256 bytes
        * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
        * @returns An unsigned transaction created from the passed in parameters.
        *
        */
        this.buildExportTx = (networkid, blockchainid, feeAssetID, fee, feeSenderAddresses, utxoids, memo = undefined, asOf = types_1.UnixNow()) => {
            // Cheating and using buildBaseTx to get Ins and Outs for fees.
            // Fees are burned, so no toAddresses, only feeSenderAddresses and changeAddresses, both are the feeSenderAddresses
            const utx = this.buildBaseTx(networkid, blockchainid, fee, [], feeSenderAddresses, feeSenderAddresses, feeAssetID, undefined, asOf);
            const ins = utx.getTransaction().getIns();
            const outs = utx.getTransaction().getOuts();
            const exportOuts = [];
            for (let i = 0; i < utxoids.length; i++) {
                const utxo = this.getUTXO(utxoids[i]);
                const assetID = utxo.getAssetID();
                const output = utxo.getOutput();
                const amt = output.getAmount().clone();
                const txid = utxo.getTxID();
                const outputidx = utxo.getOutputIdx();
                const input = new inputs_1.SecpInput(amt);
                const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);
                const fromAddresses = output.getAddresses(); // Verify correct approach
                const spenders = output.getSpenders(fromAddresses, asOf);
                for (let j = 0; j < spenders.length; j++) {
                    const idx = output.getAddressIdx(spenders[j]);
                    if (idx === -1) {
                        /* istanbul ignore next */
                        throw new Error('Error - UTXOSet.buildBaseTx: no such '
                            + `address in output: ${spenders[j]}`);
                    }
                    xferin.getInput().addSignatureIdx(idx, spenders[j]);
                }
                ins.push(xferin);
                const xferOut = new outputs_1.TransferableOutput(assetID, output);
                exportOuts.push(xferOut);
            }
            const exportTx = new tx_1.ExportTx(networkid, blockchainid, outs, ins, memo, exportOuts);
            return new tx_1.UnsignedTx(exportTx);
        };
        /**
           * Returns a new set with copy of UTXOs in this and set parameter.
           *
           * @param utxoset The [[UTXOSet]] to merge with this one
           * @param hasUTXOIDs Will subselect a set of [[UTXO]]s which have the UTXOIDs provided in this array, defults to all UTXOs
           *
           * @returns A new UTXOSet that contains all the filtered elements.
           */
        this.merge = (utxoset, hasUTXOIDs = undefined) => {
            const results = new UTXOSet();
            const utxos1 = this.getAllUTXOs(hasUTXOIDs);
            const utxos2 = utxoset.getAllUTXOs(hasUTXOIDs);
            const process = (utxo) => {
                results.add(utxo);
            };
            utxos1.forEach(process);
            utxos2.forEach(process);
            return results;
        };
        /**
           * Set intersetion between this set and a parameter.
           *
           * @param utxoset The set to intersect
           *
           * @returns A new UTXOSet containing the intersection
           */
        this.intersection = (utxoset) => {
            const us1 = this.getUTXOIDs();
            const us2 = utxoset.getUTXOIDs();
            const results = us1.filter((utxoid) => us2.includes(utxoid));
            return this.merge(utxoset, results);
        };
        /**
           * Set difference between this set and a parameter.
           *
           * @param utxoset The set to difference
           *
           * @returns A new UTXOSet containing the difference
           */
        this.difference = (utxoset) => {
            const us1 = this.getUTXOIDs();
            const us2 = utxoset.getUTXOIDs();
            const results = us1.filter((utxoid) => !us2.includes(utxoid));
            return this.merge(utxoset, results);
        };
        /**
           * Set symmetrical difference between this set and a parameter.
           *
           * @param utxoset The set to symmetrical difference
           *
           * @returns A new UTXOSet containing the symmetrical difference
           */
        this.symDifference = (utxoset) => {
            const us1 = this.getUTXOIDs();
            const us2 = utxoset.getUTXOIDs();
            const results = us1.filter((utxoid) => !us2.includes(utxoid))
                .concat(us2.filter((utxoid) => !us1.includes(utxoid)));
            return this.merge(utxoset, results);
        };
        /**
           * Set union between this set and a parameter.
           *
           * @param utxoset The set to union
           *
           * @returns A new UTXOSet containing the union
           */
        this.union = (utxoset) => this.merge(utxoset);
        /**
           * Merges a set by the rule provided.
           *
           * @param utxoset The set to merge by the MergeRule
           * @param mergeRule The [[MergeRule]] to apply
           *
           * @returns A new UTXOSet containing the merged data
           *
           * @remarks
           * The merge rules are as follows:
           *   * "intersection" - the intersection of the set
           *   * "differenceSelf" - the difference between the existing data and new set
           *   * "differenceNew" - the difference between the new data and the existing set
           *   * "symDifference" - the union of the differences between both sets of data
           *   * "union" - the unique set of all elements contained in both sets
           *   * "unionMinusNew" - the unique set of all elements contained in both sets, excluding values only found in the new set
           *   * "unionMinusSelf" - the unique set of all elements contained in both sets, excluding values only found in the existing set
           */
        this.mergeByRule = (utxoset, mergeRule) => {
            let uSet;
            switch (mergeRule) {
                case 'intersection':
                    return this.intersection(utxoset);
                case 'differenceSelf':
                    return this.difference(utxoset);
                case 'differenceNew':
                    return utxoset.difference(this);
                case 'symDifference':
                    return this.symDifference(utxoset);
                case 'union':
                    return this.union(utxoset);
                case 'unionMinusNew':
                    uSet = this.union(utxoset);
                    return uSet.difference(utxoset);
                case 'unionMinusSelf':
                    uSet = this.union(utxoset);
                    return uSet.difference(this);
                default:
                    throw new Error(`Error - UTXOSet.mergeByRule: bad MergeRule - ${mergeRule}`);
            }
        };
    }
}
exports.UTXOSet = UTXOSet;
//# sourceMappingURL=data:application/json;base64,