"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnixNow = exports.InitialStates = exports.UTXOID = exports.Address = exports.Signature = exports.SigIdx = exports.AVMConstants = void 0;
/**
 * @packageDocumentation
 * @module AVMAPI-Types
 */
const buffer_1 = require("buffer/");
const bn_js_1 = __importDefault(require("bn.js"));
const bintools_1 = __importDefault(require("../../utils/bintools"));
const types_1 = require("../../utils/types");
const outputs_1 = require("./outputs");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
class AVMConstants {
}
exports.AVMConstants = AVMConstants;
AVMConstants.LATESTCODEC = 0;
AVMConstants.ONEAVAX = new bn_js_1.default(1000000000);
AVMConstants.DECIAVAX = AVMConstants.ONEAVAX.div(new bn_js_1.default(10));
AVMConstants.CENTIAVAX = AVMConstants.ONEAVAX.div(new bn_js_1.default(100));
AVMConstants.MILLIAVAX = AVMConstants.ONEAVAX.div(new bn_js_1.default(1000));
AVMConstants.MICROAVAX = AVMConstants.ONEAVAX.div(new bn_js_1.default(1000000));
AVMConstants.SECPFXID = 0;
AVMConstants.NFTFXID = 1;
AVMConstants.SECPOUTPUTID = 7;
AVMConstants.NFTXFEROUTPUTID = 11;
AVMConstants.NFTMINTOUTPUTID = 10;
AVMConstants.SECPINPUTID = 5;
AVMConstants.NFTMINTOPID = 12;
AVMConstants.NFTXFEROP = 13;
AVMConstants.BASETX = 0;
AVMConstants.CREATEASSETTX = 1;
AVMConstants.OPERATIONTX = 2;
AVMConstants.IMPORTTX = 3;
AVMConstants.EXPORTTX = 4;
AVMConstants.SECPCREDENTIAL = 9;
AVMConstants.NFTCREDENTIAL = 14;
AVMConstants.ASSETIDLEN = 32;
AVMConstants.BLOCKCHAINIDLEN = 32;
AVMConstants.SYMBOLMAXLEN = 4;
AVMConstants.ASSETNAMELEN = 128;
AVMConstants.ADDRESSLENGTH = 20;
/**
 * Type representing a [[Signature]] index used in [[Input]]
 */
class SigIdx extends types_1.NBytes {
    /**
       * Type representing a [[Signature]] index used in [[Input]]
       */
    constructor() {
        super();
        /**
           * Sets the source address for the signature
           */
        this.setSource = (address) => {
            this.source = address;
        };
        /**
           * Retrieves the source address for the signature
           */
        this.getSource = () => this.source;
        this.bytes = buffer_1.Buffer.alloc(4);
        this.bsize = 4;
    }
}
exports.SigIdx = SigIdx;
/**
 * Signature for a [[Tx]]
 */
class Signature extends types_1.NBytes {
    /**
       * Signature for a [[Tx]]
       */
    constructor() {
        super();
        this.bytes = buffer_1.Buffer.alloc(65);
        this.bsize = 65;
    }
}
exports.Signature = Signature;
/**
 * Class for representing an address used in [[Output]] types
 */
class Address extends types_1.NBytes {
    /**
       * Class for representing an address used in [[Output]] types
       */
    constructor() {
        super();
        this.bytes = buffer_1.Buffer.alloc(20);
        this.bsize = 20;
    }
    /**
       * Returns a base-58 representation of the [[Address]].
       */
    toString() {
        return bintools.cb58Encode(this.toBuffer());
    }
    /**
       * Takes a base-58 string containing an [[Address]], parses it, populates the class, and returns the length of the Address in bytes.
       *
       * @param bytes A base-58 string containing a raw [[Address]]
       *
       * @returns The length of the raw [[Address]]
       */
    fromString(addr) {
        const addrbuff = bintools.b58ToBuffer(addr);
        if (addrbuff.length === 24 && bintools.validateChecksum(addrbuff)) {
            const newbuff = bintools.copyFrom(addrbuff, 0, addrbuff.length - 4);
            if (newbuff.length === 20) {
                this.bytes = newbuff;
            }
        }
        else if (addrbuff.length === 24) {
            throw new Error('Error - Address.fromString: invalid checksum on address');
        }
        else if (addrbuff.length === 20) {
            this.bytes = addrbuff;
        }
        else {
            /* istanbul ignore next */
            throw new Error('Error - Address.fromString: invalid address');
        }
        return this.getSize();
    }
}
exports.Address = Address;
/**
   * Returns a function used to sort an array of [[Address]]es
   */
Address.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());
/**
 * Class for representing a UTXOID used in [[TransferableOp]] types
 */
class UTXOID extends types_1.NBytes {
    /**
       * Class for representing a UTXOID used in [[TransferableOp]] types
       */
    constructor() {
        super();
        this.bytes = buffer_1.Buffer.alloc(36);
        this.bsize = 36;
    }
    /**
       * Returns a base-58 representation of the [[UTXOID]].
       */
    toString() {
        return bintools.cb58Encode(this.toBuffer());
    }
    /**
       * Takes a base-58 string containing an [[UTXOID]], parses it, populates the class, and returns the length of the UTXOID in bytes.
       *
       * @param bytes A base-58 string containing a raw [[UTXOID]]
       *
       * @returns The length of the raw [[UTXOID]]
       */
    fromString(utxoid) {
        const utxoidbuff = bintools.b58ToBuffer(utxoid);
        if (utxoidbuff.length === 40 && bintools.validateChecksum(utxoidbuff)) {
            const newbuff = bintools.copyFrom(utxoidbuff, 0, utxoidbuff.length - 4);
            if (newbuff.length === 36) {
                this.bytes = newbuff;
            }
        }
        else if (utxoidbuff.length === 40) {
            throw new Error('Error - UTXOID.fromString: invalid checksum on address');
        }
        else if (utxoidbuff.length === 36) {
            this.bytes = utxoidbuff;
        }
        else {
            /* istanbul ignore next */
            throw new Error('Error - UTXOID.fromString: invalid address');
        }
        return this.getSize();
    }
}
exports.UTXOID = UTXOID;
/**
   * Returns a function used to sort an array of [[UTXOID]]s
   */
UTXOID.comparator = () => (a, b) => buffer_1.Buffer.compare(a.toBuffer(), b.toBuffer());
/**
 * Class for creating initial output states used in asset creation
 */
class InitialStates {
    constructor() {
        this.fxs = {};
    }
    /**
       *
       * @param out The output state to add to the collection
       * @param fxid The FxID that will be used for this output, default AVMConstants.SECPFXID
       */
    addOutput(out, fxid = AVMConstants.SECPFXID) {
        if (!(fxid in this.fxs)) {
            this.fxs[fxid] = [];
        }
        this.fxs[fxid].push(out);
    }
    fromBuffer(bytes, offset = 0) {
        const result = [];
        const klen = bintools.copyFrom(bytes, offset, offset + 4);
        offset += 4;
        const klennum = klen.readUInt32BE(0);
        for (let i = 0; i < klennum; i++) {
            const fxidbuff = bintools.copyFrom(bytes, offset, offset + 4);
            offset += 4;
            const fxid = fxidbuff.readUInt32BE(0);
            result[fxid] = [];
            const statelenbuff = bintools.copyFrom(bytes, offset, offset + 4);
            offset += 4;
            const statelen = statelenbuff.readUInt32BE(0);
            for (let j = 0; j < statelen; j++) {
                const outputid = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
                offset += 4;
                const out = outputs_1.SelectOutputClass(outputid);
                offset = out.fromBuffer(bytes, offset);
                result[fxid].push(out);
            }
        }
        this.fxs = result;
        return offset;
    }
    toBuffer() {
        const buff = [];
        const keys = Object.keys(this.fxs).map((k) => parseInt(k, 10)).sort();
        const klen = buffer_1.Buffer.alloc(4);
        klen.writeUInt32BE(keys.length, 0);
        buff.push(klen);
        for (let i = 0; i < keys.length; i++) {
            const fxid = keys[i];
            const fxidbuff = buffer_1.Buffer.alloc(4);
            fxidbuff.writeUInt32BE(fxid, 0);
            buff.push(fxidbuff);
            const initialState = this.fxs[fxid].sort(outputs_1.Output.comparator());
            const statelen = buffer_1.Buffer.alloc(4);
            statelen.writeUInt32BE(initialState.length, 0);
            buff.push(statelen);
            for (let j = 0; j < initialState.length; j++) {
                const outputid = buffer_1.Buffer.alloc(4);
                outputid.writeInt32BE(initialState[j].getOutputID(), 0);
                buff.push(outputid);
                buff.push(initialState[j].toBuffer());
            }
        }
        return buffer_1.Buffer.concat(buff);
    }
}
exports.InitialStates = InitialStates;
/**
 * Function providing the current UNIX time using a {@link https://github.com/indutny/bn.js/|BN}
 */
function UnixNow() {
    return new bn_js_1.default(Math.round((new Date()).getTime() / 1000));
}
exports.UnixNow = UnixNow;
//# sourceMappingURL=data:application/json;base64,