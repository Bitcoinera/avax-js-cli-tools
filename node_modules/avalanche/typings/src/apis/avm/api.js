"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersistanceOptions = void 0;
/**
 * @packageDocumentation
 * @module AVMAPI
 */
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("../../utils/bintools"));
const types_1 = require("../../utils/types");
const utxos_1 = require("./utxos");
const types_2 = require("./types");
const keychain_1 = require("./keychain");
const tx_1 = require("./tx");
const payload_1 = require("../../utils/payload");
const inputs_1 = require("./inputs");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * A class for defining the persistance behavior of this an API call.
 *
 */
class PersistanceOptions {
    /**
       *
       * @param name The namespace of the database the data
       * @param overwrite True if the data should be completey overwritten
       * @param MergeRule The type of process used to merge with existing data: "intersection", "differenceSelf", "differenceNew", "symDifference", "union", "unionMinusNew", "unionMinusSelf"
       *
       * @remarks
       * The merge rules are as follows:
       *   * "intersection" - the intersection of the set
       *   * "differenceSelf" - the difference between the existing data and new set
       *   * "differenceNew" - the difference between the new data and the existing set
       *   * "symDifference" - the union of the differences between both sets of data
       *   * "union" - the unique set of all elements contained in both sets
       *   * "unionMinusNew" - the unique set of all elements contained in both sets, excluding values only found in the new set
       *   * "unionMinusSelf" - the unique set of all elements contained in both sets, excluding values only found in the existing set
       */
    constructor(name, overwrite = false, mergeRule) {
        this.name = undefined;
        this.overwrite = false;
        this.mergeRule = 'union';
        /**
           * Returns the namespace of the instance
           */
        this.getName = () => this.name;
        /**
           * Returns the overwrite rule of the instance
           */
        this.getOverwrite = () => this.overwrite;
        /**
           * Returns the [[MergeRule]] of the instance
           */
        this.getMergeRule = () => this.mergeRule;
        this.name = name;
        this.overwrite = overwrite;
        this.mergeRule = mergeRule;
    }
}
exports.PersistanceOptions = PersistanceOptions;
/**
 * Class for interacting with a node endpoint that is using the AVM.
 *
 * @category RPCAPIs
 *
 * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.
 */
class AVMAPI extends types_1.JRPCAPI {
    /**
       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]] method.
       *
       * @param core A reference to the Avalanche class
       * @param baseurl Defaults to the string "/ext/bc/avm" as the path to blockchain's baseurl
       */
    constructor(core, baseurl = '/ext/bc/avm', blockchainID = '') {
        super(core, baseurl);
        /**
           * @ignore
           */
        this.keychain = new keychain_1.AVMKeyChain('', '');
        this.blockchainID = '';
        this.AVAXAssetID = undefined;
        /**
           * Gets the alias for the blockchainID if it exists, otherwise returns `undefined`.
           *
           * @returns The alias for the blockchainID
           */
        this.getBlockchainAlias = () => {
            const netid = this.core.getNetworkID();
            if (netid in types_1.Defaults.network && this.blockchainID in types_1.Defaults.network[netid]) {
                return types_1.Defaults.network[netid][this.blockchainID].alias;
            }
            /* istanbul ignore next */
            return undefined;
        };
        /**
           * Gets the blockchainID and returns it.
           *
           * @returns The blockchainID
           */
        this.getBlockchainID = () => this.blockchainID;
        /**
           * Refresh blockchainID, and if a blockchainID is passed in, use that.
           *
           * @param Optional. BlockchainID to assign, if none, uses the default based on networkID.
           *
           * @returns The blockchainID
           */
        this.refreshBlockchainID = (blockchainID = undefined) => {
            const netid = this.core.getNetworkID();
            if (typeof blockchainID === 'undefined' && typeof types_1.Defaults.network[netid] !== "undefined") {
                this.blockchainID = types_1.Defaults.network[netid].avm.blockchainID;
                return true;
            }
            if (typeof blockchainID === 'string') {
                this.blockchainID = blockchainID;
                return true;
            }
            return false;
        };
        /**
           * Takes an address string and returns its {@link https://github.com/feross/buffer|Buffer} representation if valid.
           *
           * @returns A {@link https://github.com/feross/buffer|Buffer} for the address if valid, undefined if not valid.
           */
        this.parseAddress = (addr) => {
            const alias = this.getBlockchainAlias();
            const blockchainID = this.getBlockchainID();
            return bintools.parseAddress(addr, blockchainID, alias, types_2.AVMConstants.ADDRESSLENGTH);
        };
        this.addressFromBuffer = (address) => {
            const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();
            return bintools.addressToString(this.core.getHRP(), chainid, address);
        };
        /**
           * Fetches the AVAX AssetID and returns it in a Promise.
           *
           * @returns The the provided string representing the blockchainID
           */
        this.getAVAXAssetID = () => __awaiter(this, void 0, void 0, function* () {
            if (typeof this.AVAXAssetID === 'undefined') {
                const asset = yield this.getAssetDescription('AVAX');
                // TODO - Remove hardcoded 'AVAX'
                this.AVAXAssetID = asset.assetID;
            }
            return this.AVAXAssetID;
        });
        /**
           * Gets a reference to the keychain for this class.
           *
           * @returns The instance of [[AVMKeyChain]] for this class
           */
        this.keyChain = () => this.keychain;
        /**
           * @ignore
           */
        this.newKeyChain = () => {
            // warning, overwrites the old keychain
            const alias = this.getBlockchainAlias();
            if (alias) {
                this.keychain = new keychain_1.AVMKeyChain(this.core.getHRP(), alias);
            }
            else {
                this.keychain = new keychain_1.AVMKeyChain(this.core.getHRP(), this.blockchainID);
            }
            return this.keychain;
        };
        /**
         * Helper function which determines if a tx is a goose egg transaction.
         *
         * @param utx An UnsignedTx
         *
         * @returns boolean true if passes goose egg test and false if fails.
         *
         * @remarks
         * A "Goose Egg Transaction" is when the fee far exceeds a reasonable amount
         */
        this.checkGooseEgg = (utx) => __awaiter(this, void 0, void 0, function* () {
            const avaxAssetID = yield this.getAVAXAssetID();
            const outputTotal = utx.getOutputTotal(avaxAssetID);
            const fee = utx.getBurn(avaxAssetID);
            if (fee.lte(types_2.AVMConstants.ONEAVAX.mul(new bn_js_1.default(10))) || fee.lte(outputTotal)) {
                return true;
            }
            else {
                return false;
            }
        });
        /**
           * Gets the balance of a particular asset on a blockchain.
           *
           * @param address The address to pull the asset balance from
           * @param assetID The assetID to pull the balance from
           *
           * @returns Promise with the balance of the assetID as a {@link https://github.com/indutny/bn.js/|BN} on the provided address for the blockchain.
           */
        this.getBalance = (address, assetID) => __awaiter(this, void 0, void 0, function* () {
            if (typeof this.parseAddress(address) === 'undefined') {
                /* istanbul ignore next */
                throw new Error(`Error - AVMAPI.getBalance: Invalid address format ${address}`);
            }
            const params = {
                address,
                assetID,
            };
            return this.callMethod('avm.getBalance', params).then((response) => new bn_js_1.default(response.data.result.balance, 10));
        });
        /**
           * Creates an address (and associated private keys) on a user on a blockchain.
           *
           * @param username Name of the user to create the address under
           * @param password Password to unlock the user and encrypt the private key
           *
           * @returns Promise for a string representing the address created by the vm.
           */
        this.createAddress = (username, password) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                username,
                password,
            };
            return this.callMethod('avm.createAddress', params).then((response) => response.data.result.address);
        });
        /**
           * Create a new fixed-cap, fungible asset. A quantity of it is created at initialization and there no more is ever created.
           *
           * @param username The user paying the transaction fee (in $AVAX) for asset creation
           * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation
           * @param name The human-readable name for the asset
           * @param symbol Optional. The shorthand symbol for the asset. Between 0 and 4 characters
           * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0
           * @param initialHolders An array of objects containing the field "address" and "amount" to establish the genesis values for the new asset
           *
           * ```js
           * Example initialHolders:
           * [
           *     {
           *         "address": "X-7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh",
           *         "amount": 10000
           *     },
           *     {
           *         "address": "X-7sik3Pr6r1FeLrvK1oWwECBS8iJ5VPuSh",
           *         "amount": 50000
           *     }
           * ]
           * ```
           *
           * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.
           */
        this.createFixedCapAsset = (username, password, name, symbol, denomination, initialHolders) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                name,
                symbol,
                denomination,
                username,
                password,
                initialHolders,
            };
            return this.callMethod('avm.createFixedCapAsset', params).then((response) => response.data.result.assetID);
        });
        /**
           * Create a new variable-cap, fungible asset. No units of the asset exist at initialization. Minters can mint units of this asset using createMintTx, signMintTx and sendMintTx.
           *
           * @param username The user paying the transaction fee (in $AVAX) for asset creation
           * @param password The password for the user paying the transaction fee (in $AVAX) for asset creation
           * @param name The human-readable name for the asset
           * @param symbol Optional. The shorthand symbol for the asset -- between 0 and 4 characters
           * @param denomination Optional. Determines how balances of this asset are displayed by user interfaces. Default is 0
           * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction
           *
           * ```js
           * Example minterSets:
           * [
           *      {
           *          "minters":[
           *              "X-4peJsFvhdn7XjhNF4HWAQy6YaJts27s9q"
           *          ],
           *          "threshold": 1
           *      },
           *      {
           *          "minters": [
           *              "X-dcJ6z9duLfyQTgbjq2wBCowkvcPZHVDF",
           *              "X-2fE6iibqfERz5wenXE6qyvinsxDvFhHZk",
           *              "X-7ieAJbfrGQbpNZRAQEpZCC1Gs1z5gz4HU"
           *          ],
           *          "threshold": 2
           *      }
           * ]
           * ```
           *
           * @returns Returns a Promise<string> containing the base 58 string representation of the ID of the newly created asset.
           */
        this.createVariableCapAsset = (username, password, name, symbol, denomination, minterSets) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                name,
                symbol,
                denomination,
                username,
                password,
                minterSets,
            };
            return this.callMethod('avm.createVariableCapAsset', params).then((response) => response.data.result.assetID);
        });
        /**
           * Create an unsigned transaction to mint more of an asset.
           *
           * @param amount The units of the asset to mint
           * @param assetID The ID of the asset to mint
           * @param to The address to assign the units of the minted asset
           * @param minters Addresses of the minters responsible for signing the transaction
           *
           * @returns Returns a Promise<string> containing the base 58 string representation of the unsigned transaction.
           */
        this.createMintTx = (amount, assetID, to, minters) => __awaiter(this, void 0, void 0, function* () {
            let asset;
            let amnt;
            if (typeof assetID !== 'string') {
                asset = bintools.cb58Encode(assetID);
            }
            else {
                asset = assetID;
            }
            if (typeof amount === 'number') {
                amnt = new bn_js_1.default(amount);
            }
            else {
                amnt = amount;
            }
            const params = {
                amount: amnt.toString(10),
                assetID: asset,
                to,
                minters,
            };
            return this.callMethod('avm.createMintTx', params).then((response) => response.data.result.tx);
        });
        /**
           * Sign an unsigned or partially signed mint transaction.
           *
           * @param username The user signing
           * @param password The password for the user signing
           * @param tx The output of createMintTx or signMintTx
           * @param minter The minter signing this transaction
           *
           * @returns Returns a Promise<string> containing the base 58 string representation of the unsigned transaction.
           */
        this.signMintTx = (username, password, tx, minter) => __awaiter(this, void 0, void 0, function* () {
            if (typeof this.parseAddress(minter) === 'undefined') {
                /* istanbul ignore next */
                throw new Error(`Error - AVMAPI.signMintTx: Invalid address format ${minter}`);
            }
            const params = {
                username,
                password,
                tx,
                minter,
            };
            return this.callMethod('avm.signMintTx', params).then((response) => response.data.result.tx);
        });
        /**
           * Exports the private key for an address.
           *
           * @param username The name of the user with the private key
           * @param password The password used to decrypt the private key
           * @param address The address whose private key should be exported
           *
           * @returns Promise with the decrypted private key as store in the database
           */
        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {
            if (typeof this.parseAddress(address) === 'undefined') {
                /* istanbul ignore next */
                throw new Error(`Error - AVMAPI.exportKey: Invalid address format ${address}`);
            }
            const params = {
                username,
                password,
                address,
            };
            return this.callMethod('avm.exportKey', params).then((response) => response.data.result.privateKey);
        });
        /**
           * Imports a private key into the node's keystore under an user and for a blockchain.
           *
           * @param username The name of the user to store the private key
           * @param password The password that unlocks the user
           * @param privateKey A string representing the private key in the vm's format
           *
           * @returns The address for the imported private key.
           */
        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                username,
                password,
                privateKey,
            };
            return this.callMethod('avm.importKey', params).then((response) => response.data.result.address);
        });
        /**
           * Send AVAX from the X-Chain to an account on the P-Chain.
           *
           * After calling this method, you must call the P-Chain’s importAVAX method to complete the transfer.
           *
           * @param username The Keystore user that controls the P-Chain account specified in `to`
           * @param password The password of the Keystore user
           * @param to The account on the P-Chain to send the AVAX to. Do not include P- in the address
           * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}
           *
           * @returns String representing the transaction id
           */
        this.exportAVAX = (username, password, to, amount) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                to,
                amount: amount.toString(10),
                username,
                password,
            };
            return this.callMethod('avm.exportAVAX', params).then((response) => response.data.result.txID);
        });
        /**
           * Finalize a transfer of AVAX from the P-Chain to the X-Chain.
           *
           * Before this method is called, you must call the P-Chain’s `exportAVAX` method to initiate the transfer.
           *
           * @param to The address the AVAX is sent to. This must be the same as the to argument in the corresponding call to the P-Chain’s exportAVAX, except that the prepended X- should be included in this argument
           * @param username The Keystore user that controls the address specified in `to`
           * @param password The password of the Keystore user
           *
           * @returns String representing the transaction id
           */
        this.importAVAX = (username, password, to) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                to,
                username,
                password,
            };
            return this.callMethod('avm.importAVAX', params).then((response) => response.data.result.txID);
        });
        /**
           * Lists all the addresses under a user.
           *
           * @param username The user to list addresses
           * @param password The password of the user to list the addresses
           *
           * @returns Promise of an array of address strings in the format specified by the blockchain.
           */
        this.listAddresses = (username, password) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                username,
                password,
            };
            return this.callMethod('avm.listAddresses', params).then((response) => response.data.result.addresses);
        });
        /**
           * Retrieves all assets for an address on a server and their associated balances.
           *
           * @param address The address to get a list of assets
           *
           * @returns Promise of an object mapping assetID strings with {@link https://github.com/indutny/bn.js/|BN} balance for the address on the blockchain.
           */
        this.getAllBalances = (address) => __awaiter(this, void 0, void 0, function* () {
            if (typeof this.parseAddress(address) === 'undefined') {
                /* istanbul ignore next */
                throw new Error(`Error - AVMAPI.getAllBalances: Invalid address format ${address}`);
            }
            const params = {
                address,
            };
            return this.callMethod('avm.getAllBalances', params).then((response) => response.data.result.balances);
        });
        /**
           * Retrieves an assets name and symbol.
           *
           * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an b58 serialized string for the AssetID or its alias.
           *
           * @returns Returns a Promise<object> with keys "name" and "symbol".
           */
        this.getAssetDescription = (assetID) => __awaiter(this, void 0, void 0, function* () {
            let asset;
            if (typeof assetID !== 'string') {
                asset = bintools.cb58Encode(assetID);
            }
            else {
                asset = assetID;
            }
            const params = {
                assetID: asset,
            };
            return this.callMethod('avm.getAssetDescription', params).then((response) => ({
                name: response.data.result.name,
                symbol: response.data.result.symbol,
                assetID: bintools.cb58Decode(response.data.result.assetID),
                denomination: parseInt(response.data.result.denomination, 10),
            }));
        });
        /**
           * Returns the treansaction data of a provided transaction ID by calling the node's `getTx` method.
           *
           * @param txid The string representation of the transaction ID
           *
           * @returns Returns a Promise<string> containing the bytes retrieved from the node
           */
        this.getTx = (txid) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                txID: txid,
            };
            return this.callMethod('avm.getTx', params).then((response) => response.data.result.tx);
        });
        /**
           * Returns the status of a provided transaction ID by calling the node's `getTxStatus` method.
           *
           * @param txid The string representation of the transaction ID
           *
           * @returns Returns a Promise<string> containing the status retrieved from the node
           */
        this.getTxStatus = (txid) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                txID: txid,
            };
            return this.callMethod('avm.getTxStatus', params).then((response) => response.data.result.status);
        });
        /**
           * Retrieves the UTXOs related to the addresses provided from the node's `getUTXOs` method.
           *
           * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s
           * @param persistOpts Options available to persist these UTXOs in local storage
           *
           * @remarks
           * persistOpts is optional and must be of type [[PersistanceOptions]]
           *
           */
        this.getUTXOs = (addresses, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {
            const addrs = this._cleanAddressArray(addresses, 'getUTXOs');
            const params = {
                addresses: addrs,
            };
            return this.callMethod('avm.getUTXOs', params).then((response) => {
                const utxos = new utxos_1.UTXOSet();
                let data = response.data.result.utxos;
                if (persistOpts && typeof persistOpts === 'object') {
                    if (this.db.has(persistOpts.getName())) {
                        const selfArray = this.db.get(persistOpts.getName());
                        if (Array.isArray(selfArray)) {
                            utxos.addArray(data);
                            const self = new utxos_1.UTXOSet();
                            self.addArray(selfArray);
                            self.mergeByRule(utxos, persistOpts.getMergeRule());
                            data = self.getAllUTXOStrings();
                        }
                    }
                    this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());
                }
                utxos.addArray(data);
                return utxos;
            });
        });
        /**
           * Retrieves the UTXOs able to be imported by the addresses, provided from the node's `getAtomicUTXOs` method.
           *
           * @param addresses An array of addresses as cb58 strings or addresses as {@link https://github.com/feross/buffer|Buffer}s
           * @param persistOpts Options available to persist these UTXOs in local storage
           *
           * @remarks
           * persistOpts is optional and must be of type [[PersistanceOptions]]
           *
           */
        this.getAtomicUTXOs = (addresses, persistOpts = undefined) => __awaiter(this, void 0, void 0, function* () {
            const addrs = this._cleanAddressArray(addresses, 'getAtomicUTXOs');
            const params = {
                addresses: addrs,
            };
            return this.callMethod('avm.getAtomicUTXOs', params).then((response) => {
                const utxos = new utxos_1.UTXOSet();
                let data = response.data.result.utxos;
                if (persistOpts && typeof persistOpts === 'object') {
                    if (this.db.has(persistOpts.getName())) {
                        const selfArray = this.db.get(persistOpts.getName());
                        if (Array.isArray(selfArray)) {
                            utxos.addArray(data);
                            const self = new utxos_1.UTXOSet();
                            self.addArray(selfArray);
                            self.mergeByRule(utxos, persistOpts.getMergeRule());
                            data = self.getAllUTXOStrings();
                        }
                    }
                    this.db.set(persistOpts.getName(), data, persistOpts.getOverwrite());
                }
                utxos.addArray(data);
                return utxos;
            });
        });
        /**
           * Helper function which creates an unsigned transaction. For more granular control, you may create your own
           * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
           *
           * @param utxoset A set of UTXOs that the transaction is built on
           * @param amount The amount of AVAX to be spent in $nAVAX
           * @param toAddresses The addresses to send the funds
           * @param fromAddresses The addresses being used to send the funds from the UTXOs provided
           * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs
           * @param assetID The assetID of the value being sent
           * @param memo Optional contains arbitrary bytes, up to 256 bytes
           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
           * @param locktime Optional. The locktime field created in the resulting outputs
           * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
           *
           * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[BaseTx]].
           *
           * @remarks
           * This helper exists because the endpoint API should be the primary point of entry for most functionality.
           */
        this.buildBaseTx = (utxoset, amount, toAddresses, fromAddresses, changeAddresses, assetID = undefined, memo = undefined, asOf = types_2.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {
            const to = this._cleanAddressArray(toAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));
            const from = this._cleanAddressArray(fromAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));
            const change = this._cleanAddressArray(changeAddresses, 'buildBaseTx').map((a) => bintools.stringToAddress(a));
            if (typeof assetID === 'string') {
                assetID = bintools.cb58Decode(assetID);
            }
            if (memo instanceof payload_1.PayloadBase) {
                memo = memo.getPayload();
            }
            const builtUnsignedTx = utxoset.buildBaseTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), amount, to, from, change, assetID, memo, asOf, locktime, threshold);
            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {
                /* istanbul ignore next */
                throw new Error("Failed Goose Egg Check");
            }
            return builtUnsignedTx;
        });
        /**
           * Helper function which creates an unsigned NFT Transfer. For more granular control, you may create your own
           * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
           *
           * @param utxoset  A set of UTXOs that the transaction is built on
           * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nfts this transaction is sending
           * @param toAddresses The addresses to send the NFT
           * @param fromAddresses The addresses being used to send the NFT from the utxoID provided
           * @param feeAmount The amount of fees being paid for this transaction
           * @param feeAddresses The addresses that have the AVAX funds to pay for fees of the UTXO
           * @param memo Optional contains arbitrary bytes, up to 256 bytes
           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
           * @param locktime Optional. The locktime field created in the resulting outputs
           * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
           *
           * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[NFTTransferTx]].
           *
           * @remarks
           * This helper exists because the endpoint API should be the primary point of entry for most functionality.
           */
        this.buildNFTTransferTx = (utxoset, utxoid, toAddresses, fromAddresses, feeAmount, feeAddresses, memo = undefined, asOf = types_2.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {
            const to = this._cleanAddressArray(toAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));
            const from = this._cleanAddressArray(fromAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));
            const feeAddrs = this._cleanAddressArray(feeAddresses, 'buildNFTTransferTx').map((a) => bintools.stringToAddress(a));
            if (memo instanceof payload_1.PayloadBase) {
                memo = memo.getPayload();
            }
            const avaxAssetID = yield this.getAVAXAssetID();
            let utxoidArray = [];
            if (typeof utxoid === 'string') {
                utxoidArray = [utxoid];
            }
            else if (Array.isArray(utxoid)) {
                utxoidArray = utxoid;
            }
            const builtUnsignedTx = utxoset.buildNFTTransferTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, feeAmount, feeAddrs, to, from, utxoidArray, memo, asOf, locktime, threshold);
            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {
                /* istanbul ignore next */
                throw new Error("Failed Goose Egg Check");
            }
            return builtUnsignedTx;
        });
        /**
         * In-Development, do not use: Helper function which creates an unsigned Import Tx. For more granular control, you may create your own
         * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
         *
         * @param utxoset  A set of UTXOs that the transaction is built on
         * @param ownerAddresses The addresses being used to import
         * @param feeAmount The amount of fees being paid for this transaction
         * @param feeAddresses The addresses that have the AVAX funds to pay for fees of the UTXO
         * @param memo Optional contains arbitrary bytes, up to 256 bytes
         * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
         * @param locktime Optional. The locktime field created in the resulting outputs
         * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
         *
         * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[ImportTx]].
         *
         * @remarks
         * This helper exists because the endpoint API should be the primary point of entry for most functionality.
         */
        this.buildImportTx = (utxoset, ownerAddresses, feeAmount, feeAddresses, memo = undefined, asOf = types_2.UnixNow()) => __awaiter(this, void 0, void 0, function* () {
            const owners = this._cleanAddressArray(ownerAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));
            const feeAddrs = this._cleanAddressArray(feeAddresses, 'buildImportTx').map((a) => bintools.stringToAddress(a));
            const atomicUTXOs = yield this.getAtomicUTXOs(owners);
            const avaxAssetID = yield this.getAVAXAssetID();
            const avaxAssetIDStr = avaxAssetID.toString("hex");
            if (memo instanceof payload_1.PayloadBase) {
                memo = memo.getPayload();
            }
            const atomics = atomicUTXOs.getAllUTXOs();
            const importIns = [];
            for (let i = 0; i < atomics.length; i++) {
                const utxo = atomics[i];
                const assetID = utxo.getAssetID();
                if (assetID.toString("hex") === avaxAssetIDStr) {
                    const output = utxo.getOutput();
                    const amt = output.getAmount().clone();
                    const txid = utxo.getTxID();
                    const outputidx = utxo.getOutputIdx();
                    const input = new inputs_1.SecpInput(amt);
                    const xferin = new inputs_1.TransferableInput(txid, outputidx, assetID, input);
                    const fromAddresses = output.getAddresses(); // Verify correct approach
                    const spenders = output.getSpenders(fromAddresses, asOf);
                    for (let j = 0; j < spenders.length; j++) {
                        const idx = output.getAddressIdx(spenders[j]);
                        if (idx === -1) {
                            /* istanbul ignore next */
                            throw new Error('Error - UTXOSet.buildBaseTx: no such '
                                + `address in output: ${spenders[j]}`);
                        }
                        xferin.getInput().addSignatureIdx(idx, spenders[j]);
                    }
                    importIns.push(xferin);
                }
            }
            const builtUnsignedTx = utxoset.buildImportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, feeAmount, feeAddrs, importIns, memo, asOf);
            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {
                /* istanbul ignore next */
                throw new Error("Failed Goose Egg Check");
            }
            return builtUnsignedTx;
        });
        /**
           * In-Development, do not use: Helper function which creates an unsigned Export Tx. For more granular control, you may create your own
           * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
           *
           * @param utxoset A set of UTXOs that the transaction is built on
           * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the AVAX this transaction is exporting
           * @param feeAmount The amount of fees being paid for this transaction
           * @param feeAddresses The addresses that have the AVAX funds to pay for fees of the UTXO
           * @param memo Optional contains arbitrary bytes, up to 256 bytes
           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
           *
           * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[ExportTx]].
           *
           * @remarks
           * This helper exists because the endpoint API should be the primary point of entry for most functionality.
           */
        this.buildExportTx = (utxoset, utxoid, feeAmount, feeAddresses, memo = undefined, asOf = types_2.UnixNow()) => __awaiter(this, void 0, void 0, function* () {
            const feeAddrs = this._cleanAddressArray(feeAddresses, 'buildExportTx').map((a) => bintools.stringToAddress(a));
            if (memo instanceof payload_1.PayloadBase) {
                memo = memo.getPayload();
            }
            const avaxAssetID = yield this.getAVAXAssetID();
            let utxoidArray = [];
            if (typeof utxoid === 'string') {
                utxoidArray = [utxoid];
            }
            else if (Array.isArray(utxoid)) {
                utxoidArray = utxoid;
            }
            const builtUnsignedTx = utxoset.buildExportTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, feeAmount, feeAddrs, utxoidArray, memo, asOf);
            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {
                /* istanbul ignore next */
                throw new Error("Failed Goose Egg Check");
            }
            return builtUnsignedTx;
        });
        /**
           * Creates an unsigned transaction. For more granular control, you may create your own
           * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
           *
           * @param utxoset A set of UTXOs that the transaction is built on
           * @param fee The amount of AVAX to be paid for fees, in $nAVAX
           * @param creatorAddresses The addresses to send the fees
           * @param initialStates The [[InitialStates]] that represent the intial state of a created asset
           * @param name String for the descriptive name of the asset
           * @param symbol String for the ticker symbol of the asset
           * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX
           * @param memo Optional contains arbitrary bytes, up to 256 bytes
           * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
           *
           * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].
           *
           */
        this.buildCreateAssetTx = (utxoset, fee, creatorAddresses, initialStates, name, symbol, denomination, memo = undefined, asOf = types_2.UnixNow(), locktime = undefined) => __awaiter(this, void 0, void 0, function* () {
            let creators = this._cleanAddressArray(creatorAddresses, "buildCreateAssetTx").map(a => bintools.stringToAddress(a));
            if (memo instanceof payload_1.PayloadBase) {
                memo = memo.getPayload();
            }
            /* istanbul ignore next */
            if (symbol.length > types_2.AVMConstants.SYMBOLMAXLEN) {
                /* istanbul ignore next */
                throw new Error("Error - AVMAPI.buildCreateAssetTx: Symbols may not exceed length of " + types_2.AVMConstants.SYMBOLMAXLEN);
            }
            /* istanbul ignore next */
            if (name.length > types_2.AVMConstants.ASSETNAMELEN) {
                /* istanbul ignore next */
                throw new Error("Error - AVMAPI.buildCreateAssetTx: Names may not exceed length of " + types_2.AVMConstants.ASSETNAMELEN);
            }
            const avaxAssetID = yield this.getAVAXAssetID();
            const builtUnsignedTx = utxoset.buildCreateAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, fee, creators, initialStates, name, symbol, denomination, memo, asOf);
            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {
                /* istanbul ignore next */
                throw new Error("Failed Goose Egg Check");
            }
            return builtUnsignedTx;
        });
        /**
         * Creates an unsigned transaction. For more granular control, you may create your own
          * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
          *
          * @param utxoset A set of UTXOs that the transaction is built on
          * @param fee The amount of AVAX to be paid for fees, in $nAVAX
          * @param feePayingAddresses The addresses to pay the fees
          * @param name String for the descriptive name of the asset
          * @param symbol String for the ticker symbol of the asset
          * @param minterSets is a list where each element specifies that threshold of the addresses in minters may together mint more of the asset by signing a minting transaction
          * @param memo Optional contains arbitrary bytes, up to 256 bytes
          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
          * @param locktime Optional. The locktime field created in the resulting mint output
          *
          * ```js
          * Example minterSets:
          * [
          *      {
          *          "minters":[
          *              "X-4peJsFvhdn7XjhNF4HWAQy6YaJts27s9q"
          *          ],
          *          "threshold": 1
          *      },
          *      {
          *          "minters": [
          *              "X-dcJ6z9duLfyQTgbjq2wBCowkvcPZHVDF",
          *              "X-2fE6iibqfERz5wenXE6qyvinsxDvFhHZk",
          *              "X-7ieAJbfrGQbpNZRAQEpZCC1Gs1z5gz4HU"
          *          ],
          *          "threshold": 2
          *      }
          * ]
          * ```
          *
          * @returns An unsigned transaction ([[UnsignedTx]]) which contains a [[CreateAssetTx]].
          *
          */
        this.buildCreateNFTAssetTx = (utxoset, fee, feePayingAddresses, name, symbol, minterSets, memo = undefined, asOf = types_2.UnixNow(), locktime = new bn_js_1.default(0)) => __awaiter(this, void 0, void 0, function* () {
            let feeAddrs = this._cleanAddressArray(feePayingAddresses, "buildCreateNFTAssetTx").map(a => bintools.stringToAddress(a));
            if (memo instanceof payload_1.PayloadBase) {
                memo = memo.getPayload();
            }
            if (name.length > types_2.AVMConstants.ASSETNAMELEN) {
                /* istanbul ignore next */
                throw new Error("Error - AVMAPI.buildCreateNFTAssetTx: Names may not exceed length of " + types_2.AVMConstants.ASSETNAMELEN);
            }
            if (symbol.length > types_2.AVMConstants.SYMBOLMAXLEN) {
                /* istanbul ignore next */
                throw new Error("Error - AVMAPI.buildCreateNFTAssetTx: Symbols may not exceed length of " + types_2.AVMConstants.SYMBOLMAXLEN);
            }
            let avaxAssetID = yield this.getAVAXAssetID();
            const builtUnsignedTx = utxoset.buildCreateNFTAssetTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, fee, feeAddrs, minterSets, name, symbol, memo, asOf, locktime);
            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {
                /* istanbul ignore next */
                throw new Error("Failed Goose Egg Check");
            }
            return builtUnsignedTx;
        });
        /**
         * Creates an unsigned transaction. For more granular control, you may create your own
          * [[UnsignedTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
          *
          * @param utxoset  A set of UTXOs that the transaction is built on
          * @param utxoid A base58 utxoID or an array of base58 utxoIDs for the nft mint output this transaction is sending
          * @param toAddresses The addresses to send the nft output
          * @param fromAddresses The addresses being used to send the NFT from the utxoID provided
          * @param fee The amount of fees being paid for this transaction
          * @param feeAddresses The addresses that have the AVAX funds to pay for fees of the UTXO
          * @param groupID Optional. The group this NFT is issued to.
          * @param payload Optional. Data for NFT Payload as either a [[PayloadBase]] or a {@link https://github.com/feross/buffer|Buffer}
          * @param memo Optional contains arbitrary bytes, up to 256 bytes
          * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
          * @param locktime Optional. The locktime field created in the resulting mint output
          * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
          *
          *
          * @returns An unsigned transaction ([[UnsignedTx]]) which contains an [[OperationTx]].
          *
          */
        this.buildCreateNFTMintTx = (utxoset, utxoid, toAddresses, fromAddresses, fee, feeAddresses, groupID = 0, payload = undefined, memo = undefined, asOf = types_2.UnixNow(), locktime = new bn_js_1.default(0), threshold = 1) => __awaiter(this, void 0, void 0, function* () {
            let to = this._cleanAddressArray(toAddresses, "buildCreateNFTMintTx").map(a => bintools.stringToAddress(a));
            let from = this._cleanAddressArray(fromAddresses, "buildCreateNFTMintTx").map(a => bintools.stringToAddress(a));
            let feeAddrs = this._cleanAddressArray(feeAddresses, "buildCreateNFTMintTx").map(a => bintools.stringToAddress(a));
            if (memo instanceof payload_1.PayloadBase) {
                memo = memo.getPayload();
            }
            if (payload instanceof payload_1.PayloadBase) {
                payload = payload.getPayload();
            }
            if (typeof utxoid === 'string') {
                utxoid = [utxoid];
            }
            let avaxAssetID = yield this.getAVAXAssetID();
            const builtUnsignedTx = utxoset.buildCreateNFTMintTx(this.core.getNetworkID(), bintools.cb58Decode(this.blockchainID), avaxAssetID, fee, feeAddrs, to, from, utxoid, groupID, payload, memo, asOf, locktime, threshold);
            if (!(yield this.checkGooseEgg(builtUnsignedTx))) {
                /* istanbul ignore next */
                throw new Error("Failed Goose Egg Check");
            }
            return builtUnsignedTx;
        });
        /**
         * Helper function which takes an unsigned transaction and signs it, returning the resulting [[Tx]].
          *
          * @param utx The unsigned transaction of type [[UnsignedTx]]
          *
          * @returns A signed transaction of type [[Tx]]
          */
        this.signTx = (utx) => this.keychain.signTx(utx);
        /**
           * Calls the node's issueTx method from the API and returns the resulting transaction ID as a string.
           *
           * @param tx A string, {@link https://github.com/feross/buffer|Buffer}, or [[Tx]] representing a transaction
           *
           * @returns A Promise<string> representing the transaction ID of the posted transaction.
           */
        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {
            let Transaction = '';
            if (typeof tx === 'string') {
                Transaction = tx;
            }
            else if (tx instanceof buffer_1.Buffer) {
                const txobj = new tx_1.Tx();
                txobj.fromBuffer(tx);
                Transaction = txobj.toString();
            }
            else if (tx instanceof tx_1.Tx) {
                Transaction = tx.toString();
            }
            else {
                /* istanbul ignore next */
                throw new Error('Error - avm.issueTx: provided tx is not expected type of string, Buffer, or Tx');
            }
            const params = {
                tx: Transaction.toString(),
            };
            return this.callMethod('avm.issueTx', params).then((response) => response.data.result.txID);
        });
        /**
           * Sends an amount of assetID to the specified address from a list of owned of addresses.
           *
           * @param username The user that owns the private keys associated with the `from` addresses
           * @param password The password unlocking the user
           * @param assetID The assetID of the asset to send
           * @param amount The amount of the asset to be sent
           * @param to The address of the recipient
           * @param from An array of addresses managed by the node's keystore for this blockchain which will fund this transaction
           *
           * @returns Promise for the string representing the transaction's ID.
           */
        this.send = (username, password, assetID, amount, to, from) => __awaiter(this, void 0, void 0, function* () {
            let asset;
            let amnt;
            if (typeof this.parseAddress(to) === 'undefined') {
                /* istanbul ignore next */
                throw new Error(`Error - AVMAPI.sen: Invalid address format ${to}`);
            }
            from = this._cleanAddressArray(from, 'send');
            if (typeof assetID !== 'string') {
                asset = bintools.cb58Encode(assetID);
            }
            else {
                asset = assetID;
            }
            if (typeof amount === 'number') {
                amnt = new bn_js_1.default(amount);
            }
            else {
                amnt = amount;
            }
            const params = {
                username,
                password,
                assetID: asset,
                amount: amnt.toString(10),
                to,
                from,
            };
            return this.callMethod('avm.send', params).then((response) => response.data.result.txID);
        });
        /**
           * Given a JSON representation of this Virtual Machine’s genesis state, create the byte representation of that state.
           *
           * @param genesisData The blockchain's genesis data object
           *
           * @returns Promise of a string of bytes
           */
        this.buildGenesis = (genesisData) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                genesisData,
            };
            return this.callMethod('avm.buildGenesis', params).then((response) => {
                const r = response.data.result.bytes;
                return r;
            });
        });
        this.blockchainID = blockchainID;
        const netid = core.getNetworkID();
        if (netid in types_1.Defaults.network && blockchainID in types_1.Defaults.network[netid]) {
            const { alias } = types_1.Defaults.network[netid][blockchainID];
            this.keychain = new keychain_1.AVMKeyChain(this.core.getHRP(), alias);
        }
        else {
            this.keychain = new keychain_1.AVMKeyChain(this.core.getHRP(), blockchainID);
        }
    }
    /**
       * @ignore
       */
    _cleanAddressArray(addresses, caller) {
        const addrs = [];
        const chainid = this.getBlockchainAlias() ? this.getBlockchainAlias() : this.getBlockchainID();
        if (addresses && addresses.length > 0) {
            for (let i = 0; i < addresses.length; i++) {
                if (typeof addresses[i] === 'string') {
                    if (typeof this.parseAddress(addresses[i]) === 'undefined') {
                        /* istanbul ignore next */
                        throw new Error(`Error - AVMAPI.${caller}: Invalid address format ${addresses[i]}`);
                    }
                    addrs.push(addresses[i]);
                }
                else {
                    addrs.push(bintools.addressToString(this.core.getHRP(), chainid, addresses[i]));
                }
            }
        }
        return addrs;
    }
}
exports.default = AVMAPI;
//# sourceMappingURL=data:application/json;base64,