/**
 * @packageDocumentation
 * @module AVMAPI-Outputs
 */
import { Buffer } from 'buffer/';
import BN from 'bn.js';
import { Address } from './types';
/**
 * Takes a buffer representing the output and returns the proper Output instance.
 *
 * @param outputid A number representing the inputID parsed prior to the bytes passed in
 *
 * @returns An instance of an [[Output]]-extended class.
 */
export declare const SelectOutputClass: (outputid: number, ...args: Array<any>) => Output;
export declare class OutputOwners {
    protected locktime: Buffer;
    protected threshold: Buffer;
    protected numaddrs: Buffer;
    protected addresses: Array<Address>;
    /**
     * Returns the threshold of signers required to spend this output.
     */
    getThreshold: () => number;
    /**
       * Returns the a {@link https://github.com/indutny/bn.js/|BN} repersenting the UNIX Timestamp when the lock is made available.
       */
    getLocktime: () => BN;
    /**
       * Returns an array of {@link https://github.com/feross/buffer|Buffer}s for the addresses.
       */
    getAddresses: () => Array<Buffer>;
    /**
       * Returns the index of the address.
       *
       * @param address A {@link https://github.com/feross/buffer|Buffer} of the address to look up to return its index.
       *
       * @returns The index of the address.
       */
    getAddressIdx: (address: Buffer) => number;
    /**
       * Returns the address from the index provided.
       *
       * @param idx The index of the address.
       *
       * @returns Returns the string representing the address.
       */
    getAddress: (idx: number) => Buffer;
    /**
       * Given an array of address {@link https://github.com/feross/buffer|Buffer}s and an optional timestamp, returns true if the addresses meet the threshold required to spend the output.
       */
    meetsThreshold: (addresses: Array<Buffer>, asOf?: BN) => boolean;
    /**
       * Given an array of addresses and an optional timestamp, select an array of address {@link https://github.com/feross/buffer|Buffer}s of qualified spenders for the output.
       */
    getSpenders: (addresses: Array<Buffer>, asOf?: BN) => Array<Buffer>;
    /**
       * Returns a base-58 string representing the [[Output]].
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns the buffer representing the [[Output]] instance.
       */
    toBuffer(): Buffer;
    /**
       * Returns a base-58 string representing the [[Output]].
       */
    toString(): string;
    static comparator: () => (a: Output, b: Output) => (1 | -1 | 0);
    /**
       * An [[Output]] class which contains addresses, locktimes, and thresholds.
       *
       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing output owner's addresses
       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime
       * @param threshold A number representing the the threshold number of signers required to sign the transaction
       */
    constructor(addresses?: Array<Buffer>, locktime?: BN, threshold?: number);
}
export declare abstract class Output extends OutputOwners {
    /**
     * Returns the outputID for the output which tells parsers what type it is
     */
    abstract getOutputID(): number;
    /**
     *
     * @param assetID An assetID which is wrapped around the Buffer of the Output
     */
    makeTransferable(assetID: Buffer): TransferableOutput;
}
export declare class TransferableOutput {
    protected assetID: Buffer;
    protected output: Output;
    /**
       * Returns a function used to sort an array of [[TransferableOutput]]s
       */
    static comparator: () => (a: TransferableOutput, b: TransferableOutput) => (1 | -1 | 0);
    getAssetID: () => Buffer;
    getOutput: () => Output;
    fromBuffer(bytes: Buffer, offset?: number): number;
    toBuffer(): Buffer;
    /**
       * Class representing an [[TransferableOutput]] for a transaction.
       *
       * @param assetID A {@link https://github.com/feross/buffer|Buffer} representing the assetID of the [[Output]]
       * @param output A number representing the InputID of the [[TransferableOutput]]
       */
    constructor(assetID?: Buffer, output?: Output);
}
/**
 * An [[Output]] class which specifies a token amount .
 */
export declare abstract class AmountOutput extends Output {
    protected amount: Buffer;
    protected amountValue: BN;
    /**
       * Returns the amount as a {@link https://github.com/indutny/bn.js/|BN}.
       */
    getAmount: () => BN;
    /**
       * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[AmountOutput]] and returns the size of the output.
       */
    fromBuffer(outbuff: Buffer, offset?: number): number;
    /**
       * Returns the buffer representing the [[AmountInput]] instance.
       */
    toBuffer(): Buffer;
    /**
       * An [[AmountOutput]] class which issues a payment on an assetID.
       *
       * @param amount A {@link https://github.com/indutny/bn.js/|BN} representing the amount in the output
       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses
       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime
       * @param threshold A number representing the the threshold number of signers required to sign the transaction
  
       */
    constructor(amount?: BN, addresses?: Array<Buffer>, locktime?: BN, threshold?: number);
}
/**
 * An [[Output]] class which specifies an Output that carries an ammount for an assetID and uses secp256k1 signature scheme.
 */
export declare class SecpOutput extends AmountOutput {
    /**
       * Returns the outputID for this output
       */
    getOutputID(): number;
}
/**
 * An [[Output]] class which specifies an NFT.
 */
export declare abstract class NFTOutBase extends Output {
    protected groupID: Buffer;
    /**
       * Returns the groupID as a number.
       */
    getGroupID: () => number;
}
/**
 * An [[Output]] class which specifies an Output that carries an NFT Mint and uses secp256k1 signature scheme.
 */
export declare class NFTMintOutput extends NFTOutBase {
    /**
     * Returns the outputID for this output
     */
    getOutputID(): number;
    /**
     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTMintOutput]] and returns the size of the output.
     */
    fromBuffer(utxobuff: Buffer, offset?: number): number;
    /**
     * Returns the buffer representing the [[NFTMintOutput]] instance.
     */
    toBuffer(): Buffer;
    /**
     * An [[Output]] class which contains an NFT mint for an assetID.
     *
     * @param groupID A number specifies the group this NFT is issued to
     * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime
     * @param threshold A number representing the the threshold number of signers required to sign the transaction
     * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses
     */
    constructor(groupID?: number, addresses?: Array<Buffer>, locktime?: BN, threshold?: number);
}
/**
 * An [[Output]] class which specifies an Output that carries an NFT and uses secp256k1 signature scheme.
 */
export declare class NFTTransferOutput extends NFTOutBase {
    protected sizePayload: Buffer;
    protected payload: Buffer;
    /**
     * Returns the outputID for this output
     */
    getOutputID(): number;
    /**
       * Returns the payload as a {@link https://github.com/feross/buffer|Buffer}
       */
    getPayload: () => Buffer;
    /**
     * Popuates the instance from a {@link https://github.com/feross/buffer|Buffer} representing the [[NFTTransferOutput]] and returns the size of the output.
     */
    fromBuffer(utxobuff: Buffer, offset?: number): number;
    /**
     * Returns the buffer representing the [[NFTTransferOutput]] instance.
     */
    toBuffer(): Buffer;
    /**
       * An [[Output]] class which contains an NFT on an assetID.
       *
       * @param groupID A number representing the amount in the output
       * @param payload A {@link https://github.com/feross/buffer|Buffer} of max length 1024
       * @param addresses An array of {@link https://github.com/feross/buffer|Buffer}s representing addresses
       * @param locktime A {@link https://github.com/indutny/bn.js/|BN} representing the locktime
       * @param threshold A number representing the the threshold number of signers required to sign the transaction
  
       */
    constructor(groupID?: number, payload?: Buffer, addresses?: Array<Buffer>, locktime?: BN, threshold?: number);
}
//# sourceMappingURL=outputs.d.ts.map