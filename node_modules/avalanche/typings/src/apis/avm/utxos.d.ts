/**
 * @packageDocumentation
 * @module AVMAPI-UTXOs
 */
import { Buffer } from 'buffer/';
import BN from "bn.js";
import { Output } from './outputs';
import { MergeRule, InitialStates } from './types';
import { UnsignedTx } from './tx';
import { TransferableInput } from './inputs';
import { MinterSet } from "../../utils/types";
/**
 * Class for representing a single UTXO.
 */
export declare class UTXO {
    protected codecid: Buffer;
    protected txid: Buffer;
    protected outputidx: Buffer;
    protected assetid: Buffer;
    protected output: Output;
    /**
       * Returns the numeric representation of the CodecID.
       */
    getCodecID: () => number;
    /**
     * Returns the {@link https://github.com/feross/buffer|Buffer} representation of the CodecID
      */
    getCodecIDBuffer: () => Buffer;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} of the TxID.
       */
    getTxID: () => Buffer;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer}  of the OutputIdx.
       */
    getOutputIdx: () => Buffer;
    /**
       * Returns the assetID as a {@link https://github.com/feross/buffer|Buffer}.
       */
    getAssetID: () => Buffer;
    /**
       * Returns the UTXOID as a base-58 string (UTXOID is a string )
       */
    getUTXOID: () => string;
    /**
       * Returns a reference to the output;
      */
    getOutput: () => Output;
    /**
       * Takes a {@link https://github.com/feross/buffer|Buffer} containing an [[UTXO]], parses it, populates the class, and returns the length of the UTXO in bytes.
       *
       * @param bytes A {@link https://github.com/feross/buffer|Buffer} containing a raw [[UTXO]]
       */
    fromBuffer(bytes: Buffer, offset?: number): number;
    /**
       * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[UTXO]].
       */
    toBuffer(): Buffer;
    /**
       * Takes a base-58 string containing an [[UTXO]], parses it, populates the class, and returns the length of the UTXO in bytes.
       *
       * @param serialized A base-58 string containing a raw [[UTXO]]
       *
       * @returns The length of the raw [[UTXO]]
       *
       * @remarks
       * unlike most fromStrings, it expects the string to be serialized in cb58 format
       */
    fromString(serialized: string): number;
    /**
       * Returns a base-58 representation of the [[UTXO]].
       *
       * @remarks
       * unlike most toStrings, this returns in cb58 serialization format
       */
    toString(): string;
    /**
       * Class for representing a single UTXO.
       *
       * @param txid Optional {@link https://github.com/feross/buffer|Buffer} of transaction ID for the UTXO
       * @param txidx Optional {@link https://github.com/feross/buffer|Buffer} or number for the index of the transaction's [[Output]]
       * @param assetid Optional {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO
       * @param outputid Optional {@link https://github.com/feross/buffer|Buffer} or number of the output ID for the UTXO
       */
    constructor(codecID?: number, txid?: Buffer, outputidx?: Buffer | number, assetid?: Buffer, output?: Output);
}
/**
 * Class representing a set of [[UTXO]]s.
 */
export declare class UTXOSet {
    protected utxos: {
        [utxoid: string]: UTXO;
    };
    protected addressUTXOs: {
        [address: string]: {
            [utxoid: string]: BN;
        };
    };
    /**
       * Returns true if the [[UTXO]] is in the UTXOSet.
       *
       * @param utxo Either a [[UTXO]] a cb58 serialized string representing a UTXO
       */
    includes: (utxo: UTXO | string) => boolean;
    /**
       * Adds a UTXO to the UTXOSet.
       *
       * @param utxo Either a [[UTXO]] an cb58 serialized string representing a UTXO
       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false
       *
       * @returns A [[UTXO]] if one was added and undefined if nothing was added.
       */
    add: (utxo: UTXO | string, overwrite?: boolean) => UTXO;
    /**
       * Adds an array of [[UTXO]]s to the [[UTXOSet]].
       *
       * @param utxo Either a [[UTXO]] an cb58 serialized string representing a UTXO
       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false
       *
       * @returns An array of UTXOs which were added.
       */
    addArray: (utxos: Array<string | UTXO>, overwrite?: boolean) => Array<UTXO>;
    /**
       * Removes a [[UTXO]] from the [[UTXOSet]] if it exists.
       *
       * @param utxo Either a [[UTXO]] an cb58 serialized string representing a UTXO
       *
       * @returns A [[UTXO]] if it was removed and undefined if nothing was removed.
       */
    remove: (utxo: UTXO | string) => UTXO;
    /**
       * Removes an array of [[UTXO]]s to the [[UTXOSet]].
       *
       * @param utxo Either a [[UTXO]] an cb58 serialized string representing a UTXO
       * @param overwrite If true, if the UTXOID already exists, overwrite it... default false
       *
       * @returns An array of UTXOs which were removed.
       */
    removeArray: (utxos: Array<string | UTXO>) => Array<UTXO>;
    /**
       * Gets a [[UTXO]] from the [[UTXOSet]] by its UTXOID.
       *
       * @param utxoid String representing the UTXOID
       *
       * @returns A [[UTXO]] if it exists in the set.
       */
    getUTXO: (utxoid: string) => UTXO;
    /**
       * Gets all the [[UTXO]]s, optionally that match with UTXOIDs in an array
       *
       * @param utxoids An optional array of UTXOIDs, returns all [[UTXO]]s if not provided
       *
       * @returns An array of [[UTXO]]s.
       */
    getAllUTXOs: (utxoids?: Array<string>) => Array<UTXO>;
    /**
       * Gets all the [[UTXO]]s as strings, optionally that match with UTXOIDs in an array.
       *
       * @param utxoids An optional array of UTXOIDs, returns all [[UTXO]]s if not provided
       *
       * @returns An array of [[UTXO]]s as cb58 serialized strings.
       */
    getAllUTXOStrings: (utxoids?: Array<string>) => Array<string>;
    /**
       * Given an address or array of addresses, returns all the UTXOIDs for those addresses
       *
       * @param address An array of address {@link https://github.com/feross/buffer|Buffer}s
       * @param spendable If true, only retrieves UTXOIDs whose locktime has passed
       *
       * @returns An array of addresses.
       */
    getUTXOIDs: (addresses?: Array<Buffer>, spendable?: boolean) => Array<string>;
    /**
       * Gets the addresses in the [[UTXOSet]] and returns an array of {@link https://github.com/feross/buffer|Buffer}.
       */
    getAddresses: () => Array<Buffer>;
    /**
       * Returns the balance of a set of addresses in the UTXOSet.
       *
       * @param addresses An array of addresses
       * @param assetID Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized representation of an AssetID
       * @param asOf The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
       *
       * @returns Returns the total balance as a {@link https://github.com/indutny/bn.js/|BN}.
       */
    getBalance: (addresses: Array<Buffer>, assetID: Buffer | string, asOf?: BN) => BN;
    /**
       * Gets all the Asset IDs, optionally that match with Asset IDs in an array
       *
       * @param utxoids An optional array of Addresses as string or Buffer, returns all Asset IDs if not provided
       *
       * @returns An array of {@link https://github.com/feross/buffer|Buffer} representing the Asset IDs.
       */
    getAssetIDs: (addresses?: Array<Buffer>) => Array<Buffer>;
    /**
       * Creates an [[UnsignedTx]] wrapping a [[BaseTx]]. For more granular control, you may create your own
       * [[UnsignedTx]] wrapping a [[BaseTx]] manually (with their corresponding [[TransferableInput]]s and [[TransferableOutput]]s).
       *
       * @param networkid The number representing NetworkID of the node
       * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
       * @param amount The amount of AVAX to be spent in $nAVAX
       * @param toAddresses The addresses to send the funds
       * @param fromAddresses The addresses being used to send the funds from the UTXOs {@link https://github.com/feross/buffer|Buffer}
       * @param changeAddresses The addresses that can spend the change remaining from the spent UTXOs
       * @param assetid {@link https://github.com/feross/buffer|Buffer} of the asset ID for the UTXO
       * @param memo Optional contains arbitrary bytes, up to 256 bytes
       * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
       * @param locktime Optional. The locktime field created in the resulting outputs
       * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
       * @param outputID Optional. The outputID used for this transaction, must implement AmountOutput, default AVMConstants.SECPOUTPUTID
       *
       * @returns An unsigned transaction created from the passed in parameters.
       *
       */
    buildBaseTx: (networkid: number, blockchainid: Buffer, amount: BN, toAddresses: Array<Buffer>, fromAddresses: Array<Buffer>, changeAddresses: Array<Buffer>, assetID: Buffer, memo?: Buffer, asOf?: BN, locktime?: BN, threshold?: number, outputID?: number) => UnsignedTx;
    /**
       * Creates an unsigned transaction. For more granular control, you may create your own
       * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).
       *
       * @param networkid The number representing NetworkID of the node
       * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
       * @param avaxAssetId The AVAX Asset ID
       * @param fee The amount of AVAX to be paid for fees, in $nAVAX
       * @param feeSenderAddresses The addresses to send the fees
       * @param initialState The [[InitialStates]] that represent the intial state of a created asset
       * @param name String for the descriptive name of the asset
       * @param symbol String for the ticker symbol of the asset
       * @param denomination Optional number for the denomination which is 10^D. D must be >= 0 and <= 32. Ex: $1 AVAX = 10^9 $nAVAX
       * @param memo Optional contains arbitrary bytes, up to 256 bytes
       * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
       *
       * @returns An unsigned transaction created from the passed in parameters.
       *
       */
    buildCreateAssetTx: (networkid: number, blockchainid: Buffer, avaxAssetID: Buffer, fee: BN, feeSenderAddresses: Array<Buffer>, initialState: InitialStates, name: string, symbol: string, denomination: number, memo?: Buffer, asOf?: BN) => UnsignedTx;
    /**
     * Creates an unsigned transaction. For more granular control, you may create your own
      * [[CreateAssetTX]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s).
      *
      * @param networkid The number representing NetworkID of the node
      * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
      * @param avaxAssetId The AVAX Asset ID
      * @param fee The amount of AVAX to be paid for fees, in $nAVAX
      * @param feePayingAddresses The addresses to pay the fees
      * @param minterSets The minters and thresholds required to mint this nft asset
      * @param name String for the descriptive name of the nft asset
      * @param symbol String for the ticker symbol of the nft asset
      * @param memo Optional contains arbitrary bytes, up to 256 bytes
      * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
      * @param locktime Optional. The locktime field created in the resulting mint output
      *
      * @returns An unsigned transaction created from the passed in parameters.
      *
      */
    buildCreateNFTAssetTx: (networkid: number, blockchainid: Buffer, avaxAssetID: Buffer, fee: BN, feePayingAddresses: Array<Buffer>, minterSets: Array<MinterSet>, name: string, symbol: string, memo?: Buffer, asOf?: BN, locktime?: BN) => UnsignedTx;
    /**
     * Creates an unsigned NFT mint transaction. For more granular control, you may create your own
      * [[NFTMintTx]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
      *
      * @param networkid The number representing NetworkID of the node
      * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
      * @param feeAssetID The assetID for the AVAX fee to be paid
      * @param fee The amount of AVAX to be paid for fees, in $nAVAX
      * @param feeSenderAddresses The addresses to send the fees
      * @param outputOwners:Array An array of OutputOwners
      * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT
      * @param utxoids An array of strings for the NFTs being transferred
      * @param groupID Optional. The group this NFT is issued to.
      * @param payload Optional. Data for NFT Payload.
      * @param memo Optional contains arbitrary bytes, up to 256 bytes
      * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
      * @param locktime Optional. The locktime field created in the resulting mint output
      * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
      *
      * @returns An unsigned transaction created from the passed in parameters.
      *
      */
    buildCreateNFTMintTx: (networkid: number, blockchainid: Buffer, feeAssetID: Buffer, fee: BN, feeSenderAddresses: Array<Buffer>, to: Array<Buffer>, fromAddresses: Array<Buffer>, utxoids: Array<string>, groupID: number, payload: Buffer, memo: Buffer, asOf: BN, locktime: BN, threshold?: number) => UnsignedTx;
    /**
     * Creates an unsigned NFT transfer transaction. For more granular control, you may create your own
      * [[NFTTransferOperation]] manually (with their corresponding [[TransferableInput]]s, [[TransferableOutput]]s, and [[TransferOperation]]s).
      *
      * @param networkid The number representing NetworkID of the node
      * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
      * @param feeAssetID The assetID for the AVAX fee to be paid
      * @param fee The amount of AVAX to be paid for fees, in $nAVAX
      * @param feeSenderAddresses The addresses to send the fees
      * @param toAddresses An array of {@link https://github.com/feross/buffer|Buffer}s which indicate who recieves the NFT
      * @param fromAddresses An array for {@link https://github.com/feross/buffer|Buffer} who owns the NFT
      * @param utxoids An array of strings for the NFTs being transferred
      * @param memo Optional contains arbitrary bytes, up to 256 bytes
      * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
      * @param locktime Optional. The locktime field created in the resulting outputs
      * @param threshold Optional. The number of signatures required to spend the funds in the resultant UTXO
      * @returns An unsigned transaction created from the passed in parameters.
      *
      */
    buildNFTTransferTx: (networkid: number, blockchainid: Buffer, feeAssetID: Buffer, fee: BN, feeSenderAddresses: Array<Buffer>, toAddresses: Array<Buffer>, fromAddresses: Array<Buffer>, utxoids: Array<string>, memo?: Buffer, asOf?: BN, locktime?: BN, threshold?: number) => UnsignedTx;
    /**
    * In-Development, do not use: Creates an unsigned ImportTx transaction.
    *
    * @param networkid The number representing NetworkID of the node
    * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
    * @param feeAssetID The assetID for the AVAX fee to be paid
    * @param fee The amount of AVAX to be paid for fees, in $nAVAX
    * @param feeSenderAddresses The addresses to send the fees
    * @param importIns An array of [[TransferableInput]]s being imported
    * @param memo Optional contains arbitrary bytes, up to 256 bytes
    * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
    * @returns An unsigned transaction created from the passed in parameters.
    *
    */
    buildImportTx: (networkid: number, blockchainid: Buffer, feeAssetID: Buffer, fee: BN, feeSenderAddresses: Array<Buffer>, importIns: Array<TransferableInput>, memo?: Buffer, asOf?: BN) => UnsignedTx;
    /**
    * In-Development, do not use: Creates an unsigned ExportTx transaction.
    *
    * @param networkid The number representing NetworkID of the node
    * @param blockchainid The {@link https://github.com/feross/buffer|Buffer} representing the BlockchainID for the transaction
    * @param feeAssetID The assetID for the AVAX fee to be paid
    * @param fee The amount of AVAX to be paid for fees, in $nAVAX
    * @param feeSenderAddresses The addresses to send the fees
    * @param utxoids An array of strings for the [[TransferableOutput]]s being exported
    * @param memo Optional contains arbitrary bytes, up to 256 bytes
    * @param asOf Optional. The timestamp to verify the transaction against as a {@link https://github.com/indutny/bn.js/|BN}
    * @returns An unsigned transaction created from the passed in parameters.
    *
    */
    buildExportTx: (networkid: number, blockchainid: Buffer, feeAssetID: Buffer, fee: BN, feeSenderAddresses: Array<Buffer>, utxoids: Array<string>, memo?: Buffer, asOf?: BN) => UnsignedTx;
    /**
       * Returns a new set with copy of UTXOs in this and set parameter.
       *
       * @param utxoset The [[UTXOSet]] to merge with this one
       * @param hasUTXOIDs Will subselect a set of [[UTXO]]s which have the UTXOIDs provided in this array, defults to all UTXOs
       *
       * @returns A new UTXOSet that contains all the filtered elements.
       */
    merge: (utxoset: UTXOSet, hasUTXOIDs?: Array<string>) => UTXOSet;
    /**
       * Set intersetion between this set and a parameter.
       *
       * @param utxoset The set to intersect
       *
       * @returns A new UTXOSet containing the intersection
       */
    intersection: (utxoset: UTXOSet) => UTXOSet;
    /**
       * Set difference between this set and a parameter.
       *
       * @param utxoset The set to difference
       *
       * @returns A new UTXOSet containing the difference
       */
    difference: (utxoset: UTXOSet) => UTXOSet;
    /**
       * Set symmetrical difference between this set and a parameter.
       *
       * @param utxoset The set to symmetrical difference
       *
       * @returns A new UTXOSet containing the symmetrical difference
       */
    symDifference: (utxoset: UTXOSet) => UTXOSet;
    /**
       * Set union between this set and a parameter.
       *
       * @param utxoset The set to union
       *
       * @returns A new UTXOSet containing the union
       */
    union: (utxoset: UTXOSet) => UTXOSet;
    /**
       * Merges a set by the rule provided.
       *
       * @param utxoset The set to merge by the MergeRule
       * @param mergeRule The [[MergeRule]] to apply
       *
       * @returns A new UTXOSet containing the merged data
       *
       * @remarks
       * The merge rules are as follows:
       *   * "intersection" - the intersection of the set
       *   * "differenceSelf" - the difference between the existing data and new set
       *   * "differenceNew" - the difference between the new data and the existing set
       *   * "symDifference" - the union of the differences between both sets of data
       *   * "union" - the unique set of all elements contained in both sets
       *   * "unionMinusNew" - the unique set of all elements contained in both sets, excluding values only found in the new set
       *   * "unionMinusSelf" - the unique set of all elements contained in both sets, excluding values only found in the existing set
       */
    mergeByRule: (utxoset: UTXOSet, mergeRule: MergeRule) => UTXOSet;
}
//# sourceMappingURL=utxos.d.ts.map