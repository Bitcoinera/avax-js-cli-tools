"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTCredential = exports.SecpCredential = exports.Credential = exports.SelectCredentialClass = void 0;
/**
 * @packageDocumentation
 * @module AVMAPI-Credentials
 */
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("../../utils/bintools"));
const types_1 = require("./types");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Takes a buffer representing the credential and returns the proper [[Credential]] instance.
 *
 * @param credid A number representing the credential ID parsed prior to the bytes passed in
 *
 * @returns An instance of an [[Credential]]-extended class.
 */
exports.SelectCredentialClass = (credid, ...args) => {
    if (credid === types_1.AVMConstants.SECPCREDENTIAL) {
        const secpcred = new SecpCredential(...args);
        return secpcred;
    }
    if (credid === types_1.AVMConstants.NFTCREDENTIAL) {
        const nftcred = new NFTCredential(...args);
        return nftcred;
    }
    /* istanbul ignore next */
    throw new Error(`Error - SelectCredentialClass: unknown credid ${credid}`);
};
class Credential {
    constructor(sigarray = undefined) {
        this.sigArray = [];
        /**
           * Adds a signature to the credentials and returns the index off the added signature.
           */
        this.addSignature = (sig) => {
            this.sigArray.push(sig);
            return this.sigArray.length - 1;
        };
        if (typeof sigarray !== 'undefined') {
            /* istanbul ignore next */
            this.sigArray = sigarray;
        }
    }
    fromBuffer(bytes, offset = 0) {
        const siglen = bintools.copyFrom(bytes, offset, offset + 4).readUInt32BE(0);
        offset += 4;
        this.sigArray = [];
        for (let i = 0; i < siglen; i++) {
            const sig = new types_1.Signature();
            offset = sig.fromBuffer(bytes, offset);
            this.sigArray.push(sig);
        }
        return offset;
    }
    toBuffer() {
        const siglen = buffer_1.Buffer.alloc(4);
        siglen.writeInt32BE(this.sigArray.length, 0);
        const barr = [siglen];
        let bsize = siglen.length;
        for (let i = 0; i < this.sigArray.length; i++) {
            const sigbuff = this.sigArray[i].toBuffer();
            bsize += sigbuff.length;
            barr.push(sigbuff);
        }
        return buffer_1.Buffer.concat(barr, bsize);
    }
}
exports.Credential = Credential;
class SecpCredential extends Credential {
    getCredentialID() {
        return types_1.AVMConstants.SECPCREDENTIAL;
    }
}
exports.SecpCredential = SecpCredential;
class NFTCredential extends Credential {
    getCredentialID() {
        return types_1.AVMConstants.NFTCREDENTIAL;
    }
}
exports.NFTCredential = NFTCredential;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGVudGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9hdm0vY3JlZGVudGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7OztHQUdHO0FBQ0gsb0NBQWlDO0FBQ2pDLG9FQUE0QztBQUU1QyxtQ0FBa0Q7QUFFbEQ7O0dBRUc7QUFDSCxNQUFNLFFBQVEsR0FBWSxrQkFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBRWpEOzs7Ozs7R0FNRztBQUNVLFFBQUEscUJBQXFCLEdBQUcsQ0FBQyxNQUFhLEVBQUUsR0FBRyxJQUFlLEVBQWEsRUFBRTtJQUNwRixJQUFJLE1BQU0sS0FBSyxvQkFBWSxDQUFDLGNBQWMsRUFBRTtRQUMxQyxNQUFNLFFBQVEsR0FBa0IsSUFBSSxjQUFjLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUM1RCxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUFDLElBQUksTUFBTSxLQUFLLG9CQUFZLENBQUMsYUFBYSxFQUFFO1FBQzNDLE1BQU0sT0FBTyxHQUFpQixJQUFJLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3pELE9BQU8sT0FBTyxDQUFDO0tBQ2hCO0lBQ0QsMEJBQTBCO0lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDN0UsQ0FBQyxDQUFDO0FBRUYsTUFBc0IsVUFBVTtJQXNDOUIsWUFBWSxXQUE0QixTQUFTO1FBckN2QyxhQUFRLEdBQW9CLEVBQUUsQ0FBQztRQUl6Qzs7YUFFSztRQUNMLGlCQUFZLEdBQUcsQ0FBQyxHQUFhLEVBQVMsRUFBRTtZQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN4QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUM7UUE0QkEsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLEVBQUU7WUFDbkMsMEJBQTBCO1lBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQTlCRCxVQUFVLENBQUMsS0FBSyxFQUFFLFNBQWdCLENBQUM7UUFDakMsTUFBTSxNQUFNLEdBQVUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkYsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25CLEtBQUssSUFBSSxDQUFDLEdBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdEMsTUFBTSxHQUFHLEdBQWEsSUFBSSxpQkFBUyxFQUFFLENBQUM7WUFDdEMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELFFBQVE7UUFDTixNQUFNLE1BQU0sR0FBVSxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0MsTUFBTSxJQUFJLEdBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEMsSUFBSSxLQUFLLEdBQVUsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFVLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEQsTUFBTSxPQUFPLEdBQVUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuRCxLQUFLLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBUUY7QUE1Q0QsZ0NBNENDO0FBRUQsTUFBYSxjQUFlLFNBQVEsVUFBVTtJQUM1QyxlQUFlO1FBQ2IsT0FBTyxvQkFBWSxDQUFDLGNBQWMsQ0FBQztJQUNyQyxDQUFDO0NBQ0Y7QUFKRCx3Q0FJQztBQUVELE1BQWEsYUFBYyxTQUFRLFVBQVU7SUFDM0MsZUFBZTtRQUNiLE9BQU8sb0JBQVksQ0FBQyxhQUFhLENBQUM7SUFDcEMsQ0FBQztDQUNGO0FBSkQsc0NBSUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBBVk1BUEktQ3JlZGVudGlhbHNcbiAqL1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLyc7XG5pbXBvcnQgQmluVG9vbHMgZnJvbSAnLi4vLi4vdXRpbHMvYmludG9vbHMnO1xuXG5pbXBvcnQgeyBTaWduYXR1cmUsIEFWTUNvbnN0YW50cyB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY29uc3QgYmludG9vbHM6QmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpO1xuXG4vKipcbiAqIFRha2VzIGEgYnVmZmVyIHJlcHJlc2VudGluZyB0aGUgY3JlZGVudGlhbCBhbmQgcmV0dXJucyB0aGUgcHJvcGVyIFtbQ3JlZGVudGlhbF1dIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBjcmVkaWQgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBjcmVkZW50aWFsIElEIHBhcnNlZCBwcmlvciB0byB0aGUgYnl0ZXMgcGFzc2VkIGluXG4gKlxuICogQHJldHVybnMgQW4gaW5zdGFuY2Ugb2YgYW4gW1tDcmVkZW50aWFsXV0tZXh0ZW5kZWQgY2xhc3MuXG4gKi9cbmV4cG9ydCBjb25zdCBTZWxlY3RDcmVkZW50aWFsQ2xhc3MgPSAoY3JlZGlkOm51bWJlciwgLi4uYXJnczpBcnJheTxhbnk+KTpDcmVkZW50aWFsID0+IHtcbiAgaWYgKGNyZWRpZCA9PT0gQVZNQ29uc3RhbnRzLlNFQ1BDUkVERU5USUFMKSB7XG4gICAgY29uc3Qgc2VjcGNyZWQ6U2VjcENyZWRlbnRpYWwgPSBuZXcgU2VjcENyZWRlbnRpYWwoLi4uYXJncyk7XG4gICAgcmV0dXJuIHNlY3BjcmVkO1xuICB9IGlmIChjcmVkaWQgPT09IEFWTUNvbnN0YW50cy5ORlRDUkVERU5USUFMKSB7XG4gICAgY29uc3QgbmZ0Y3JlZDpORlRDcmVkZW50aWFsID0gbmV3IE5GVENyZWRlbnRpYWwoLi4uYXJncyk7XG4gICAgcmV0dXJuIG5mdGNyZWQ7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciAtIFNlbGVjdENyZWRlbnRpYWxDbGFzczogdW5rbm93biBjcmVkaWQgJHtjcmVkaWR9YCk7XG59O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ3JlZGVudGlhbCB7XG4gIHByb3RlY3RlZCBzaWdBcnJheTpBcnJheTxTaWduYXR1cmU+ID0gW107XG5cbiAgYWJzdHJhY3QgZ2V0Q3JlZGVudGlhbElEKCk6bnVtYmVyO1xuXG4gIC8qKlxuICAgICAqIEFkZHMgYSBzaWduYXR1cmUgdG8gdGhlIGNyZWRlbnRpYWxzIGFuZCByZXR1cm5zIHRoZSBpbmRleCBvZmYgdGhlIGFkZGVkIHNpZ25hdHVyZS5cbiAgICAgKi9cbiAgYWRkU2lnbmF0dXJlID0gKHNpZzpTaWduYXR1cmUpOm51bWJlciA9PiB7XG4gICAgdGhpcy5zaWdBcnJheS5wdXNoKHNpZyk7XG4gICAgcmV0dXJuIHRoaXMuc2lnQXJyYXkubGVuZ3RoIC0gMTtcbiAgfTtcblxuICBmcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQ6bnVtYmVyID0gMCk6bnVtYmVyIHtcbiAgICBjb25zdCBzaWdsZW46bnVtYmVyID0gYmludG9vbHMuY29weUZyb20oYnl0ZXMsIG9mZnNldCwgb2Zmc2V0ICsgNCkucmVhZFVJbnQzMkJFKDApO1xuICAgIG9mZnNldCArPSA0O1xuICAgIHRoaXMuc2lnQXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpOm51bWJlciA9IDA7IGkgPCBzaWdsZW47IGkrKykge1xuICAgICAgY29uc3Qgc2lnOlNpZ25hdHVyZSA9IG5ldyBTaWduYXR1cmUoKTtcbiAgICAgIG9mZnNldCA9IHNpZy5mcm9tQnVmZmVyKGJ5dGVzLCBvZmZzZXQpO1xuICAgICAgdGhpcy5zaWdBcnJheS5wdXNoKHNpZyk7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxuICB0b0J1ZmZlcigpOkJ1ZmZlciB7XG4gICAgY29uc3Qgc2lnbGVuOkJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KTtcbiAgICBzaWdsZW4ud3JpdGVJbnQzMkJFKHRoaXMuc2lnQXJyYXkubGVuZ3RoLCAwKTtcbiAgICBjb25zdCBiYXJyOkFycmF5PEJ1ZmZlcj4gPSBbc2lnbGVuXTtcbiAgICBsZXQgYnNpemU6bnVtYmVyID0gc2lnbGVuLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpOm51bWJlciA9IDA7IGkgPCB0aGlzLnNpZ0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzaWdidWZmOkJ1ZmZlciA9IHRoaXMuc2lnQXJyYXlbaV0udG9CdWZmZXIoKTtcbiAgICAgIGJzaXplICs9IHNpZ2J1ZmYubGVuZ3RoO1xuICAgICAgYmFyci5wdXNoKHNpZ2J1ZmYpO1xuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChiYXJyLCBic2l6ZSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihzaWdhcnJheTpBcnJheTxTaWduYXR1cmU+ID0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBzaWdhcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICB0aGlzLnNpZ0FycmF5ID0gc2lnYXJyYXk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZWNwQ3JlZGVudGlhbCBleHRlbmRzIENyZWRlbnRpYWwge1xuICBnZXRDcmVkZW50aWFsSUQoKTpudW1iZXIge1xuICAgIHJldHVybiBBVk1Db25zdGFudHMuU0VDUENSRURFTlRJQUw7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5GVENyZWRlbnRpYWwgZXh0ZW5kcyBDcmVkZW50aWFsIHtcbiAgZ2V0Q3JlZGVudGlhbElEKCk6bnVtYmVyIHtcbiAgICByZXR1cm4gQVZNQ29uc3RhbnRzLk5GVENSRURFTlRJQUw7XG4gIH1cbn1cbiJdfQ==