"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../utils/types");
/**
 * Class for interacting with a node's AdminAPI.
 *
 * @category RPCAPIs
 *
 * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called.
 * Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.
 */
class AdminAPI extends types_1.JRPCAPI {
    /**
       * This class should not be instantiated directly. Instead use the [[Avalanche.addAPI]]
       * method.
       *
       * @param core A reference to the Avalanche class
       * @param baseurl Defaults to the string "/ext/admin" as the path to rpc's baseurl
       */
    constructor(core, baseurl = '/ext/admin') {
        super(core, baseurl);
        /**
           * Fetches the nodeID from the node.
           *
           * @returns Returns a Promise<string> of the nodeID.
           */
        this.getNodeID = () => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            return this.callMethod('admin.getNodeID', params)
                .then((response) => response.data.result.nodeID);
        });
        /**
           * Fetches the networkID from the node.
           *
           * @returns Returns a Promise<number> of the networkID.
           */
        this.getNetworkID = () => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            return this.callMethod('admin.getNetworkID', params)
                .then((response) => response.data.result.networkID);
        });
        /**
           * Assign an API an alias, a different endpoint for the API. The original endpoint will still
           * work. This change only affects this node; other nodes will not know about this alias.
           *
           * @param endpoint The original endpoint of the API. endpoint should only include the part of
           * the endpoint after /ext/
           * @param alias The API being aliased can now be called at ext/alias
           *
           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.
           */
        this.alias = (endpoint, alias) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                endpoint,
                alias,
            };
            return this.callMethod('admin.alias', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Give a blockchain an alias, a different name that can be used any place the blockchain’s
           * ID is used.
           *
           * @param endpoint The blockchain’s ID
           * @param alias Can now be used in place of the blockchain’s ID (in API endpoints, for example)
           *
           * @returns Returns a Promise<boolean> containing success, true for success, false for failure.
           */
        this.aliasChain = (chain, alias) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                chain,
                alias,
            };
            return this.callMethod('admin.aliasChain', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Fetches the blockchainID from the node for a given alias.
           *
           * @param alias The blockchain alias to get the blockchainID
           *
           * @returns Returns a Promise<string> containing the base 58 string representation of the
           * blockchainID.
           */
        this.getBlockchainID = (alias) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                alias,
            };
            return this.callMethod('admin.getBlockchainID', params)
                .then((response) => response.data.result.blockchainID);
        });
        /**
           * Fetches the version of Gecko this node is running
           *
           * @returns Returns a Promise<string> containing the version of Gecko.
           */
        this.getNodeVersion = () => __awaiter(this, void 0, void 0, function* () {
            return this.callMethod('admin.getNodeVersion')
                .then((response) => response.data.result.version);
        });
        /**
           * Fetches the network name this node is running on
           *
           * @returns Returns a Promise<string> containing the network name.
           */
        this.getNetworkName = () => __awaiter(this, void 0, void 0, function* () {
            return this.callMethod('admin.getNetworkName')
                .then((response) => response.data.result.networkName);
        });
        /**
           * Dump the mutex statistics of the node to the specified file.
           *
           * @param filename Name of the file to write the statistics.
           *
           * @returns Promise for a boolean that is true on success.
           */
        this.lockProfile = (filename) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                fileName: filename,
            };
            return this.callMethod('admin.lockProfile', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Dump the current memory footprint of the node to the specified file.
           *
           * @param filename Name of the file to write the profile information.
           *
           * @returns Promise for a boolean that is true on success.
           */
        this.memoryProfile = (filename) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                fileName: filename,
            };
            return this.callMethod('admin.memoryProfile', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Returns the peers connected to the node.
           *
           * @returns Promise for the list of connected peers in <ip>:<port> format.
           */
        this.peers = () => __awaiter(this, void 0, void 0, function* () {
            return this.callMethod('admin.peers')
                .then((response) => response.data.result.peers);
        });
        /**
           * Start profiling the cpu utilization of the node. Will dump the profile information into
           * the specified file on stop.
           *
           * @param filename Name of the file to write the profile information on stop.
           *
           * @returns Promise for a boolean that is true on success.
           */
        this.startCPUProfiler = (filename) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                fileName: filename,
            };
            return this.callMethod('admin.startCPUProfiler', params)
                .then((response) => response.data.result.success);
        });
        /**
           * Stop the CPU profile that was previously started.
           *
           * @returns Promise for a boolean that is true on success.
           */
        this.stopCPUProfiler = () => __awaiter(this, void 0, void 0, function* () {
            return this.callMethod('admin.stopCPUProfiler')
                .then((response) => response.data.result.success);
        });
    }
}
exports.default = AdminAPI;
//# sourceMappingURL=data:application/json;base64,