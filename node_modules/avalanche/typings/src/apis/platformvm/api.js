"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../utils/types");
const bintools_1 = __importDefault(require("../../utils/bintools"));
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
/**
 * Class for interacting with a node's PlatformVMAPI
 *
 * @category RPCAPIs
 *
 * @remarks This extends the [[JRPCAPI]] class. This class should not be directly called. Instead, use the [[Avalanche.addAPI]] function to register this interface with Avalanche.
 */
class PlatformVMAPI extends types_1.JRPCAPI {
    /**
     * This class should not be instantiated directly.
     * Instead use the [[Avalanche.addAPI]] method.
     *
     * @param core A reference to the Avalanche class
     * @param baseurl Defaults to the string "/ext/P" as the path to blockchain's baseurl
     */
    constructor(core, baseurl = '/ext/P') {
        super(core, baseurl);
        /**
         * Creates a new blockchain.
         *
         * @param vmID The ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.
         * @param name A human-readable name for the new blockchain
         * @param payerNonce The next unused nonce of the account paying the transaction fee
         * @param genesis The base 58 (with checksum) representation of the genesis state of the new blockchain. Virtual Machines should have a static API method named buildGenesis that can be used to generate genesisData.
         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an cb58 serialized string for the SubnetID or its alias.
         *
         * @returns Promise for the unsigned transaction to create this blockchain. Must be signed by a sufficient number of the Subnetâ€™s control keys and by the account paying the transaction fee.
         */
        this.createBlockchain = (vmID, name, payerNonce, genesis, subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                vmID,
                name,
                payerNonce,
                genesisData: genesis,
            };
            if (typeof subnetID === 'string') {
                params.subnetID = subnetID;
            }
            else if (typeof subnetID !== 'undefined') {
                params.subnetID = bintools.cb58Encode(subnetID);
            }
            return this.callMethod('platform.createBlockchain', params)
                .then((response) => response.data.result.blockchainID);
        });
        /**
         * Creates a new blockchain.
         *
         * @param blockchainID The blockchainID requesting a status update
         *
         * @returns Promise for a string of one of: "Validating", "Created", "Preferred", "Unknown".
         */
        this.getBlockchainStatus = (blockchainID) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                blockchainID,
            };
            return this.callMethod('platform.getBlockchainStatus', params)
                .then((response) => response.data.result.status);
        });
        /**
         * The P-Chain uses an account model. This method creates a P-Chain account on an existing user in the Keystore.
         *
         * @param username The username of the Keystore user that controls the new account
         * @param password The password of the Keystore user that controls the new account
         * @param privateKey The private key that controls the account. If omitted, a new private key is generated
         *
         * @returns Promise for a string of the newly created account address.
         */
        this.createAccount = (username, password, privateKey = undefined) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                username,
                password,
            };
            if (typeof privateKey === 'string') {
                params.privateKey = privateKey;
            }
            else if (typeof privateKey !== 'undefined') {
                params.privateKey = bintools.cb58Encode(privateKey);
            }
            return this.callMethod('platform.createAccount', params)
                .then((response) => response.data.result.address);
        });
        /**
         * The P-Chain uses an account model. An account is identified by an address. This method returns the account with the given address.
         *
         * @param address The address of the account
         *
         * @returns Promise for an object containing the address, the nonce, and the balance.
         */
        this.getAccount = (address) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                address,
            };
            return this.callMethod('platform.getAccount', params)
                .then((response) => response.data.result);
        });
        /**
         * List the accounts controlled by the user in the Keystore.
         *
         * @param username The username of the Keystore user
         * @param password The password of the Keystore user
         *
         * @returns Promise for an array of accounts.
         */
        this.listAccounts = (username, password) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                username,
                password,
            };
            return this.callMethod('platform.listAccounts', params)
                .then((response) => response.data.result.accounts);
        });
        /**
         * Lists the set of current validators.
         *
         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an
         * cb58 serialized string for the SubnetID or its alias.
         *
         * @returns Promise for an array of validators that are currently staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetcurrentvalidators|platform.getCurrentValidators documentation}.
         *
         */
        this.getCurrentValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            if (typeof subnetID === 'string') {
                params.subnetID = subnetID;
            }
            else if (typeof subnetID !== 'undefined') {
                params.subnetID = bintools.cb58Encode(subnetID);
            }
            return this.callMethod('platform.getCurrentValidators', params)
                .then((response) => response.data.result.validators);
        });
        /**
         * Lists the set of pending validators.
         *
         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer}
         * or a cb58 serialized string for the SubnetID or its alias.
         *
         * @returns Promise for an array of validators that are pending staking, see: {@link https://docs.avax.network/v1.0/en/api/platform/#platformgetpendingvalidators|platform.getPendingValidators documentation}.
         *
         */
        this.getPendingValidators = (subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            if (typeof subnetID === 'string') {
                params.subnetID = subnetID;
            }
            else if (typeof subnetID !== 'undefined') {
                params.subnetID = bintools.cb58Encode(subnetID);
            }
            return this.callMethod('platform.getPendingValidators', params)
                .then((response) => response.data.result.validators);
        });
        /**
         * Samples `Size` validators from the current validator set.
         *
         * @param sampleSize Of the total universe of validators, select this many at random
         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or an
         * cb58 serialized string for the SubnetID or its alias.
         *
         * @returns Promise for an array of validator's stakingIDs.
         */
        this.sampleValidators = (sampleSize, subnetID = undefined) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                size: sampleSize.toString(),
            };
            if (typeof subnetID === 'string') {
                params.subnetID = subnetID;
            }
            else if (typeof subnetID !== 'undefined') {
                params.subnetID = bintools.cb58Encode(subnetID);
            }
            return this.callMethod('platform.sampleValidators', params)
                .then((response) => response.data.result.validators);
        });
        /**
         * Add a validator to the Default Subnet.
         *
         * @param id The node ID of the validator
         * @param startTime Javascript Date object for the start time to validate
         * @param endTime Javascript Date object for the end time to validate
         * @param stakeAmount The amount of nAVAX the validator is staking as
         * a {@link https://github.com/indutny/bn.js/|BN}
         * @param payerNonce The next unused nonce of the account that is providing the staked
         * AVAX and paying the transaction fee
         * @param destination The P-Chain address of the account that the staked AVAX will be returned
         * to, as well as a validation reward if the validator is sufficiently responsive and correct
         * while it validated
         * @param delegationFeeRate Optional. The percent fee this validator charges when others
         * delegate stake to them, multiplied by 10,000 as
         * a {@link https://github.com/indutny/bn.js/|BN}. For example, suppose a validator has
         * delegationFeeRate 300,000 and someone delegates to that validator. When the delegation
         * period is over, if the delegator is entitled to a reward, 30% of the reward
         * (300,000 / 10,000) goes to the validator and 70% goes to the delegator
         * @param subnetID Optional. Either a {@link https://github.com/feross/buffer|Buffer} or
         * an cb58 serialized string for the SubnetID or its alias.
         *
         * @returns Promise for a base58 string of the unsigned transaction.
         */
        this.addDefaultSubnetValidator = (id, startTime, endTime, stakeAmount, payerNonce, destination, delegationFeeRate = undefined) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                id,
                startTime: startTime.getTime() / 1000,
                endTime: endTime.getTime() / 1000,
                stakeAmount: stakeAmount.toString(10),
                payerNonce: Math.floor(payerNonce),
                destination,
            };
            if (typeof delegationFeeRate !== 'undefined') {
                params.delegationFeeRate = delegationFeeRate.toString(10);
            }
            return this.callMethod('platform.addDefaultSubnetValidator', params)
                .then((response) => response.data.result.unsignedTx);
        });
        /**
         * Add a validator to a Subnet other than the Default Subnet. The validator must validate the Default Subnet for the entire duration they validate this Subnet.
         *
         * @param id The node ID of the validator
         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58 serialized string for the SubnetID or its alias.
         * @param startTime Javascript Date object for the start time to validate
         * @param endTime Javascript Date object for the end time to validate
         * @param weight The validatorâ€™s weight used for sampling
         * @param payerNonce The next unused nonce of the account that is providing the staked AVAX and paying the transaction fee
         *
         * @returns Promise for the unsigned transaction. It must be signed (using sign) by the proper number of the Subnetâ€™s control keys and by the key of the account paying the transaction fee before it can be issued.
         */
        this.addNonDefaultSubnetValidator = (id, subnetID, startTime, endTime, weight, payerNonce) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                id,
                startTime: startTime.getTime() / 1000,
                endTime: endTime.getTime() / 1000,
                weight,
                payerNonce: Math.floor(payerNonce),
            };
            if (typeof subnetID === 'string') {
                params.subnetID = subnetID;
            }
            else if (typeof subnetID !== 'undefined') {
                params.subnetID = bintools.cb58Encode(subnetID);
            }
            return this.callMethod('platform.addNonDefaultSubnetValidator', params)
                .then((response) => response.data.result.unsignedTx);
        });
        /**
         * Add a delegator to the Default Subnet.
         *
         * @param id The node ID of the delegatee
         * @param startTime Javascript Date object for when the delegator starts delegating
         * @param endTime Javascript Date object for when the delegator starts delegating
         * @param stakeAmount The amount of nAVAX the delegator is staking as
         * a {@link https://github.com/indutny/bn.js/|BN}
         * @param payerNonce The next unused nonce of the account that will provide the staked
         * AVAX and pay the transaction fee
         * @param destination The address of the account the staked AVAX and validation reward
         * (if applicable) are sent to at endTime
         *
         * @returns Promise for an array of validator's stakingIDs.
         */
        this.addDefaultSubnetDelegator = (id, startTime, endTime, stakeAmount, payerNonce, destination) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                id,
                startTime: startTime.getTime() / 1000,
                endTime: endTime.getTime() / 1000,
                stakeAmount: stakeAmount.toString(10),
                payerNonce: Math.floor(payerNonce),
                destination,
            };
            return this.callMethod('platform.addDefaultSubnetDelegator', params)
                .then((response) => response.data.result.unsignedTx);
        });
        /**
         * Create an unsigned transaction to create a new Subnet. The unsigned transaction must be
         * signed with the key of the account paying the transaction fee. The Subnetâ€™s ID is the ID of the transaction that creates it (ie the response from issueTx when issuing the signed transaction).
         *
         * @param controlKeys Array of platform addresses as strings
         * @param threshold To add a validator to this Subnet, a transaction must have threshold
         * signatures, where each signature is from a key whose address is an element of `controlKeys`
         * @param payerNonce The next unused nonce of the account providing the transaction fee
         *
         * @returns Promise for a string with the unsigned transaction encoded as base58.
         */
        this.createSubnet = (controlKeys, threshold, payerNonce) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                controlKeys,
                threshold,
                payerNonce,
            };
            return this.callMethod('platform.createSubnet', params)
                .then((response) => response.data.result.unsignedTx);
        });
        /**
         * Get the Subnet that validates a given blockchain.
         *
         * @param blockchainID Either a {@link https://github.com/feross/buffer|Buffer} or a cb58
         * encoded string for the blockchainID or its alias.
         *
         * @returns Promise for a string of the subnetID that validates the blockchain.
         */
        this.validatedBy = (blockchainID) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                blockchainID,
            };
            return this.callMethod('platform.validatedBy', params)
                .then((response) => response.data.result.subnetID);
        });
        /**
         * Get the IDs of the blockchains a Subnet validates.
         *
         * @param subnetID Either a {@link https://github.com/feross/buffer|Buffer} or an AVAX
         * serialized string for the SubnetID or its alias.
         *
         * @returns Promise for an array of blockchainIDs the subnet validates.
         */
        this.validates = (subnetID) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                subnetID,
            };
            if (typeof subnetID === 'string') {
                params.subnetID = subnetID;
            }
            else if (typeof subnetID !== 'undefined') {
                params.subnetID = bintools.cb58Encode(subnetID);
            }
            return this.callMethod('platform.validates', params)
                .then((response) => response.data.result.blockchainIDs);
        });
        /**
         * Get all the blockchains that exist (excluding the P-Chain).
         *
         * @returns Promise for an array of objects containing fields "id", "subnetID", and "vmID".
         */
        this.getBlockchains = () => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            return this.callMethod('platform.getBlockchains', params)
                .then((response) => response.data.result.blockchains);
        });
        /**
         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction
         * must be signed with the key of the account that the AVAX is sent from and which pays the
         * transaction fee. After issuing this transaction, you must call the X-Chainâ€™s importAVAX
         * method to complete the transfer.
         *
         * @param to The address on the X-Chain to send the AVAX to. Do not include X- in the address
         * @param amount Amount of AVAX to export as a {@link https://github.com/indutny/bn.js/|BN}
         * @param payerNonce The next unused nonce of the account paying the tx fee and providing
         * the sent AVAX
         *
         * @returns Promise for an unsigned transaction to be signed by the account the the AVAX is
         * sent from and pays the transaction fee.
         */
        this.exportAVAX = (amount, to, payerNonce) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                to,
                amount: amount.toString(10),
                payerNonce,
            };
            return this.callMethod('platform.exportAVAX', params)
                .then((response) => response.data.result.unsignedTx);
        });
        /**
         * Send AVAX from an account on the P-Chain to an address on the X-Chain. This transaction
         * must be signed with the key of the account that the AVAX is sent from and which pays
         * the transaction fee. After issuing this transaction, you must call the X-Chainâ€™s
         * importAVAX method to complete the transfer.
         *
         * @param username The Keystore user that controls the account specified in `to`
         * @param password The password of the Keystore user
         * @param to The ID of the account the AVAX is sent to. This must be the same as the to
         * argument in the corresponding call to the X-Chainâ€™s exportAVAX
         * @param payerNonce The next unused nonce of the account specified in `to`
         *
         * @returns Promise for a string for the transaction, which should be sent to the network
         * by calling issueTx.
         */
        this.importAVAX = (username, password, to, payerNonce) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                to,
                payerNonce,
                username,
                password,
            };
            return this.callMethod('platform.importAVAX', params)
                .then((response) => response.data.result.tx);
        });
        /**
         * Sign an unsigned or partially signed transaction.
         *
         * Transactions to add non-default Subnets require signatures from control keys and
         * from the account paying the transaction fee. If `signer` is a control key and the
         * transaction needs more signatures from control keys, `sign` will provide a control
         * signature. Otherwise, `signer` will sign to pay the transaction fee.
         *
         * @param username The Keystore user that controls the key signing `tx`
         * @param password The password of the Keystore user
         * @param tx The unsigned/partially signed transaction
         * @param signer The address of the key signing `tx`
         *
         * @returns Promise for an string of the transaction after being signed.
         */
        this.sign = (username, password, tx, signer) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                tx,
                signer,
                username,
                password,
            };
            return this.callMethod('platform.sign', params)
                .then((response) => response.data.result.tx);
        });
        /**
         * Issue a transaction to the Platform Chain.
         *
         * @param tx The base 58 (with checksum) representation of a transaction
         *
         * @returns Promise for an string of the transaction after being signed.
         */
        this.issueTx = (tx) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                tx,
            };
            return this.callMethod('platform.issueTx', params)
                .then((response) => response.data.result.txID);
        });
        /**
         * Get all the subnets that exist.
         *
         * @returns Promise for an array of objects containing fields "id",
         * "controlKeys", and "threshold".
         */
        this.getSubnets = () => __awaiter(this, void 0, void 0, function* () {
            const params = {};
            return this.callMethod('platform.getSubnets', params)
                .then((response) => response.data.result.subnets);
        });
        /**
         * Exports the private key for an address.
         *
         * @param username The name of the user with the private key
         * @param password The password used to decrypt the private key
         * @param address The address whose private key should be exported
         *
         * @returns Promise with the decrypted private key as store in the database
         */
        this.exportKey = (username, password, address) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                username,
                password,
                address,
            };
            return this.callMethod('platform.exportKey', params)
                .then((response) => response.data.result.privateKey);
        });
        /**
         * Give a user control over an address by providing the private key that controls the address.
         *
         * @param username The name of the user to store the private key
         * @param password The password that unlocks the user
         * @param privateKey A string representing the private key in the vm's format
         *
         * @returns The address for the imported private key.
         */
        this.importKey = (username, password, privateKey) => __awaiter(this, void 0, void 0, function* () {
            const params = {
                username,
                password,
                privateKey,
            };
            return this.callMethod('platform.importKey', params)
                .then((response) => response.data.result.address);
        });
    }
}
exports.default = PlatformVMAPI;
//# sourceMappingURL=data:application/json;base64,