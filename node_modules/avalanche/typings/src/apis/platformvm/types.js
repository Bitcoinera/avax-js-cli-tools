"use strict";
/**
 * @packageDocumentation
 * @module PVMAPI-Types
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnixNow = exports.PlatformVMConstants = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
class PlatformVMConstants {
}
exports.PlatformVMConstants = PlatformVMConstants;
PlatformVMConstants.ONEAVAX = new bn_js_1.default(1000000000);
PlatformVMConstants.DECIAVAX = PlatformVMConstants.ONEAVAX.div(new bn_js_1.default(10));
PlatformVMConstants.CENTIAVAX = PlatformVMConstants.ONEAVAX.div(new bn_js_1.default(100));
PlatformVMConstants.MILLIAVAX = PlatformVMConstants.ONEAVAX.div(new bn_js_1.default(1000));
PlatformVMConstants.MICROAVAX = PlatformVMConstants.ONEAVAX.div(new bn_js_1.default(1000000));
PlatformVMConstants.SECPFXID = 0;
PlatformVMConstants.NFTFXID = 1;
PlatformVMConstants.SECPOUTPUTID = 7;
PlatformVMConstants.NFTXFEROUTPUTID = 11;
PlatformVMConstants.NFTMINTOUTPUTID = 10;
PlatformVMConstants.SECPINPUTID = 5;
PlatformVMConstants.NFTMINTOPID = 12;
PlatformVMConstants.NFTXFEROP = 13;
PlatformVMConstants.BASETX = 0;
PlatformVMConstants.CREATEASSETTX = 1;
PlatformVMConstants.OPERATIONTX = 2;
PlatformVMConstants.IMPORTTX = 3;
PlatformVMConstants.EXPORTTX = 4;
PlatformVMConstants.SECPCREDENTIAL = 9;
PlatformVMConstants.NFTCREDENTIAL = 14;
PlatformVMConstants.ASSETIDLEN = 32;
PlatformVMConstants.BLOCKCHAINIDLEN = 32;
PlatformVMConstants.SYMBOLMAXLEN = 4;
PlatformVMConstants.ASSETNAMELEN = 128;
PlatformVMConstants.ADDRESSLENGTH = 20;
/**
 * Function providing the current UNIX time using a {@link https://github.com/indutny/bn.js/|BN}
 */
function UnixNow() {
    return new bn_js_1.default(Math.round((new Date()).getTime() / 1000));
}
exports.UnixNow = UnixNow;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpcy9wbGF0Zm9ybXZtL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7OztBQUVILGtEQUF1QjtBQUV2QixNQUFhLG1CQUFtQjs7QUFBaEMsa0RBa0RDO0FBakRRLDJCQUFPLEdBQU0sSUFBSSxlQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFaEMsNEJBQVEsR0FBTSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFMUQsNkJBQVMsR0FBTSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFNUQsNkJBQVMsR0FBTSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFFN0QsNkJBQVMsR0FBTSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFaEUsNEJBQVEsR0FBVSxDQUFDLENBQUM7QUFFcEIsMkJBQU8sR0FBVSxDQUFDLENBQUM7QUFFbkIsZ0NBQVksR0FBVSxDQUFDLENBQUM7QUFFeEIsbUNBQWUsR0FBVSxFQUFFLENBQUM7QUFFNUIsbUNBQWUsR0FBVSxFQUFFLENBQUM7QUFFNUIsK0JBQVcsR0FBVSxDQUFDLENBQUM7QUFFdkIsK0JBQVcsR0FBVSxFQUFFLENBQUM7QUFFeEIsNkJBQVMsR0FBVSxFQUFFLENBQUM7QUFFdEIsMEJBQU0sR0FBVSxDQUFDLENBQUM7QUFFbEIsaUNBQWEsR0FBVSxDQUFDLENBQUM7QUFFekIsK0JBQVcsR0FBVSxDQUFDLENBQUM7QUFFdkIsNEJBQVEsR0FBVSxDQUFDLENBQUM7QUFFcEIsNEJBQVEsR0FBVSxDQUFDLENBQUM7QUFFcEIsa0NBQWMsR0FBVSxDQUFDLENBQUM7QUFFMUIsaUNBQWEsR0FBVSxFQUFFLENBQUM7QUFFMUIsOEJBQVUsR0FBVSxFQUFFLENBQUM7QUFFdkIsbUNBQWUsR0FBVSxFQUFFLENBQUM7QUFFNUIsZ0NBQVksR0FBVSxDQUFDLENBQUM7QUFFeEIsZ0NBQVksR0FBVSxHQUFHLENBQUM7QUFFMUIsaUNBQWEsR0FBVSxFQUFFLENBQUM7QUFlbkM7O0dBRUc7QUFDSCxTQUFnQixPQUFPO0lBQ3JCLE9BQU8sSUFBSSxlQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzNELENBQUM7QUFGRCwwQkFFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIFBWTUFQSS1UeXBlc1xuICovXG5cbmltcG9ydCBCTiBmcm9tICdibi5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQbGF0Zm9ybVZNQ29uc3RhbnRzIHtcbiAgc3RhdGljIE9ORUFWQVg6Qk4gPSBuZXcgQk4oMTAwMDAwMDAwMCk7XG5cbiAgc3RhdGljIERFQ0lBVkFYOkJOID0gUGxhdGZvcm1WTUNvbnN0YW50cy5PTkVBVkFYLmRpdihuZXcgQk4oMTApKTtcblxuICBzdGF0aWMgQ0VOVElBVkFYOkJOID0gUGxhdGZvcm1WTUNvbnN0YW50cy5PTkVBVkFYLmRpdihuZXcgQk4oMTAwKSk7XG5cbiAgc3RhdGljIE1JTExJQVZBWDpCTiA9IFBsYXRmb3JtVk1Db25zdGFudHMuT05FQVZBWC5kaXYobmV3IEJOKDEwMDApKTtcblxuICBzdGF0aWMgTUlDUk9BVkFYOkJOID0gUGxhdGZvcm1WTUNvbnN0YW50cy5PTkVBVkFYLmRpdihuZXcgQk4oMTAwMDAwMCkpO1xuXG4gIHN0YXRpYyBTRUNQRlhJRDpudW1iZXIgPSAwO1xuXG4gIHN0YXRpYyBORlRGWElEOm51bWJlciA9IDE7XG5cbiAgc3RhdGljIFNFQ1BPVVRQVVRJRDpudW1iZXIgPSA3O1xuXG4gIHN0YXRpYyBORlRYRkVST1VUUFVUSUQ6bnVtYmVyID0gMTE7XG5cbiAgc3RhdGljIE5GVE1JTlRPVVRQVVRJRDpudW1iZXIgPSAxMDtcblxuICBzdGF0aWMgU0VDUElOUFVUSUQ6bnVtYmVyID0gNTtcblxuICBzdGF0aWMgTkZUTUlOVE9QSUQ6bnVtYmVyID0gMTI7XG5cbiAgc3RhdGljIE5GVFhGRVJPUDpudW1iZXIgPSAxMztcblxuICBzdGF0aWMgQkFTRVRYOm51bWJlciA9IDA7XG5cbiAgc3RhdGljIENSRUFURUFTU0VUVFg6bnVtYmVyID0gMTtcblxuICBzdGF0aWMgT1BFUkFUSU9OVFg6bnVtYmVyID0gMjtcblxuICBzdGF0aWMgSU1QT1JUVFg6bnVtYmVyID0gMztcblxuICBzdGF0aWMgRVhQT1JUVFg6bnVtYmVyID0gNDtcblxuICBzdGF0aWMgU0VDUENSRURFTlRJQUw6bnVtYmVyID0gOTtcblxuICBzdGF0aWMgTkZUQ1JFREVOVElBTDpudW1iZXIgPSAxNDtcblxuICBzdGF0aWMgQVNTRVRJRExFTjpudW1iZXIgPSAzMjtcblxuICBzdGF0aWMgQkxPQ0tDSEFJTklETEVOOm51bWJlciA9IDMyO1xuXG4gIHN0YXRpYyBTWU1CT0xNQVhMRU46bnVtYmVyID0gNDtcblxuICBzdGF0aWMgQVNTRVROQU1FTEVOOm51bWJlciA9IDEyODtcblxuICBzdGF0aWMgQUREUkVTU0xFTkdUSDpudW1iZXIgPSAyMDtcbn1cblxuLyoqXG4gKiBSdWxlcyB1c2VkIHdoZW4gbWVyZ2luZyBzZXRzXG4gKi9cbmV4cG9ydCB0eXBlIE1lcmdlUnVsZSA9ICdpbnRlcnNlY3Rpb24nIC8vIFNlbGYgSU5URVJTRUNUIE5ld1xufCAnZGlmZmVyZW5jZVNlbGYnIC8vIFNlbGYgTUlOVVMgTmV3XG58ICdkaWZmZXJlbmNlTmV3JyAvLyBOZXcgTUlOVVMgU2VsZlxufCAnc3ltRGlmZmVyZW5jZScgLy8gZGlmZmVyZW5jZVNlbGYgVU5JT04gZGlmZmVyZW5jZU5ld1xufCAndW5pb24nIC8vIFNlbGYgVU5JT04gTmV3XG58ICd1bmlvbk1pbnVzTmV3JyAvLyB1bmlvbiBNSU5VUyBkaWZmZXJlbmNlTmV3XG58ICd1bmlvbk1pbnVzU2VsZicgLy8gdW5pb24gTUlOVVMgZGlmZmVyZW5jZVNlbGZcbnwgJ0VSUk9SJzsgLy8gZ2VuZXJhdGUgZXJyb3IgZm9yIHRlc3RpbmdcblxuLyoqXG4gKiBGdW5jdGlvbiBwcm92aWRpbmcgdGhlIGN1cnJlbnQgVU5JWCB0aW1lIHVzaW5nIGEge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9pbmR1dG55L2JuLmpzL3xCTn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXhOb3coKTpCTiB7XG4gIHJldHVybiBuZXcgQk4oTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMCkpO1xufVxuIl19